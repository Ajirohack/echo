name: Build and Deploy

on:
  push:
    tags:
      - "v*"
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      build_type:
        description: "Build type"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - release

env:
  NODE_VERSION: "18"

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run test:lint

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration

      - name: Run security tests
        run: npm run test:security

      - name: Generate coverage report
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event.inputs.build_type == 'release'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build Windows app
        run: npm run package-win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-installers
          path: |
            dist/*.exe
            dist/*.msi
          retention-days: 30

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event.inputs.build_type == 'release'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build macOS app
        run: npm run package-mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-installers
          path: |
            dist/*.dmg
            dist/*.zip
          retention-days: 30

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event.inputs.build_type == 'release'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2 libxcomposite1 libxdamage1 libxrandr2 libgbm1 libgtk-3-0

      - name: Install dependencies
        run: npm ci

      - name: Build Linux app
        run: npm run package-linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-installers
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
          retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos, build-linux]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: echo ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## What's New in ${{ steps.get_version.outputs.VERSION }}

            ### Features
            - Real-time translation between multiple languages
            - Support for Discord, Zoom, Teams, and other communication platforms
            - Multiple translation service integration (DeepL, OpenAI, Google, Azure)
            - Virtual audio device integration
            - Cross-platform support (Windows, macOS, Linux)

            ### Installation

            **Windows:**
            - Download and run `Universal-Translator-Setup.exe`
            - Follow the installation wizard
            - VB-Audio Cable will be installed automatically

            **macOS:**
            - Download and open `Universal-Translator.dmg`
            - Drag echo to Applications
            - BlackHole audio driver will be installed on first run

            **Linux:**
            - Download the `.AppImage` file and make it executable
            - Or install the `.deb` package for Debian/Ubuntu systems
            - PulseAudio virtual sink will be configured automatically

            ### Setup
            1. Run echo
            2. Follow the setup wizard to configure API keys
            3. Test your microphone and audio devices
            4. Start translating!

            ### Support
            - 📖 [User Guide](https://docs.universaltranslator.app)
            - 🔑 [API Setup Guide](https://docs.universaltranslator.app/api-setup)
            - 🐛 [Report Issues](https://github.com/your-repo/universal-translator/issues)
            - 💬 [Community Discord](https://discord.gg/universaltranslator)

            ---

            **Full Changelog**: https://github.com/your-repo/universal-translator/compare/v1.0.0...${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false

      # Upload Windows artifacts
      - name: Upload Windows Installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/windows-installers/Universal-Translator-Setup.exe
          asset_name: Universal-Translator-${{ steps.get_version.outputs.VERSION }}-Setup.exe
          asset_content_type: application/octet-stream
        continue-on-error: true

      # Upload macOS artifacts
      - name: Upload macOS DMG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/macos-installers/Universal-Translator.dmg
          asset_name: Universal-Translator-${{ steps.get_version.outputs.VERSION }}-macOS.dmg
          asset_content_type: application/octet-stream
        continue-on-error: true

      # Upload Linux artifacts
      - name: Upload Linux AppImage
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/linux-installers/Universal-Translator.AppImage
          asset_name: Universal-Translator-${{ steps.get_version.outputs.VERSION }}-Linux.AppImage
          asset_content_type: application/octet-stream
        continue-on-error: true

      - name: Upload Linux DEB
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/linux-installers/universal-translator.deb
          asset_name: universal-translator-${{ steps.get_version.outputs.VERSION }}-amd64.deb
          asset_content_type: application/octet-stream
        continue-on-error: true

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

      - name: Notify Discord
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          if [ -n "$DISCORD_WEBHOOK" ]; then
            curl -H "Content-Type: application/json" \
                 -X POST \
                 -d "{\"content\":\"🎉 **echo ${{ steps.get_version.outputs.VERSION }}** has been released!\n\n📥 **Download:** https://github.com/whytehoux/echo/releases/tag/${{ steps.get_version.outputs.VERSION }}\n\n🚀 **Features:**\n- Real-time AI-powered translation\n- 100+ language support\n- Cross-platform compatibility\n- Advanced audio processing\n\n💬 **Support:** Join our Discord community for help and updates!\n\nBuilt with ❤️ by WhyteHoux.ai\"}" \
                 $DISCORD_WEBHOOK
          fi

  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

      - name: Update README with latest version
        run: |
          sed -i "s/Version: [0-9]\+\.[0-9]\+\.[0-9]\+/Version: ${{ steps.get_version.outputs.VERSION }}/g" README.md
          sed -i "s/download\/v[0-9]\+\.[0-9]\+\.[0-9]\+/download\/${{ steps.get_version.outputs.VERSION }}/g" README.md

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "Update README with version ${{ steps.get_version.outputs.VERSION }}" || exit 0
          git push
