name: Deploy Echo Application

on:
  push:
    branches:
      - main
      - develop
      - 'release/*'
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Code quality and security checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npm run format:check

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Unit and integration tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: echo_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      elasticsearch:
        image: elasticsearch:8.11.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: -Xms512m -Xmx512m
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
        ports:
          - 9200:9200

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          pip install -r requirements.txt || echo "No Python requirements found"

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/echo_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          echo "ELASTICSEARCH_URL=http://localhost:9200" >> .env.test

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until nc -z localhost 5432; do sleep 1; done'
          timeout 60 bash -c 'until nc -z localhost 6379; do sleep 1; done'
          timeout 60 bash -c 'until nc -z localhost 9200; do sleep 1; done'

      - name: Run database migrations
        run: npm run migrate:test

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: npm run test:unit -- --coverage

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: npm run test:integration

      - name: Run E2E tests
        if: matrix.test-type == 'e2e'
        run: |
          npm run build
          npm run test:e2e

      - name: Upload coverage reports
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Build and push Docker images
  build:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            BUILD_VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            GIT_COMMIT=${{ github.sha }}

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Determine deployment environment
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      namespace: ${{ steps.env.outputs.namespace }}
      cluster-context: ${{ steps.env.outputs.cluster-context }}
    steps:
      - name: Determine deployment environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENV="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENV="production"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            ENV="staging"
          elif [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
            ENV="staging"
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            ENV="production"
          else
            ENV="development"
          fi

          echo "environment=$ENV" >> $GITHUB_OUTPUT

          case $ENV in
            production)
              echo "namespace=echo-prod" >> $GITHUB_OUTPUT
              echo "cluster-context=production-cluster" >> $GITHUB_OUTPUT
              ;;
            staging)
              echo "namespace=echo-staging" >> $GITHUB_OUTPUT
              echo "cluster-context=staging-cluster" >> $GITHUB_OUTPUT
              ;;
            development)
              echo "namespace=echo-dev" >> $GITHUB_OUTPUT
              echo "cluster-context=development-cluster" >> $GITHUB_OUTPUT
              ;;
          esac

  # Deploy to Kubernetes
  deploy:
    name: Deploy to ${{ needs.determine-environment.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [build, security-scan, determine-environment]
    if: github.event_name != 'pull_request'
    environment:
      name: ${{ needs.determine-environment.outputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Setup Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
          kubectl config use-context ${{ needs.determine-environment.outputs.cluster-context }}

      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ needs.determine-environment.outputs.namespace }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Create secrets
        run: |
          # Create or update application secrets
          kubectl create secret generic echo-secrets \
            --namespace=${{ needs.determine-environment.outputs.namespace }} \
            --from-literal=postgres-password="${{ secrets.POSTGRES_PASSWORD }}" \
            --from-literal=redis-password="${{ secrets.REDIS_PASSWORD }}" \
            --from-literal=jwt-secret="${{ secrets.JWT_SECRET }}" \
            --from-literal=grafana-admin-password="${{ secrets.GRAFANA_ADMIN_PASSWORD }}" \
            --from-literal=database-url="${{ secrets.DATABASE_URL }}" \
            --from-literal=redis-url="${{ secrets.REDIS_URL }}" \
            --from-literal=elasticsearch-url="${{ secrets.ELASTICSEARCH_URL }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Update image tags
        run: |
          cd k8s/overlays/${{ needs.determine-environment.outputs.environment }}
          kustomize edit set image echo-app=${{ needs.build.outputs.image-tag }}

      - name: Deploy to Kubernetes
        id: deploy
        run: |
          cd k8s

          # Deploy using kustomize
          kubectl apply -k overlays/${{ needs.determine-environment.outputs.environment }}

          # Wait for deployment to complete
          kubectl rollout status deployment/echo-app-${{ needs.determine-environment.outputs.environment }} \
            --namespace=${{ needs.determine-environment.outputs.namespace }} \
            --timeout=600s

          kubectl rollout status deployment/echo-nginx-${{ needs.determine-environment.outputs.environment }} \
            --namespace=${{ needs.determine-environment.outputs.namespace }} \
            --timeout=300s

          # Get service URL
          if [[ "${{ needs.determine-environment.outputs.environment }}" == "production" ]]; then
            URL="https://echo.yourdomain.com"
          elif [[ "${{ needs.determine-environment.outputs.environment }}" == "staging" ]]; then
            URL="https://staging.echo.yourdomain.com"
          else
            URL="http://dev.echo.yourdomain.com"
          fi

          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          sleep 30

          # Test health endpoints
          kubectl exec -n ${{ needs.determine-environment.outputs.namespace }} \
            deployment/echo-app-${{ needs.determine-environment.outputs.environment }} -- \
            curl -f http://localhost:8080/health || exit 1

          # Test database connectivity
          kubectl exec -n ${{ needs.determine-environment.outputs.namespace }} \
            deployment/echo-postgres-${{ needs.determine-environment.outputs.environment }} -- \
            pg_isready -U echo || exit 1

      - name: Update deployment status
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ Deployment to ${{ needs.determine-environment.outputs.environment }} successful"
            echo "🌐 Application URL: ${{ steps.deploy.outputs.url }}"
          else
            echo "❌ Deployment to ${{ needs.determine-environment.outputs.environment }} failed"
            kubectl get pods -n ${{ needs.determine-environment.outputs.namespace }}
            kubectl describe deployment/echo-app-${{ needs.determine-environment.outputs.environment }} \
              -n ${{ needs.determine-environment.outputs.namespace }}
          fi

  # Rollback on failure
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [deploy, determine-environment]
    if: failure() && github.event_name != 'pull_request'
    steps:
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
          kubectl config use-context ${{ needs.determine-environment.outputs.cluster-context }}

      - name: Rollback deployment
        run: |
          kubectl rollout undo deployment/echo-app-${{ needs.determine-environment.outputs.environment }} \
            --namespace=${{ needs.determine-environment.outputs.namespace }}

          kubectl rollout status deployment/echo-app-${{ needs.determine-environment.outputs.environment }} \
            --namespace=${{ needs.determine-environment.outputs.namespace }} \
            --timeout=300s

  # Notify deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy, determine-environment]
    if: always() && github.event_name != 'pull_request'
    steps:
      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            Deployment to ${{ needs.determine-environment.outputs.environment }} ${{ job.status }}
            Environment: ${{ needs.determine-environment.outputs.environment }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Actor: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create GitHub deployment
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ needs.determine-environment.outputs.environment }}',
              description: 'Automated deployment via GitHub Actions',
              auto_merge: false
            });
