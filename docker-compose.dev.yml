version: '3.8'

# Development Docker Compose configuration
# This extends the main docker-compose.yml with development-specific settings

services:
  # Echo application in development mode
  echo-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: echo-app-dev
    restart: 'no'
    ports:
      - '3000:3000'
      - '8080:8080'
      - '9000:9000'
      - '9229:9229' # Node.js debugging port
    environment:
      - NODE_ENV=development
      - DEBUG=echo:*
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://echo:echo_password@postgres:5432/echo_db
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - LOG_LEVEL=debug
      - AUDIO_STORAGE_PATH=/app/audio
      - HOT_RELOAD=true
      - ENABLE_DEBUGGING=true
    volumes:
      - ./src:/app/src:cached
      - ./config:/app/config:cached
      - ./assets:/app/assets:cached
      - ./package.json:/app/package.json:ro
      - ./package-lock.json:/app/package-lock.json:ro
      - audio_data_dev:/app/audio
      - logs_data_dev:/app/logs
      - temp_data_dev:/app/temp
      - node_modules_cache:/app/node_modules
    command: ['sh', '-c', 'npm install && npm run dev:debug']
    depends_on:
      - redis
      - postgres
      - elasticsearch
    networks:
      - echo-network
    stdin_open: true
    tty: true

  # Redis with development settings
  redis:
    image: redis:7-alpine
    container_name: echo-redis-dev
    restart: 'no'
    ports:
      - '6379:6379'
    volumes:
      - redis_data_dev:/data
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru --save 60 1
    networks:
      - echo-network

  # PostgreSQL with development settings
  postgres:
    image: postgres:15-alpine
    container_name: echo-postgres-dev
    restart: 'no'
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_DB=echo_db
      - POSTGRES_USER=echo
      - POSTGRES_PASSWORD=echo_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./docker/postgres/dev-data.sql:/docker-entrypoint-initdb.d/dev-data.sql:ro
    networks:
      - echo-network
    command:
      [
        'postgres',
        '-c',
        'log_statement=all',
        '-c',
        'log_destination=stderr',
        '-c',
        'logging_collector=on',
        '-c',
        'log_min_duration_statement=0',
      ]

  # Elasticsearch with development settings
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: echo-elasticsearch-dev
    restart: 'no'
    ports:
      - '9200:9200'
      - '9300:9300'
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - 'ES_JAVA_OPTS=-Xms256m -Xmx256m'
      - bootstrap.memory_lock=true
    volumes:
      - elasticsearch_data_dev:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - echo-network

  # Development tools container
  dev-tools:
    image: node:18-alpine
    container_name: echo-dev-tools
    working_dir: /app
    volumes:
      - .:/app:cached
      - node_modules_cache:/app/node_modules
    command: tail -f /dev/null
    networks:
      - echo-network
    profiles:
      - tools

  # Hot reload proxy for frontend development
  webpack-dev-server:
    image: node:18-alpine
    container_name: echo-webpack-dev
    working_dir: /app
    ports:
      - '8081:8081'
    environment:
      - NODE_ENV=development
      - WEBPACK_DEV_SERVER=true
    volumes:
      - ./src:/app/src:cached
      - ./webpack.config.js:/app/webpack.config.js:ro
      - ./package.json:/app/package.json:ro
      - node_modules_cache:/app/node_modules
    command: ['sh', '-c', 'npm install && npm run webpack:dev']
    networks:
      - echo-network
    profiles:
      - frontend

  # Test runner container
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: echo-test-runner
    environment:
      - NODE_ENV=test
      - REDIS_URL=redis://redis-test:6379
      - POSTGRES_URL=postgresql://echo:echo_password@postgres-test:5432/echo_test_db
    volumes:
      - ./src:/app/src:cached
      - ./tests:/app/tests:cached
      - ./package.json:/app/package.json:ro
      - test_coverage:/app/coverage
    command: ['sh', '-c', 'npm install && npm run test:watch']
    depends_on:
      - redis-test
      - postgres-test
    networks:
      - echo-network
    profiles:
      - test

  # Test database
  postgres-test:
    image: postgres:15-alpine
    container_name: echo-postgres-test
    environment:
      - POSTGRES_DB=echo_test_db
      - POSTGRES_USER=echo
      - POSTGRES_PASSWORD=echo_password
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - echo-network
    profiles:
      - test

  # Test Redis
  redis-test:
    image: redis:7-alpine
    container_name: echo-redis-test
    volumes:
      - redis_test_data:/data
    networks:
      - echo-network
    profiles:
      - test

  # Database administration tool
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: echo-pgadmin
    restart: 'no'
    ports:
      - '5050:80'
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@echo.local
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - echo-network
    profiles:
      - admin

  # Redis administration tool
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: echo-redis-commander
    restart: 'no'
    ports:
      - '8082:8081'
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - echo-network
    profiles:
      - admin

volumes:
  audio_data_dev:
    driver: local
  logs_data_dev:
    driver: local
  temp_data_dev:
    driver: local
  redis_data_dev:
    driver: local
  postgres_data_dev:
    driver: local
  elasticsearch_data_dev:
    driver: local
  node_modules_cache:
    driver: local
  test_coverage:
    driver: local
  postgres_test_data:
    driver: local
  redis_test_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  echo-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
