apiVersion: apps/v1
kind: Deployment
metadata:
  name: echo-prometheus
  namespace: echo
  labels:
    app: echo-prometheus
    component: monitoring
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: echo-prometheus
  template:
    metadata:
      labels:
        app: echo-prometheus
        component: monitoring
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
        - name: prometheus
          image: prom/prometheus:v2.47.0
          imagePullPolicy: IfNotPresent
          ports:
            - name: web
              containerPort: 9090
              protocol: TCP
          args:
            - --config.file=/etc/prometheus/prometheus.yml
            - --storage.tsdb.path=/prometheus
            - --storage.tsdb.retention.time=30d
            - --storage.tsdb.retention.size=10GB
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --web.enable-lifecycle
            - --web.enable-admin-api
            - --log.level=info
          resources:
            requests:
              memory: '1Gi'
              cpu: '500m'
            limits:
              memory: '2Gi'
              cpu: '1000m'
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: web
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /-/ready
              port: web
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 4
            failureThreshold: 3
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus
              readOnly: true
            - name: prometheus-data
              mountPath: /prometheus
      volumes:
        - name: prometheus-config
          configMap:
            name: echo-prometheus-config
        - name: prometheus-data
          persistentVolumeClaim:
            claimName: echo-prometheus-pvc
      nodeSelector:
        echo.io/node-type: 'monitoring'
      tolerations:
        - key: 'echo.io/dedicated'
          operator: 'Equal'
          value: 'monitoring'
          effect: 'NoSchedule'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: echo-grafana
  namespace: echo
  labels:
    app: echo-grafana
    component: monitoring
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: echo-grafana
  template:
    metadata:
      labels:
        app: echo-grafana
        component: monitoring
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        fsGroup: 472
      containers:
        - name: grafana
          image: grafana/grafana:10.1.0
          imagePullPolicy: IfNotPresent
          ports:
            - name: web
              containerPort: 3000
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_USER
              value: 'admin'
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: echo-secrets
                  key: grafana-admin-password
            - name: GF_INSTALL_PLUGINS
              value: 'grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel'
            - name: GF_PATHS_DATA
              value: '/var/lib/grafana'
            - name: GF_PATHS_LOGS
              value: '/var/log/grafana'
            - name: GF_PATHS_PLUGINS
              value: '/var/lib/grafana/plugins'
            - name: GF_PATHS_PROVISIONING
              value: '/etc/grafana/provisioning'
          resources:
            requests:
              memory: '256Mi'
              cpu: '100m'
            limits:
              memory: '512Mi'
              cpu: '500m'
          livenessProbe:
            httpGet:
              path: /api/health
              port: web
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 30
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/health
              port: web
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 3
          volumeMounts:
            - name: grafana-data
              mountPath: /var/lib/grafana
            - name: grafana-config
              mountPath: /etc/grafana/grafana.ini
              subPath: grafana.ini
              readOnly: true
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
              readOnly: true
            - name: grafana-dashboards-config
              mountPath: /etc/grafana/provisioning/dashboards
              readOnly: true
            - name: grafana-dashboards
              mountPath: /var/lib/grafana/dashboards
              readOnly: true
      volumes:
        - name: grafana-data
          persistentVolumeClaim:
            claimName: echo-grafana-pvc
        - name: grafana-config
          configMap:
            name: echo-grafana-config
        - name: grafana-datasources
          configMap:
            name: echo-grafana-datasources
        - name: grafana-dashboards-config
          configMap:
            name: echo-grafana-dashboards-config
        - name: grafana-dashboards
          configMap:
            name: echo-grafana-dashboards
      nodeSelector:
        echo.io/node-type: 'monitoring'
      tolerations:
        - key: 'echo.io/dedicated'
          operator: 'Equal'
          value: 'monitoring'
          effect: 'NoSchedule'
---
apiVersion: v1
kind: Service
metadata:
  name: echo-prometheus-service
  namespace: echo
  labels:
    app: echo-prometheus
    component: monitoring
spec:
  type: ClusterIP
  ports:
    - name: web
      port: 9090
      targetPort: web
      protocol: TCP
  selector:
    app: echo-prometheus
---
apiVersion: v1
kind: Service
metadata:
  name: echo-grafana-service
  namespace: echo
  labels:
    app: echo-grafana
    component: monitoring
spec:
  type: ClusterIP
  ports:
    - name: web
      port: 3000
      targetPort: web
      protocol: TCP
  selector:
    app: echo-grafana
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: echo-prometheus-pvc
  namespace: echo
  labels:
    app: echo-prometheus
    component: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: fast-ssd
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: echo-grafana-pvc
  namespace: echo
  labels:
    app: echo-grafana
    component: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: fast-ssd
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: echo-prometheus-config
  namespace: echo
  labels:
    app: echo-prometheus
    component: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'echo-production'
        environment: 'kubernetes'

    rule_files:
      # - "first_rules.yml"
      # - "second_rules.yml"

    scrape_configs:
      # Prometheus itself
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
        scrape_interval: 30s
        metrics_path: /metrics

      # Echo application
      - job_name: 'echo-app'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - echo
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: echo-app-service
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics
        scrape_interval: 15s
        metrics_path: /metrics

      # Redis
      - job_name: 'redis'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - echo
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: echo-redis-service
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics
        scrape_interval: 30s
        metrics_path: /metrics

      # PostgreSQL
      - job_name: 'postgres'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - echo
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: echo-postgres-service
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics
        scrape_interval: 30s
        metrics_path: /metrics

      # Elasticsearch
      - job_name: 'elasticsearch'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - echo
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: echo-elasticsearch-service
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics
        scrape_interval: 30s
        metrics_path: /metrics

      # Nginx
      - job_name: 'nginx'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - echo
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: echo-nginx-service
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics
        scrape_interval: 30s
        metrics_path: /metrics

      # Kubernetes API server
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https

      # Kubernetes nodes
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics

      # Kubernetes pods
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: echo-grafana-config
  namespace: echo
  labels:
    app: echo-grafana
    component: monitoring
data:
  grafana.ini: |
    [analytics]
    check_for_updates = true

    [grafana_net]
    url = https://grafana.net

    [log]
    mode = console
    level = info

    [paths]
    data = /var/lib/grafana
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning

    [server]
    protocol = http
    http_port = 3000
    domain = localhost
    enforce_domain = false
    root_url = %(protocol)s://%(domain)s:%(http_port)s/
    serve_from_sub_path = false

    [database]
    type = sqlite3
    path = grafana.db

    [session]
    provider = file

    [security]
    admin_user = admin
    admin_password = admin
    secret_key = SW2YcwTIb9zpOOhoPsMm
    disable_gravatar = false

    [snapshots]
    external_enabled = true
    external_snapshot_url = https://snapshots-origin.raintank.io
    external_snapshot_name = Publish to snapshot.raintank.io

    [dashboards]
    versions_to_keep = 20

    [users]
    allow_sign_up = false
    allow_org_create = false
    auto_assign_org = true
    auto_assign_org_role = Viewer

    [auth.anonymous]
    enabled = false

    [auth.github]
    enabled = false

    [auth.google]
    enabled = false

    [auth.generic_oauth]
    enabled = false

    [auth.grafana_com]
    enabled = false

    [auth.proxy]
    enabled = false

    [auth.basic]
    enabled = true

    [auth.ldap]
    enabled = false

    [smtp]
    enabled = false

    [emails]
    welcome_email_on_sign_up = false

    [alerting]
    enabled = true
    execute_alerts = true

    [metrics]
    enabled = true
    interval_seconds = 10

    [metrics.graphite]
    address =
    prefix = prod.grafana.%(instance_name)s.

    [tracing.jaeger]
    address = localhost:6831
    always_included_tag = tag1:value1
    sampler_type = const
    sampler_param = 1

    [grafana_com]
    url = https://grafana.com
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: echo-grafana-datasources
  namespace: echo
  labels:
    app: echo-grafana
    component: monitoring
data:
  prometheus.yml: |
    apiVersion: 1

    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://echo-prometheus-service:9090
        isDefault: true
        editable: true
        jsonData:
          timeInterval: 15s
          queryTimeout: 60s
          httpMethod: POST
      
      - name: Echo-Metrics
        type: prometheus
        access: proxy
        url: http://echo-prometheus-service:9090
        isDefault: false
        editable: true
        jsonData:
          timeInterval: 5s
          queryTimeout: 30s
          httpMethod: POST
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: echo-grafana-dashboards-config
  namespace: echo
  labels:
    app: echo-grafana
    component: monitoring
data:
  dashboards.yml: |
    apiVersion: 1

    providers:
      - name: 'Echo Dashboards'
        orgId: 1
        folder: 'Echo'
        type: file
        disableDeletion: false
        updateIntervalSeconds: 30
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: echo-grafana-dashboards
  namespace: echo
  labels:
    app: echo-grafana
    component: monitoring
data:
  echo-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Echo Application Overview",
        "tags": ["echo", "overview"],
        "style": "dark",
        "timezone": "browser",
        "refresh": "30s",
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "panels": [
          {
            "id": 1,
            "title": "Application Status",
            "type": "stat",
            "targets": [
              {
                "expr": "up{job=\"echo-app\"}",
                "refId": "A"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "HTTP Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total{job=\"echo-app\"}[5m])",
                "refId": "A"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          }
        ]
      }
    }
