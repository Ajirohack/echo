apiVersion: apps/v1
kind: Deployment
metadata:
  name: echo-postgres
  namespace: echo
  labels:
    app: echo-postgres
    component: database
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: echo-postgres
  template:
    metadata:
      labels:
        app: echo-postgres
        component: database
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9187'
        prometheus.io/path: '/metrics'
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        fsGroup: 999
      containers:
        - name: postgres
          image: postgres:15-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          env:
            - name: POSTGRES_DB
              value: 'echo_db'
            - name: POSTGRES_USER
              value: 'echo'
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: echo-secrets
                  key: postgres-password
            - name: PGDATA
              value: '/var/lib/postgresql/data/pgdata'
            - name: POSTGRES_INITDB_ARGS
              value: '--encoding=UTF-8 --lc-collate=C --lc-ctype=C'
          resources:
            requests:
              memory: '512Mi'
              cpu: '250m'
            limits:
              memory: '2Gi'
              cpu: '1000m'
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 6
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
            - name: postgres-init
              mountPath: /docker-entrypoint-initdb.d
              readOnly: true
            - name: postgres-config
              mountPath: /etc/postgresql/postgresql.conf
              subPath: postgresql.conf
              readOnly: true
        - name: postgres-exporter
          image: prometheuscommunity/postgres-exporter:latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: metrics
              containerPort: 9187
              protocol: TCP
          env:
            - name: DATA_SOURCE_NAME
              value: 'postgresql://echo:$(POSTGRES_PASSWORD)@localhost:5432/echo_db?sslmode=disable'
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: echo-secrets
                  key: postgres-password
            - name: PG_EXPORTER_EXTEND_QUERY_PATH
              value: '/etc/postgres_exporter/queries.yaml'
          resources:
            requests:
              memory: '64Mi'
              cpu: '50m'
            limits:
              memory: '128Mi'
              cpu: '100m'
          volumeMounts:
            - name: postgres-exporter-config
              mountPath: /etc/postgres_exporter
              readOnly: true
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: echo-postgres-pvc
        - name: postgres-init
          configMap:
            name: echo-postgres-init
        - name: postgres-config
          configMap:
            name: echo-postgres-config
        - name: postgres-exporter-config
          configMap:
            name: echo-postgres-exporter-config
      nodeSelector:
        echo.io/node-type: 'database'
      tolerations:
        - key: 'echo.io/dedicated'
          operator: 'Equal'
          value: 'database'
          effect: 'NoSchedule'
---
apiVersion: v1
kind: Service
metadata:
  name: echo-postgres-service
  namespace: echo
  labels:
    app: echo-postgres
    component: database
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '9187'
    prometheus.io/path: '/metrics'
spec:
  type: ClusterIP
  ports:
    - name: postgres
      port: 5432
      targetPort: postgres
      protocol: TCP
    - name: metrics
      port: 9187
      targetPort: metrics
      protocol: TCP
  selector:
    app: echo-postgres
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: echo-postgres-pvc
  namespace: echo
  labels:
    app: echo-postgres
    component: database
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: echo-postgres-init
  namespace: echo
  labels:
    app: echo-postgres
    component: database
data:
  init.sql: |
    -- Echo PostgreSQL initialization script

    -- Create extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    CREATE EXTENSION IF NOT EXISTS "btree_gin";

    -- Create schemas
    CREATE SCHEMA IF NOT EXISTS echo;
    CREATE SCHEMA IF NOT EXISTS analytics;
    CREATE SCHEMA IF NOT EXISTS audit;

    -- Set search path
    ALTER DATABASE echo_db SET search_path TO echo, analytics, audit, public;
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: echo-postgres-config
  namespace: echo
  labels:
    app: echo-postgres
    component: database
data:
  postgresql.conf: |
    # PostgreSQL configuration for Echo application

    # Connection Settings
    listen_addresses = '*'
    port = 5432
    max_connections = 200
    superuser_reserved_connections = 3

    # Memory Settings
    shared_buffers = 256MB
    effective_cache_size = 1GB
    maintenance_work_mem = 64MB
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    work_mem = 4MB
    min_wal_size = 1GB
    max_wal_size = 4GB

    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_truncate_on_rotation = off
    log_rotation_age = 1d
    log_rotation_size = 100MB
    log_min_duration_statement = 1000
    log_checkpoints = on
    log_connections = on
    log_disconnections = on
    log_lock_waits = on
    log_temp_files = 0
    log_autovacuum_min_duration = 0
    log_error_verbosity = default

    # Replication
    wal_level = replica
    max_wal_senders = 10
    max_replication_slots = 10
    hot_standby = on

    # Query Tuning
    default_statistics_target = 100
    constraint_exclusion = partition
    cursor_tuple_fraction = 0.1
    from_collapse_limit = 8
    join_collapse_limit = 8

    # Error Reporting and Logging
    log_min_messages = warning
    log_min_error_statement = error

    # Autovacuum
    autovacuum = on
    log_autovacuum_min_duration = 0
    autovacuum_max_workers = 3
    autovacuum_naptime = 1min
    autovacuum_vacuum_threshold = 50
    autovacuum_analyze_threshold = 50
    autovacuum_vacuum_scale_factor = 0.2
    autovacuum_analyze_scale_factor = 0.1
    autovacuum_freeze_max_age = 200000000
    autovacuum_multixact_freeze_max_age = 400000000
    autovacuum_vacuum_cost_delay = 20ms
    autovacuum_vacuum_cost_limit = -1

    # Client Connection Defaults
    search_path = 'echo,analytics,audit,public'
    default_tablespace = ''
    temp_tablespaces = ''

    # Lock Management
    deadlock_timeout = 1s
    max_locks_per_transaction = 64
    max_pred_locks_per_transaction = 64

    # Version and Platform Compatibility
    array_nulls = on
    backslash_quote = safe_encoding
    default_with_oids = off
    escape_string_warning = on
    lo_compat_privileges = off
    operator_precedence_warning = off
    quote_all_identifiers = off
    sql_inheritance = on
    standard_conforming_strings = on
    synchronize_seqscans = on
    transform_null_equals = off
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: echo-postgres-exporter-config
  namespace: echo
  labels:
    app: echo-postgres
    component: database
data:
  queries.yaml: |
    pg_replication:
      query: "SELECT EXTRACT(EPOCH FROM (now() - pg_last_xact_replay_timestamp())) as lag"
      master: true
      metrics:
        - lag:
            usage: "GAUGE"
            description: "Replication lag behind master in seconds"

    pg_postmaster:
      query: "SELECT pg_postmaster_start_time as start_time_seconds from pg_postmaster_start_time()"
      master: true
      metrics:
        - start_time_seconds:
            usage: "GAUGE"
            description: "Time at which postmaster started"

    pg_stat_user_tables:
      query: |
        SELECT
          current_database() datname,
          schemaname,
          relname,
          seq_scan,
          seq_tup_read,
          idx_scan,
          idx_tup_fetch,
          n_tup_ins,
          n_tup_upd,
          n_tup_del,
          n_tup_hot_upd,
          n_live_tup,
          n_dead_tup,
          n_mod_since_analyze,
          COALESCE(last_vacuum, '1970-01-01Z') as last_vacuum,
          COALESCE(last_autovacuum, '1970-01-01Z') as last_autovacuum,
          COALESCE(last_analyze, '1970-01-01Z') as last_analyze,
          COALESCE(last_autoanalyze, '1970-01-01Z') as last_autoanalyze,
          vacuum_count,
          autovacuum_count,
          analyze_count,
          autoanalyze_count
        FROM pg_stat_user_tables
      metrics:
        - datname:
            usage: "LABEL"
            description: "Name of current database"
        - schemaname:
            usage: "LABEL"
            description: "Name of the schema that this table is in"
        - relname:
            usage: "LABEL"
            description: "Name of this table"
        - seq_scan:
            usage: "COUNTER"
            description: "Number of sequential scans initiated on this table"
        - seq_tup_read:
            usage: "COUNTER"
            description: "Number of live rows fetched by sequential scans"
        - idx_scan:
            usage: "COUNTER"
            description: "Number of index scans initiated on this table"
        - idx_tup_fetch:
            usage: "COUNTER"
            description: "Number of live rows fetched by index scans"
        - n_tup_ins:
            usage: "COUNTER"
            description: "Number of rows inserted"
        - n_tup_upd:
            usage: "COUNTER"
            description: "Number of rows updated"
        - n_tup_del:
            usage: "COUNTER"
            description: "Number of rows deleted"
        - n_tup_hot_upd:
            usage: "COUNTER"
            description: "Number of rows HOT updated"
        - n_live_tup:
            usage: "GAUGE"
            description: "Estimated number of live rows"
        - n_dead_tup:
            usage: "GAUGE"
            description: "Estimated number of dead rows"
        - n_mod_since_analyze:
            usage: "GAUGE"
            description: "Estimated number of rows changed since last analyze"
        - last_vacuum:
            usage: "GAUGE"
            description: "Last time at which this table was manually vacuumed"
        - last_autovacuum:
            usage: "GAUGE"
            description: "Last time at which this table was vacuumed by the autovacuum daemon"
        - last_analyze:
            usage: "GAUGE"
            description: "Last time at which this table was manually analyzed"
        - last_autoanalyze:
            usage: "GAUGE"
            description: "Last time at which this table was analyzed by the autovacuum daemon"
        - vacuum_count:
            usage: "COUNTER"
            description: "Number of times this table has been manually vacuumed"
        - autovacuum_count:
            usage: "COUNTER"
            description: "Number of times this table has been vacuumed by the autovacuum daemon"
        - analyze_count:
            usage: "COUNTER"
            description: "Number of times this table has been manually analyzed"
        - autoanalyze_count:
            usage: "COUNTER"
            description: "Number of times this table has been analyzed by the autovacuum daemon"
