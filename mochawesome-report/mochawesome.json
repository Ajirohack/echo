{
  "stats": {
    "suites": 114,
    "tests": 207,
    "passes": 63,
    "pending": 3,
    "failures": 141,
    "start": "2025-07-04T23:11:11.402Z",
    "end": "2025-07-04T23:12:47.407Z",
    "duration": 96005,
    "testsRegistered": 263,
    "passPercent": 24.23076923076923,
    "pendingPercent": 1.1406844106463878,
    "other": 9,
    "hasOther": true,
    "skipped": 56,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "17613102-c48b-4c95-8775-25d691bde4fe",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before each\" hook: beforeEach in \"{root}\"",
          "fullTitle": "\"before each\" hook: beforeEach in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Initialize sinon sandbox for each test\nthis.sandbox = sinon.createSandbox();\n// Make sandbox available globally for tests that need it\nglobal.sandbox = this.sandbox;",
          "err": {},
          "uuid": "e07a4597-8d91-4d80-ab25-dfa1245d5e1b",
          "parentUUID": "17613102-c48b-4c95-8775-25d691bde4fe",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after each\" hook: afterEach in \"{root}\"",
          "fullTitle": "\"after each\" hook: afterEach in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Clean up sandbox after each test\nif (this.sandbox) {\n  this.sandbox.restore();\n}\n// Clean up global sandbox reference\nif (global.sandbox) {\n  delete global.sandbox;\n}",
          "err": {},
          "uuid": "10fe1f49-378b-43f0-b7b9-45d930798453",
          "parentUUID": "17613102-c48b-4c95-8775-25d691bde4fe",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "1fa908c8-0924-4a02-bb3c-44695c5aa4b0",
          "title": "Visual Regression Tests",
          "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/visual/visual-regression.test.js",
          "file": "/tests/visual/visual-regression.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Visual Regression Tests\"",
              "fullTitle": "Visual Regression Tests \"before all\" hook in \"Visual Regression Tests\"",
              "timedOut": false,
              "duration": 1259,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Launch browser\nbrowser = await puppeteer.launch({\n    headless: true, // Run headless for CI\n    args: ['--no-sandbox', '--disable-setuid-sandbox']\n});\n// Create new page\npage = await browser.newPage();\n// Set viewport\nawait page.setViewport({\n    width: 1280,\n    height: 800\n});",
              "err": {},
              "uuid": "4b6c28c9-9989-4bf7-aa87-f54353b49534",
              "parentUUID": "1fa908c8-0924-4a02-bb3c-44695c5aa4b0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Visual Regression Tests\"",
              "fullTitle": "Visual Regression Tests \"after all\" hook in \"Visual Regression Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Close browser\nif (browser) {\n    await browser.close();\n}",
              "err": {},
              "uuid": "6d0c561a-bdf9-4659-9cc2-c7c9f372c8fa",
              "parentUUID": "1fa908c8-0924-4a02-bb3c-44695c5aa4b0",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "38f6e913-c15b-425b-a563-2eb0ef472bc4",
              "title": "Main Interface",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/visual/visual-regression.test.js",
              "file": "/tests/visual/visual-regression.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook for \"should match baseline for initial UI\"",
                  "fullTitle": "Visual Regression Tests Main Interface \"before each\" hook for \"should match baseline for initial UI\"",
                  "timedOut": false,
                  "duration": 6307,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Load application\nconst appPath = path.join(__dirname, '../../index.html');\nawait page.goto(`file://${appPath}`);\n// Wait for app to initialize\nawait page.waitForSelector('#app-container', { timeout: 5000 });",
                  "err": {
                    "message": "TimeoutError: Waiting for selector `#app-container` failed: Waiting failed: 5000ms exceeded",
                    "estack": "TimeoutError: Waiting for selector `#app-container` failed: Waiting failed: 5000ms exceeded\n    at new WaitTask (node_modules/puppeteer-core/lib/cjs/puppeteer/common/WaitTask.js:48:34)\n    at IsolatedWorld.waitForFunction (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Realm.js:25:26)\n    at CSSQueryHandler.waitFor (node_modules/puppeteer-core/lib/cjs/puppeteer/common/QueryHandler.js:178:95)\n    at async CdpFrame.waitForSelector (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Frame.js:548:21)\n    at async CdpPage.waitForSelector (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Page.js:1377:20)\n    at async Context.<anonymous> (tests/visual/visual-regression.test.js:129:13)",
                    "diff": null
                  },
                  "uuid": "678ae815-eedc-4f6c-9064-e4386ab6265e",
                  "parentUUID": "38f6e913-c15b-425b-a563-2eb0ef472bc4",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should match baseline for initial UI",
                  "fullTitle": "Visual Regression Tests Main Interface should match baseline for initial UI",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Take screenshot\nawait takeScreenshot('main-ui', '#app-container');\n// Compare with baseline\nconst match = await compareScreenshots('main-ui');\nexpect(match).to.be.true('UI does not match baseline');",
                  "err": {},
                  "uuid": "6ad4dc9e-096f-4122-976b-433f3531e79e",
                  "parentUUID": "38f6e913-c15b-425b-a563-2eb0ef472bc4",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should match baseline for language selection dropdown",
                  "fullTitle": "Visual Regression Tests Main Interface should match baseline for language selection dropdown",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Open language dropdown\nawait page.click('#language-select');\n// Wait for dropdown to open\nawait page.waitForSelector('.language-dropdown-open', { timeout: 2000 });\n// Take screenshot\nawait takeScreenshot('language-dropdown', '#language-select-container');\n// Compare with baseline\nconst match = await compareScreenshots('language-dropdown');\nexpect(match).to.be.true('Language dropdown does not match baseline');",
                  "err": {},
                  "uuid": "acad5d72-4b01-4ca7-933e-9e58039f4405",
                  "parentUUID": "38f6e913-c15b-425b-a563-2eb0ef472bc4",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "6ad4dc9e-096f-4122-976b-433f3531e79e",
                "acad5d72-4b01-4ca7-933e-9e58039f4405"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "33ec3d04-8cf4-48a6-be5a-c1cbc954e509",
              "title": "Translation Process",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/visual/visual-regression.test.js",
              "file": "/tests/visual/visual-regression.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook for \"should match baseline for translation in progress\"",
                  "fullTitle": "Visual Regression Tests Translation Process \"before each\" hook for \"should match baseline for translation in progress\"",
                  "timedOut": false,
                  "duration": 5109,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Load application\nconst appPath = path.join(__dirname, '../../index.html');\nawait page.goto(`file://${appPath}`);\n// Wait for app to initialize\nawait page.waitForSelector('#translation-form', { timeout: 5000 });",
                  "err": {
                    "message": "TimeoutError: Waiting for selector `#translation-form` failed: Waiting failed: 5000ms exceeded",
                    "estack": "TimeoutError: Waiting for selector `#translation-form` failed: Waiting failed: 5000ms exceeded\n    at new WaitTask (node_modules/puppeteer-core/lib/cjs/puppeteer/common/WaitTask.js:48:34)\n    at IsolatedWorld.waitForFunction (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Realm.js:25:26)\n    at CSSQueryHandler.waitFor (node_modules/puppeteer-core/lib/cjs/puppeteer/common/QueryHandler.js:178:95)\n    at async CdpFrame.waitForSelector (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Frame.js:548:21)\n    at async CdpPage.waitForSelector (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Page.js:1377:20)\n    at async Context.<anonymous> (tests/visual/visual-regression.test.js:164:13)",
                    "diff": null
                  },
                  "uuid": "1b928df5-429e-48a7-bd1f-53a338eff55e",
                  "parentUUID": "33ec3d04-8cf4-48a6-be5a-c1cbc954e509",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should match baseline for translation in progress",
                  "fullTitle": "Visual Regression Tests Translation Process should match baseline for translation in progress",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Enter text\nawait page.type('#input-text', 'Hello world');\n// Start translation\nawait page.click('#translate-button');\n// Capture loading state\nawait page.waitForSelector('.loading-indicator', { timeout: 2000 });\nawait takeScreenshot('translation-loading', '#translation-container');\n// Compare with baseline\nconst match = await compareScreenshots('translation-loading');\nexpect(match).to.be.true('Translation loading state does not match baseline');",
                  "err": {},
                  "uuid": "f4e40e95-b418-4ceb-9bb5-87ab078efe6b",
                  "parentUUID": "33ec3d04-8cf4-48a6-be5a-c1cbc954e509",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should match baseline for translation results",
                  "fullTitle": "Visual Regression Tests Translation Process should match baseline for translation results",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Enter text\nawait page.type('#input-text', 'Hello world');\n// Start translation\nawait page.click('#translate-button');\n// Wait for results\nawait page.waitForSelector('#translation-results:not(.loading)', { timeout: 5000 });\n// Let animations complete\nawait new Promise(resolve => setTimeout(resolve, 500));\n// Take screenshot\nawait takeScreenshot('translation-results', '#translation-container');\n// Compare with baseline\nconst match = await compareScreenshots('translation-results');\nexpect(match).to.be.true('Translation results do not match baseline');",
                  "err": {},
                  "uuid": "a6d3a066-58f2-4ad8-9df4-92a8f3b8c9ac",
                  "parentUUID": "33ec3d04-8cf4-48a6-be5a-c1cbc954e509",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should match baseline for error state",
                  "fullTitle": "Visual Regression Tests Translation Process should match baseline for error state",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Force error state\nawait page.evaluate(() => {\n    // Mock error in the app\n    window.showTranslationError('Translation service unavailable');\n});\n// Wait for error display\nawait page.waitForSelector('.error-message', { timeout: 2000 });\n// Take screenshot\nawait takeScreenshot('translation-error', '#translation-container');\n// Compare with baseline\nconst match = await compareScreenshots('translation-error');\nexpect(match).to.be.true('Error state does not match baseline');",
                  "err": {},
                  "uuid": "72f436c7-0898-4ab2-b29e-a6accae30e8c",
                  "parentUUID": "33ec3d04-8cf4-48a6-be5a-c1cbc954e509",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "f4e40e95-b418-4ceb-9bb5-87ab078efe6b",
                "a6d3a066-58f2-4ad8-9df4-92a8f3b8c9ac",
                "72f436c7-0898-4ab2-b29e-a6accae30e8c"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "be10de1f-a43c-4ef7-a730-dbe101f60d79",
              "title": "Responsive Design",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/visual/visual-regression.test.js",
              "file": "/tests/visual/visual-regression.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should match baseline on mobile viewport",
                  "fullTitle": "Visual Regression Tests Responsive Design should match baseline on mobile viewport",
                  "timedOut": false,
                  "duration": 5116,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Set viewport\nawait page.setViewport({\n    width: viewport.width,\n    height: viewport.height\n});\n// Load application\nconst appPath = path.join(__dirname, '../../index.html');\nawait page.goto(`file://${appPath}`);\n// Wait for app to initialize\nawait page.waitForSelector('#app-container', { timeout: 5000 });\n// Take screenshot\nawait takeScreenshot(`responsive-${viewport.name}`, '#app-container');\n// Compare with baseline\nconst match = await compareScreenshots(`responsive-${viewport.name}`);\nexpect(match).to.be.true(`UI on ${viewport.name} does not match baseline`);",
                  "err": {
                    "message": "TimeoutError: Waiting for selector `#app-container` failed: Waiting failed: 5000ms exceeded",
                    "estack": "TimeoutError: Waiting for selector `#app-container` failed: Waiting failed: 5000ms exceeded\n    at new WaitTask (node_modules/puppeteer-core/lib/cjs/puppeteer/common/WaitTask.js:48:34)\n    at IsolatedWorld.waitForFunction (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Realm.js:25:26)\n    at CSSQueryHandler.waitFor (node_modules/puppeteer-core/lib/cjs/puppeteer/common/QueryHandler.js:178:95)\n    at async CdpFrame.waitForSelector (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Frame.js:548:21)\n    at async CdpPage.waitForSelector (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Page.js:1377:20)\n    at async Context.<anonymous> (tests/visual/visual-regression.test.js:243:17)",
                    "diff": null
                  },
                  "uuid": "978fe3cc-9926-457f-a7b1-ef11f43a1582",
                  "parentUUID": "be10de1f-a43c-4ef7-a730-dbe101f60d79",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should match baseline on tablet viewport",
                  "fullTitle": "Visual Regression Tests Responsive Design should match baseline on tablet viewport",
                  "timedOut": false,
                  "duration": 5117,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Set viewport\nawait page.setViewport({\n    width: viewport.width,\n    height: viewport.height\n});\n// Load application\nconst appPath = path.join(__dirname, '../../index.html');\nawait page.goto(`file://${appPath}`);\n// Wait for app to initialize\nawait page.waitForSelector('#app-container', { timeout: 5000 });\n// Take screenshot\nawait takeScreenshot(`responsive-${viewport.name}`, '#app-container');\n// Compare with baseline\nconst match = await compareScreenshots(`responsive-${viewport.name}`);\nexpect(match).to.be.true(`UI on ${viewport.name} does not match baseline`);",
                  "err": {
                    "message": "TimeoutError: Waiting for selector `#app-container` failed: Waiting failed: 5000ms exceeded",
                    "estack": "TimeoutError: Waiting for selector `#app-container` failed: Waiting failed: 5000ms exceeded\n    at new WaitTask (node_modules/puppeteer-core/lib/cjs/puppeteer/common/WaitTask.js:48:34)\n    at IsolatedWorld.waitForFunction (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Realm.js:25:26)\n    at CSSQueryHandler.waitFor (node_modules/puppeteer-core/lib/cjs/puppeteer/common/QueryHandler.js:178:95)\n    at async CdpFrame.waitForSelector (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Frame.js:548:21)\n    at async CdpPage.waitForSelector (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Page.js:1377:20)\n    at async Context.<anonymous> (tests/visual/visual-regression.test.js:243:17)",
                    "diff": null
                  },
                  "uuid": "baefe0cb-f978-45e3-a3d5-075c417aac63",
                  "parentUUID": "be10de1f-a43c-4ef7-a730-dbe101f60d79",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should match baseline on desktop viewport",
                  "fullTitle": "Visual Regression Tests Responsive Design should match baseline on desktop viewport",
                  "timedOut": false,
                  "duration": 5130,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Set viewport\nawait page.setViewport({\n    width: viewport.width,\n    height: viewport.height\n});\n// Load application\nconst appPath = path.join(__dirname, '../../index.html');\nawait page.goto(`file://${appPath}`);\n// Wait for app to initialize\nawait page.waitForSelector('#app-container', { timeout: 5000 });\n// Take screenshot\nawait takeScreenshot(`responsive-${viewport.name}`, '#app-container');\n// Compare with baseline\nconst match = await compareScreenshots(`responsive-${viewport.name}`);\nexpect(match).to.be.true(`UI on ${viewport.name} does not match baseline`);",
                  "err": {
                    "message": "TimeoutError: Waiting for selector `#app-container` failed: Waiting failed: 5000ms exceeded",
                    "estack": "TimeoutError: Waiting for selector `#app-container` failed: Waiting failed: 5000ms exceeded\n    at new WaitTask (node_modules/puppeteer-core/lib/cjs/puppeteer/common/WaitTask.js:48:34)\n    at IsolatedWorld.waitForFunction (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Realm.js:25:26)\n    at CSSQueryHandler.waitFor (node_modules/puppeteer-core/lib/cjs/puppeteer/common/QueryHandler.js:178:95)\n    at async CdpFrame.waitForSelector (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Frame.js:548:21)\n    at async CdpPage.waitForSelector (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Page.js:1377:20)\n    at async Context.<anonymous> (tests/visual/visual-regression.test.js:243:17)",
                    "diff": null
                  },
                  "uuid": "622569d4-566c-4420-a4b9-48e4c622a233",
                  "parentUUID": "be10de1f-a43c-4ef7-a730-dbe101f60d79",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "978fe3cc-9926-457f-a7b1-ef11f43a1582",
                "baefe0cb-f978-45e3-a3d5-075c417aac63",
                "622569d4-566c-4420-a4b9-48e4c622a233"
              ],
              "pending": [],
              "skipped": [],
              "duration": 15363,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "697d97d8-aaf5-4f5e-9176-bbd45922e34b",
              "title": "Themes",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/visual/visual-regression.test.js",
              "file": "/tests/visual/visual-regression.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should match baseline with light theme",
                  "fullTitle": "Visual Regression Tests Themes should match baseline with light theme",
                  "timedOut": false,
                  "duration": 246,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Load application\nconst appPath = path.join(__dirname, '../../index.html');\nawait page.goto(`file://${appPath}`);\n// Wait for app to initialize\nawait page.waitForSelector('#app-container', { timeout: 5000 });\n// Set theme\nawait page.evaluate((themeName) => {\n    document.body.setAttribute('data-theme', themeName);\n}, theme);\n// Let theme change settle\nawait new Promise(resolve => setTimeout(resolve, 500));\n// Take screenshot\nawait takeScreenshot(`theme-${theme}`, '#app-container');\n// Compare with baseline\nconst match = await compareScreenshots(`theme-${theme}`);\nexpect(match).to.be.true(`${theme} theme does not match baseline`);",
                  "err": {
                    "message": "Error: Waiting for selector `#app-container` failed: waitForFunction failed: frame got detached.",
                    "estack": "Error: Waiting for selector `#app-container` failed: waitForFunction failed: frame got detached.\n    at IsolatedWorld.dispose (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Realm.js:40:39)\n    at [nodejs.dispose] (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Realm.js:44:14)\n    at [nodejs.dispose] (node_modules/puppeteer-core/lib/cjs/puppeteer/cdp/IsolatedWorld.js:156:45)\n    at [nodejs.dispose] (node_modules/puppeteer-core/lib/cjs/puppeteer/cdp/Frame.js:331:92)\n    at #removeFramesRecursively (node_modules/puppeteer-core/lib/cjs/puppeteer/cdp/FrameManager.js:452:45)\n    at #onClientDisconnect (node_modules/puppeteer-core/lib/cjs/puppeteer/cdp/FrameManager.js:82:42)\n    at /Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/node_modules/puppeteer-core/lib/cjs/puppeteer/cdp/FrameManager.js:66:37\n    at onceHandler (node_modules/puppeteer-core/lib/cjs/puppeteer/common/EventEmitter.js:94:13)\n    at /Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/node_modules/puppeteer-core/lib/cjs/third_party/mitt/mitt.js:62:7\n    at Array.map (<anonymous>)\n    at Object.emit (node_modules/puppeteer-core/lib/cjs/third_party/mitt/mitt.js:61:20)\n    at CdpCDPSession.emit (node_modules/puppeteer-core/lib/cjs/puppeteer/common/EventEmitter.js:83:23)\n    at CdpCDPSession.onClosed (node_modules/puppeteer-core/lib/cjs/puppeteer/cdp/CdpSession.js:116:14)\n    at #onClose (node_modules/puppeteer-core/lib/cjs/puppeteer/cdp/Connection.js:181:21)\n    at WebSocket.<anonymous> (node_modules/puppeteer-core/lib/cjs/puppeteer/node/NodeWebSocketTransport.js:48:30)\n    at callListener (node_modules/ws/lib/event-target.js:290:14)\n    at WebSocket.onClose (node_modules/ws/lib/event-target.js:220:9)\n    at WebSocket.emit (node:events:518:28)\n    at WebSocket.emitClose (node_modules/ws/lib/websocket.js:272:10)\n    at Socket.socketOnClose (node_modules/ws/lib/websocket.js:1341:15)\n    at Socket.emit (node:events:518:28)\n    at TCP.<anonymous> (node:net:351:12)",
                    "diff": null
                  },
                  "uuid": "f0e33071-0f2a-45b9-9533-e0c2251ef1c8",
                  "parentUUID": "697d97d8-aaf5-4f5e-9176-bbd45922e34b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should match baseline with dark theme",
                  "fullTitle": "Visual Regression Tests Themes should match baseline with dark theme",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Load application\nconst appPath = path.join(__dirname, '../../index.html');\nawait page.goto(`file://${appPath}`);\n// Wait for app to initialize\nawait page.waitForSelector('#app-container', { timeout: 5000 });\n// Set theme\nawait page.evaluate((themeName) => {\n    document.body.setAttribute('data-theme', themeName);\n}, theme);\n// Let theme change settle\nawait new Promise(resolve => setTimeout(resolve, 500));\n// Take screenshot\nawait takeScreenshot(`theme-${theme}`, '#app-container');\n// Compare with baseline\nconst match = await compareScreenshots(`theme-${theme}`);\nexpect(match).to.be.true(`${theme} theme does not match baseline`);",
                  "err": {
                    "message": "Error: Attempted to use detached Frame '79B6A68E9402EF901EBD86A412EEC698'.",
                    "estack": "Error: Attempted to use detached Frame '79B6A68E9402EF901EBD86A412EEC698'.\n    at CdpFrame.<anonymous> (node_modules/puppeteer-core/lib/cjs/puppeteer/util/decorators.js:107:23)\n    at CdpPage.goto (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Page.js:574:43)\n    at Context.<anonymous> (tests/visual/visual-regression.test.js:262:28)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "425b838f-75ed-4bc1-8892-53bf0483f92c",
                  "parentUUID": "697d97d8-aaf5-4f5e-9176-bbd45922e34b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should match baseline with high-contrast theme",
                  "fullTitle": "Visual Regression Tests Themes should match baseline with high-contrast theme",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Load application\nconst appPath = path.join(__dirname, '../../index.html');\nawait page.goto(`file://${appPath}`);\n// Wait for app to initialize\nawait page.waitForSelector('#app-container', { timeout: 5000 });\n// Set theme\nawait page.evaluate((themeName) => {\n    document.body.setAttribute('data-theme', themeName);\n}, theme);\n// Let theme change settle\nawait new Promise(resolve => setTimeout(resolve, 500));\n// Take screenshot\nawait takeScreenshot(`theme-${theme}`, '#app-container');\n// Compare with baseline\nconst match = await compareScreenshots(`theme-${theme}`);\nexpect(match).to.be.true(`${theme} theme does not match baseline`);",
                  "err": {
                    "message": "Error: Attempted to use detached Frame '79B6A68E9402EF901EBD86A412EEC698'.",
                    "estack": "Error: Attempted to use detached Frame '79B6A68E9402EF901EBD86A412EEC698'.\n    at CdpFrame.<anonymous> (node_modules/puppeteer-core/lib/cjs/puppeteer/util/decorators.js:107:23)\n    at CdpPage.goto (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Page.js:574:43)\n    at Context.<anonymous> (tests/visual/visual-regression.test.js:262:28)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "a6c52126-adb5-4e57-973a-91c74ee57b8f",
                  "parentUUID": "697d97d8-aaf5-4f5e-9176-bbd45922e34b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "f0e33071-0f2a-45b9-9533-e0c2251ef1c8",
                "425b838f-75ed-4bc1-8892-53bf0483f92c",
                "a6c52126-adb5-4e57-973a-91c74ee57b8f"
              ],
              "pending": [],
              "skipped": [],
              "duration": 247,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b7369f35-3366-404b-bba3-70dd4e25a426",
          "title": "Accessibility Tests",
          "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/accessibility/ui-accessibility.test.js",
          "file": "/tests/accessibility/ui-accessibility.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Accessibility Tests\"",
              "fullTitle": "Accessibility Tests \"before all\" hook in \"Accessibility Tests\"",
              "timedOut": false,
              "duration": 1011,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Launch browser\nbrowser = await puppeteer.launch({\n    headless: true, // Run headless for CI\n    args: ['--no-sandbox', '--disable-setuid-sandbox']\n});\n// Create new page\npage = await browser.newPage();\n// Set viewport\nawait page.setViewport({\n    width: 1280,\n    height: 800\n});",
              "err": {},
              "uuid": "47b5890d-2e81-42de-9ad3-f4e214782f32",
              "parentUUID": "b7369f35-3366-404b-bba3-70dd4e25a426",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Accessibility Tests\"",
              "fullTitle": "Accessibility Tests \"after all\" hook in \"Accessibility Tests\"",
              "timedOut": false,
              "duration": 239,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Close browser\nif (browser) {\n    await browser.close();\n}",
              "err": {},
              "uuid": "10899e9d-e488-4c5b-bd85-f27d8ccba1ad",
              "parentUUID": "b7369f35-3366-404b-bba3-70dd4e25a426",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "b9ea9e6a-f67c-4a88-b214-43ab6c1f8dec",
              "title": "Main Interface",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/accessibility/ui-accessibility.test.js",
              "file": "/tests/accessibility/ui-accessibility.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook for \"should have no critical accessibility violations\"",
                  "fullTitle": "Accessibility Tests Main Interface \"before each\" hook for \"should have no critical accessibility violations\"",
                  "timedOut": false,
                  "duration": 6109,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Load application\n// For local testing, use the file:// protocol to load the app directly\nconst appPath = path.join(__dirname, '../../index.html');\nawait page.goto(`file://${appPath}`);\n// Wait for app to initialize\nawait page.waitForSelector('#app-container', { timeout: 5000 });",
                  "err": {
                    "message": "TimeoutError: Waiting for selector `#app-container` failed: Waiting failed: 5000ms exceeded",
                    "estack": "TimeoutError: Waiting for selector `#app-container` failed: Waiting failed: 5000ms exceeded\n    at new WaitTask (node_modules/puppeteer-core/lib/cjs/puppeteer/common/WaitTask.js:48:34)\n    at IsolatedWorld.waitForFunction (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Realm.js:25:26)\n    at CSSQueryHandler.waitFor (node_modules/puppeteer-core/lib/cjs/puppeteer/common/QueryHandler.js:178:95)\n    at async CdpFrame.waitForSelector (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Frame.js:548:21)\n    at async CdpPage.waitForSelector (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Page.js:1377:20)\n    at async Context.<anonymous> (tests/accessibility/ui-accessibility.test.js:68:13)",
                    "diff": null
                  },
                  "uuid": "ea76cf52-a7bf-4bbe-8a08-61df940e7bed",
                  "parentUUID": "b9ea9e6a-f67c-4a88-b214-43ab6c1f8dec",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have no critical accessibility violations",
                  "fullTitle": "Accessibility Tests Main Interface should have no critical accessibility violations",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Run accessibility analysis\nconst results = await analyzeAccessibility(page);\n// Log violations for debugging\nif (results.violations.length > 0) {\n    console.log('Accessibility violations:', JSON.stringify(results.violations, null, 2));\n}\n// Filter for critical violations only\nconst criticalViolations = results.violations.filter(v => v.impact === 'critical');\n// Should have no critical violations\nexpect(criticalViolations.length).to.equal(0, 'Critical accessibility violations found');",
                  "err": {},
                  "uuid": "fc63419b-774c-4e90-a5cc-eeb40f8beb24",
                  "parentUUID": "b9ea9e6a-f67c-4a88-b214-43ab6c1f8dec",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should have appropriate ARIA attributes",
                  "fullTitle": "Accessibility Tests Main Interface should have appropriate ARIA attributes",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Run accessibility analysis focused on ARIA\nconst results = await analyzeAccessibility(page, {\n    rules: {\n        'aria-*': { enabled: true }\n    }\n});\n// Check ARIA violations\nconst ariaViolations = results.violations.filter(v => v.id.startsWith('aria-'));\n// Should have no ARIA violations\nexpect(ariaViolations.length).to.equal(0, 'ARIA violations found');",
                  "err": {},
                  "uuid": "e4f6ee97-071a-437d-a1c3-ebcd4269eb58",
                  "parentUUID": "b9ea9e6a-f67c-4a88-b214-43ab6c1f8dec",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should have sufficient color contrast",
                  "fullTitle": "Accessibility Tests Main Interface should have sufficient color contrast",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Run accessibility analysis focused on color contrast\nconst results = await analyzeAccessibility(page, {\n    rules: {\n        'color-contrast': { enabled: true }\n    }\n});\n// Check color contrast violations\nconst contrastViolations = results.violations.filter(v => v.id === 'color-contrast');\n// Should have no contrast violations\nexpect(contrastViolations.length).to.equal(0, 'Color contrast issues found');",
                  "err": {},
                  "uuid": "6542cb2f-9d2f-41ae-bcc3-1cf8e81f8254",
                  "parentUUID": "b9ea9e6a-f67c-4a88-b214-43ab6c1f8dec",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "fc63419b-774c-4e90-a5cc-eeb40f8beb24",
                "e4f6ee97-071a-437d-a1c3-ebcd4269eb58",
                "6542cb2f-9d2f-41ae-bcc3-1cf8e81f8254"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "1e0b3f96-3357-4547-b772-b535e2b00e5f",
              "title": "Translation Form",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/accessibility/ui-accessibility.test.js",
              "file": "/tests/accessibility/ui-accessibility.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook for \"should have accessible form controls\"",
                  "fullTitle": "Accessibility Tests Translation Form \"before each\" hook for \"should have accessible form controls\"",
                  "timedOut": false,
                  "duration": 5122,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Load application\nconst appPath = path.join(__dirname, '../../index.html');\nawait page.goto(`file://${appPath}`);\n// Wait for app to initialize\nawait page.waitForSelector('#translation-form', { timeout: 5000 });",
                  "err": {
                    "message": "TimeoutError: Waiting for selector `#translation-form` failed: Waiting failed: 5000ms exceeded",
                    "estack": "TimeoutError: Waiting for selector `#translation-form` failed: Waiting failed: 5000ms exceeded\n    at new WaitTask (node_modules/puppeteer-core/lib/cjs/puppeteer/common/WaitTask.js:48:34)\n    at IsolatedWorld.waitForFunction (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Realm.js:25:26)\n    at CSSQueryHandler.waitFor (node_modules/puppeteer-core/lib/cjs/puppeteer/common/QueryHandler.js:178:95)\n    at async CdpFrame.waitForSelector (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Frame.js:548:21)\n    at async CdpPage.waitForSelector (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Page.js:1377:20)\n    at async Context.<anonymous> (tests/accessibility/ui-accessibility.test.js:125:13)",
                    "diff": null
                  },
                  "uuid": "9ca3c478-bd66-4119-8bd7-47cc6e1d26dd",
                  "parentUUID": "1e0b3f96-3357-4547-b772-b535e2b00e5f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have accessible form controls",
                  "fullTitle": "Accessibility Tests Translation Form should have accessible form controls",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Find all form controls\nconst formControls = await page.$$eval('input, select, textarea, button', elements => {\n    return elements.map(el => ({\n        type: el.tagName.toLowerCase(),\n        id: el.id,\n        hasLabel: !!el.labels && el.labels.length > 0,\n        hasAriaLabel: !!el.getAttribute('aria-label'),\n        hasAriaLabelledBy: !!el.getAttribute('aria-labelledby')\n    }));\n});\n// Check that all form controls have accessible labels\nfor (const control of formControls) {\n    const hasAccessibleLabel = control.hasLabel ||\n        control.hasAriaLabel ||\n        control.hasAriaLabelledBy;\n    expect(hasAccessibleLabel).to.be.true(\n        `Form control ${control.type}#${control.id} has no accessible label`\n    );\n}",
                  "err": {},
                  "uuid": "b6c4e391-f765-4904-8b12-88cb995660f5",
                  "parentUUID": "1e0b3f96-3357-4547-b772-b535e2b00e5f",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should be keyboard navigable",
                  "fullTitle": "Accessibility Tests Translation Form should be keyboard navigable",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Ensure focusable elements can be tabbed through\nawait page.keyboard.press('Tab');\n// Get the active element\nlet activeElementCount = 0;\n// Press tab multiple times and count unique focused elements\nconst focusedElements = new Set();\nfor (let i = 0; i < 10; i++) {\n    const focusedElement = await page.evaluate(() => {\n        const active = document.activeElement;\n        return active ? active.tagName + (active.id ? '#' + active.id : '') : null;\n    });\n    if (focusedElement && focusedElement !== 'BODY') {\n        focusedElements.add(focusedElement);\n    }\n    await page.keyboard.press('Tab');\n}\n// Should have focused several elements\nexpect(focusedElements.size).to.be.greaterThan(3, 'Not enough focusable elements found');",
                  "err": {},
                  "uuid": "64bb6603-c80a-46f1-8f05-8697b56717b8",
                  "parentUUID": "1e0b3f96-3357-4547-b772-b535e2b00e5f",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "b6c4e391-f765-4904-8b12-88cb995660f5",
                "64bb6603-c80a-46f1-8f05-8697b56717b8"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "ea9e7c31-09c4-4100-92a7-0ab1a56570a2",
              "title": "Results Display",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/accessibility/ui-accessibility.test.js",
              "file": "/tests/accessibility/ui-accessibility.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook for \"should have screen reader accessible results\"",
                  "fullTitle": "Accessibility Tests Results Display \"before each\" hook for \"should have screen reader accessible results\"",
                  "timedOut": false,
                  "duration": 5143,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Load application\nconst appPath = path.join(__dirname, '../../index.html');\nawait page.goto(`file://${appPath}`);\n// Wait for app to initialize\nawait page.waitForSelector('#translation-form', { timeout: 5000 });\n// Trigger a translation\nawait page.type('#input-text', 'Hello world');\nawait page.click('#translate-button');\n// Wait for results\nawait page.waitForSelector('#translation-results', { timeout: 5000 });",
                  "err": {
                    "message": "TimeoutError: Waiting for selector `#translation-form` failed: Waiting failed: 5000ms exceeded",
                    "estack": "TimeoutError: Waiting for selector `#translation-form` failed: Waiting failed: 5000ms exceeded\n    at new WaitTask (node_modules/puppeteer-core/lib/cjs/puppeteer/common/WaitTask.js:48:34)\n    at IsolatedWorld.waitForFunction (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Realm.js:25:26)\n    at CSSQueryHandler.waitFor (node_modules/puppeteer-core/lib/cjs/puppeteer/common/QueryHandler.js:178:95)\n    at async CdpFrame.waitForSelector (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Frame.js:548:21)\n    at async CdpPage.waitForSelector (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Page.js:1377:20)\n    at async Context.<anonymous> (tests/accessibility/ui-accessibility.test.js:187:13)",
                    "diff": null
                  },
                  "uuid": "871d32e7-42f4-4290-84fa-f3aa6774c3b0",
                  "parentUUID": "ea9e7c31-09c4-4100-92a7-0ab1a56570a2",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have screen reader accessible results",
                  "fullTitle": "Accessibility Tests Results Display should have screen reader accessible results",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Check for appropriate ARIA roles\nconst hasAriaLive = await page.$eval('#translation-results', el => {\n    return el.getAttribute('aria-live') === 'polite';\n});\nexpect(hasAriaLive).to.be.true('Translation results should have aria-live attribute');\n// Check for appropriate heading structure\nconst headingsStructure = await page.$$eval('h1, h2, h3, h4, h5, h6', headings => {\n    return headings.map(h => ({\n        level: parseInt(h.tagName.substring(1)),\n        text: h.textContent\n    }));\n});\n// Should have logical heading structure\nlet previousLevel = 0;\nlet headingLevelsValid = true;\nfor (const heading of headingsStructure) {\n    if (previousLevel > 0 && heading.level > previousLevel + 1) {\n        headingLevelsValid = false;\n        break;\n    }\n    previousLevel = heading.level;\n}\nexpect(headingLevelsValid).to.be.true('Heading structure should not skip levels');",
                  "err": {},
                  "uuid": "51538b0b-ad19-42c0-b3fa-74ba74cc51bd",
                  "parentUUID": "ea9e7c31-09c4-4100-92a7-0ab1a56570a2",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "51538b0b-ad19-42c0-b3fa-74ba74cc51bd"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "f9d9d597-b5f9-412e-8a4d-9053749fbef9",
              "title": "Responsive Design",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/accessibility/ui-accessibility.test.js",
              "file": "/tests/accessibility/ui-accessibility.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be accessible on mobile viewport",
                  "fullTitle": "Accessibility Tests Responsive Design should be accessible on mobile viewport",
                  "timedOut": false,
                  "duration": 5283,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Set mobile viewport\nawait page.setViewport({\n    width: 375,\n    height: 667,\n    isMobile: true\n});\n// Load application\nconst appPath = path.join(__dirname, '../../index.html');\nawait page.goto(`file://${appPath}`);\n// Wait for app to initialize\nawait page.waitForSelector('#app-container', { timeout: 5000 });\n// Run accessibility analysis\nconst results = await analyzeAccessibility(page);\n// Should have no critical violations\nconst criticalViolations = results.violations.filter(v => v.impact === 'critical');\nexpect(criticalViolations.length).to.equal(0, 'Critical accessibility violations found on mobile viewport');",
                  "err": {
                    "message": "TimeoutError: Waiting for selector `#app-container` failed: Waiting failed: 5000ms exceeded",
                    "estack": "TimeoutError: Waiting for selector `#app-container` failed: Waiting failed: 5000ms exceeded\n    at new WaitTask (node_modules/puppeteer-core/lib/cjs/puppeteer/common/WaitTask.js:48:34)\n    at IsolatedWorld.waitForFunction (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Realm.js:25:26)\n    at CSSQueryHandler.waitFor (node_modules/puppeteer-core/lib/cjs/puppeteer/common/QueryHandler.js:178:95)\n    at async CdpFrame.waitForSelector (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Frame.js:548:21)\n    at async CdpPage.waitForSelector (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Page.js:1377:20)\n    at async Context.<anonymous> (tests/accessibility/ui-accessibility.test.js:243:13)",
                    "diff": null
                  },
                  "uuid": "8fc522d9-35b8-46a2-a134-32cd8017efd8",
                  "parentUUID": "f9d9d597-b5f9-412e-8a4d-9053749fbef9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should maintain touch target sizes on mobile",
                  "fullTitle": "Accessibility Tests Responsive Design should maintain touch target sizes on mobile",
                  "timedOut": false,
                  "duration": 5111,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Set mobile viewport\nawait page.setViewport({\n    width: 375,\n    height: 667,\n    isMobile: true\n});\n// Load application\nconst appPath = path.join(__dirname, '../../index.html');\nawait page.goto(`file://${appPath}`);\n// Wait for app to initialize\nawait page.waitForSelector('#translation-form', { timeout: 5000 });\n// Measure size of touch targets\nconst touchTargetSizes = await page.$$eval('button, a, input, select', elements => {\n    return elements.map(el => {\n        const rect = el.getBoundingClientRect();\n        return {\n            tag: el.tagName.toLowerCase(),\n            id: el.id,\n            width: rect.width,\n            height: rect.height\n        };\n    });\n});\n// WCAG 2.1 recommends touch targets of at least 44x44px\nconst minWidth = 44;\nconst minHeight = 44;\n// Filter for small touch targets\nconst smallTouchTargets = touchTargetSizes.filter(\n    target => target.width < minWidth || target.height < minHeight\n);\n// Allow some exemptions for specific types of controls\nconst exemptTypes = ['hidden'];\nconst nonExemptSmallTargets = smallTouchTargets.filter(\n    target => !exemptTypes.includes(target.tag)\n);\nexpect(nonExemptSmallTargets.length).to.equal(0, 'Touch targets too small for mobile');",
                  "err": {
                    "message": "TimeoutError: Waiting for selector `#translation-form` failed: Waiting failed: 5000ms exceeded",
                    "estack": "TimeoutError: Waiting for selector `#translation-form` failed: Waiting failed: 5000ms exceeded\n    at new WaitTask (node_modules/puppeteer-core/lib/cjs/puppeteer/common/WaitTask.js:48:34)\n    at IsolatedWorld.waitForFunction (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Realm.js:25:26)\n    at CSSQueryHandler.waitFor (node_modules/puppeteer-core/lib/cjs/puppeteer/common/QueryHandler.js:178:95)\n    at async CdpFrame.waitForSelector (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Frame.js:548:21)\n    at async CdpPage.waitForSelector (node_modules/puppeteer-core/lib/cjs/puppeteer/api/Page.js:1377:20)\n    at async Context.<anonymous> (tests/accessibility/ui-accessibility.test.js:266:13)",
                    "diff": null
                  },
                  "uuid": "058c7406-b8c4-4026-bfb3-eff05f501a64",
                  "parentUUID": "f9d9d597-b5f9-412e-8a4d-9053749fbef9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "8fc522d9-35b8-46a2-a134-32cd8017efd8",
                "058c7406-b8c4-4026-bfb3-eff05f501a64"
              ],
              "pending": [],
              "skipped": [],
              "duration": 10394,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "87d08d90-2197-4abe-bb2b-08b158a92812",
          "title": "Azure Translator API Tests",
          "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/api/azure-api.test.js",
          "file": "/tests/api/azure-api.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Azure Translator API Tests\"",
              "fullTitle": "Azure Translator API Tests \"before each\" hook in \"Azure Translator API Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Disable real HTTP requests\nnock.disableNetConnect();\nsandbox = sinon.createSandbox();\n// Create service with test credentials\ntranslator = new AzureTranslator({\n    apiKey: 'test-api-key',\n    endpoint: 'https://api.cognitive.microsofttranslator.com',\n    region: 'eastus'\n});",
              "err": {},
              "uuid": "dbc38377-7465-4ba4-99ad-077b4824a708",
              "parentUUID": "87d08d90-2197-4abe-bb2b-08b158a92812",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Azure Translator API Tests\"",
              "fullTitle": "Azure Translator API Tests \"after each\" hook in \"Azure Translator API Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore();\nnock.cleanAll();\nnock.enableNetConnect();",
              "err": {},
              "uuid": "09cea7fa-f729-4348-8b52-8a31a8df2c94",
              "parentUUID": "87d08d90-2197-4abe-bb2b-08b158a92812",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "52df9332-4583-47ad-930b-2f6b04f97e02",
              "title": "Translation API",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/api/azure-api.test.js",
              "file": "/tests/api/azure-api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should make correct API calls to translate text",
                  "fullTitle": "Azure Translator API Tests Translation API should make correct API calls to translate text",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Set up mock API response\nnock('https://api.cognitive.microsofttranslator.com')\n    .post('/translate')\n    .query(q => q.to === 'es' && q['api-version'] === '3.0')\n    .reply(200, [\n        {\n            detectedLanguage: {\n                language: 'en',\n                score: 0.91\n            },\n            translations: [\n                {\n                    text: 'Hola mundo',\n                    to: 'es'\n                }\n            ]\n        }\n    ]);\n// Mock UUID generation for deterministic testing\nsandbox.stub(require('uuid'), 'v4').returns('test-uuid');\n// Initialize translator\nawait translator.initialize();\n// Call translation method\nconst result = await translator.translate('Hello world', 'en', 'es');\nexpect(result.translation).to.equal('Hola mundo');\nexpect(result.service).to.equal('azure');\nexpect(result.detectedLanguage).to.equal('en');\n// Verify all nock mocks were called\nexpect(nock.isDone()).to.be.true;",
                  "err": {
                    "message": "TypeError: Descriptor for property v4 is non-configurable and non-writable",
                    "estack": "TypeError: Descriptor for property v4 is non-configurable and non-writable\n    at assertValidPropertyDescriptor (node_modules/sinon/lib/sinon/stub.js:138:15)\n    at Function.stub (node_modules/sinon/lib/sinon/stub.js:89:5)\n    at Sandbox.stub (node_modules/sinon/lib/sinon/sandbox.js:389:39)\n    at Context.<anonymous> (tests/api/azure-api.test.js:55:21)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "45530a6e-1fa1-4e9b-9b15-124ae1b6d138",
                  "parentUUID": "52df9332-4583-47ad-930b-2f6b04f97e02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle API errors correctly",
                  "fullTitle": "Azure Translator API Tests Translation API should handle API errors correctly",
                  "timedOut": false,
                  "duration": 12,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Set up mock API error response\nnock('https://api.cognitive.microsofttranslator.com')\n    .post('/translate')\n    .query(true)\n    .reply(401, {\n        error: {\n            code: 401000,\n            message: 'The request is not authorized because credentials are missing or invalid.'\n        }\n    });\n// Initialize translator\nawait translator.initialize();\n// Call translation method\ntry {\n    await translator.translate('Hello world', 'en', 'es');\n    expect.fail('Should have thrown an error');\n} catch (error) {\n    expect(error.message).to.include('credentials are missing or invalid');\n}\n// Verify all nock mocks were called\nexpect(nock.isDone()).to.be.true;",
                  "err": {
                    "message": "Error: Azure Translator connection test failed: Azure Translator error: The request is not authorized because credentials are missing or invalid.",
                    "estack": "Error: Azure Translator connection test failed: Azure Translator error: The request is not authorized because credentials are missing or invalid.\n    at AzureTranslator.testConnection (src/services/translation/azure-translator.js:79:19)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async AzureTranslator.initialize (src/services/translation/azure-translator.js:51:13)\n    at async Context.<anonymous> (tests/api/azure-api.test.js:84:13)",
                    "diff": null
                  },
                  "uuid": "91a0ff9a-0220-4517-bede-d81f25c98b11",
                  "parentUUID": "52df9332-4583-47ad-930b-2f6b04f97e02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle network errors gracefully",
                  "fullTitle": "Azure Translator API Tests Translation API should handle network errors gracefully",
                  "timedOut": false,
                  "duration": 4,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Set up mock network error\nnock('https://api.cognitive.microsofttranslator.com')\n    .post('/translate')\n    .query(true)\n    .replyWithError('Connection refused');\n// Initialize translator\nawait translator.initialize();\n// Call translation method\ntry {\n    await translator.translate('Hello world', 'en', 'es');\n    expect.fail('Should have thrown an error');\n} catch (error) {\n    expect(error.message).to.include('Connection refused');\n}\n// Verify all nock mocks were called\nexpect(nock.isDone()).to.be.true;",
                  "err": {
                    "message": "Error: Azure Translator connection test failed: Azure Translator error: Connection refused",
                    "estack": "Error: Azure Translator connection test failed: Azure Translator error: Connection refused\n    at AzureTranslator.testConnection (src/services/translation/azure-translator.js:79:19)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async AzureTranslator.initialize (src/services/translation/azure-translator.js:51:13)\n    at async Context.<anonymous> (tests/api/azure-api.test.js:106:13)",
                    "diff": null
                  },
                  "uuid": "cd653114-f2d3-4b5d-ac30-d3b1111c0d2e",
                  "parentUUID": "52df9332-4583-47ad-930b-2f6b04f97e02",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "45530a6e-1fa1-4e9b-9b15-124ae1b6d138",
                "91a0ff9a-0220-4517-bede-d81f25c98b11",
                "cd653114-f2d3-4b5d-ac30-d3b1111c0d2e"
              ],
              "pending": [],
              "skipped": [],
              "duration": 18,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "1d7ef47b-191a-4faa-8231-46379f9e6ffc",
              "title": "Language Detection API",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/api/azure-api.test.js",
              "file": "/tests/api/azure-api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should detect language correctly",
                  "fullTitle": "Azure Translator API Tests Language Detection API should detect language correctly",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Set up mock API response\nnock('https://api.cognitive.microsofttranslator.com')\n    .post('/detect')\n    .query(q => q['api-version'] === '3.0')\n    .reply(200, [\n        {\n            language: 'fr',\n            score: 0.95,\n            isTranslationSupported: true,\n            isTransliterationSupported: false\n        }\n    ]);\n// Initialize translator\nawait translator.initialize();\n// Call detection method\nconst result = await translator.detectLanguage('Bonjour le monde');\nexpect(result.language).to.equal('fr');\nexpect(result.confidence).to.equal(0.95);\nexpect(result.isTranslationSupported).to.be.true;\n// Verify all nock mocks were called\nexpect(nock.isDone()).to.be.true;",
                  "err": {
                    "message": "Error: Azure Translator connection test failed: Azure Translator error: Nock: No match for request {\n  \"method\": \"POST\",\n  \"url\": \"https://api.cognitive.microsofttranslator.com/translate?api-version=3.0&to=es&category=general&profanityAction=NoAction&includeAlignment=false&includeSentenceLength=false&textType=plain&from=en\",\n  \"headers\": {\n    \"accept\": \"application/json, text/plain, */*\",\n    \"content-type\": \"application/json\",\n    \"ocp-apim-subscription-key\": \"test-api-key\",\n    \"ocp-apim-subscription-region\": \"eastus\",\n    \"x-clienttraceid\": \"0bc08047-8852-4f8e-a2d1-8760f4c392d8\",\n    \"user-agent\": \"axios/1.10.0\",\n    \"content-length\": \"18\",\n    \"accept-encoding\": \"gzip, compress, deflate, br\"\n  },\n  \"body\": \"[{\\\"text\\\":\\\"Hello\\\"}]\"\n}",
                    "estack": "Error: Azure Translator connection test failed: Azure Translator error: Nock: No match for request {\n  \"method\": \"POST\",\n  \"url\": \"https://api.cognitive.microsofttranslator.com/translate?api-version=3.0&to=es&category=general&profanityAction=NoAction&includeAlignment=false&includeSentenceLength=false&textType=plain&from=en\",\n  \"headers\": {\n    \"accept\": \"application/json, text/plain, */*\",\n    \"content-type\": \"application/json\",\n    \"ocp-apim-subscription-key\": \"test-api-key\",\n    \"ocp-apim-subscription-region\": \"eastus\",\n    \"x-clienttraceid\": \"0bc08047-8852-4f8e-a2d1-8760f4c392d8\",\n    \"user-agent\": \"axios/1.10.0\",\n    \"content-length\": \"18\",\n    \"accept-encoding\": \"gzip, compress, deflate, br\"\n  },\n  \"body\": \"[{\\\"text\\\":\\\"Hello\\\"}]\"\n}\n    at AzureTranslator.testConnection (src/services/translation/azure-translator.js:79:19)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async AzureTranslator.initialize (src/services/translation/azure-translator.js:51:13)\n    at async Context.<anonymous> (tests/api/azure-api.test.js:137:13)",
                    "diff": null
                  },
                  "uuid": "2e5f5a3f-1d59-4e2b-b8ca-152c2f6bd4db",
                  "parentUUID": "1d7ef47b-191a-4faa-8231-46379f9e6ffc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "2e5f5a3f-1d59-4e2b-b8ca-152c2f6bd4db"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "271952a8-40a1-40f8-89b4-737455752372",
              "title": "Supported Languages API",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/api/azure-api.test.js",
              "file": "/tests/api/azure-api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should retrieve supported languages",
                  "fullTitle": "Azure Translator API Tests Supported Languages API should retrieve supported languages",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Set up mock API response\nnock('https://api.cognitive.microsofttranslator.com')\n    .get('/languages')\n    .query(q => q['api-version'] === '3.0' && q.scope === 'translation')\n    .reply(200, {\n        translation: {\n            en: {\n                name: 'English',\n                nativeName: 'English',\n                dir: 'ltr'\n            },\n            es: {\n                name: 'Spanish',\n                nativeName: 'Español',\n                dir: 'ltr'\n            },\n            fr: {\n                name: 'French',\n                nativeName: 'Français',\n                dir: 'ltr'\n            }\n        }\n    });\n// Call the load languages method\nawait translator.loadSupportedLanguages();\nexpect(translator.supportedLanguages).to.be.an('array');\nexpect(translator.supportedLanguages).to.include.members(['en', 'es', 'fr']);\n// Verify all nock mocks were called\nexpect(nock.isDone()).to.be.true;",
                  "err": {},
                  "uuid": "69c58036-c707-4f8d-8066-4904d331ab5e",
                  "parentUUID": "271952a8-40a1-40f8-89b4-737455752372",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "69c58036-c707-4f8d-8066-4904d331ab5e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "8a5a8d84-da65-4dff-89ac-e9c879de0f29",
              "title": "Authentication",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/api/azure-api.test.js",
              "file": "/tests/api/azure-api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should include correct authentication headers",
                  "fullTitle": "Azure Translator API Tests Authentication should include correct authentication headers",
                  "timedOut": false,
                  "duration": 7,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Set up header verification\nlet capturedHeaders = {};\nnock('https://api.cognitive.microsofttranslator.com')\n    .post('/translate')\n    .query(true)\n    .reply(function (uri, requestBody) {\n        // Capture the headers for verification\n        capturedHeaders = this.req.headers;\n        return [200, [{\n            translations: [{ text: 'Hola', to: 'es' }]\n        }]];\n    });\n// Initialize translator\nawait translator.initialize();\n// Call translation method\nawait translator.translate('Hello', 'en', 'es');\n// Verify authentication headers\nexpect(capturedHeaders).to.have.property('ocp-apim-subscription-key');\nexpect(capturedHeaders['ocp-apim-subscription-key'][0]).to.equal('test-api-key');\nexpect(capturedHeaders).to.have.property('ocp-apim-subscription-region');\nexpect(capturedHeaders['ocp-apim-subscription-region'][0]).to.equal('eastus');\n// Verify all nock mocks were called\nexpect(nock.isDone()).to.be.true;",
                  "err": {
                    "message": "Error: Azure Translator error: Nock: No match for request {\n  \"method\": \"POST\",\n  \"url\": \"https://api.cognitive.microsofttranslator.com/translate?api-version=3.0&to=es&category=general&profanityAction=NoAction&includeAlignment=false&includeSentenceLength=false&textType=plain&from=en\",\n  \"headers\": {\n    \"accept\": \"application/json, text/plain, */*\",\n    \"content-type\": \"application/json\",\n    \"ocp-apim-subscription-key\": \"test-api-key\",\n    \"ocp-apim-subscription-region\": \"eastus\",\n    \"x-clienttraceid\": \"126db50b-b966-4060-aa56-c38c44fb6248\",\n    \"user-agent\": \"axios/1.10.0\",\n    \"content-length\": \"18\",\n    \"accept-encoding\": \"gzip, compress, deflate, br\"\n  },\n  \"body\": \"[{\\\"text\\\":\\\"Hello\\\"}]\"\n}",
                    "estack": "Error: Azure Translator error: Nock: No match for request {\n  \"method\": \"POST\",\n  \"url\": \"https://api.cognitive.microsofttranslator.com/translate?api-version=3.0&to=es&category=general&profanityAction=NoAction&includeAlignment=false&includeSentenceLength=false&textType=plain&from=en\",\n  \"headers\": {\n    \"accept\": \"application/json, text/plain, */*\",\n    \"content-type\": \"application/json\",\n    \"ocp-apim-subscription-key\": \"test-api-key\",\n    \"ocp-apim-subscription-region\": \"eastus\",\n    \"x-clienttraceid\": \"126db50b-b966-4060-aa56-c38c44fb6248\",\n    \"user-agent\": \"axios/1.10.0\",\n    \"content-length\": \"18\",\n    \"accept-encoding\": \"gzip, compress, deflate, br\"\n  },\n  \"body\": \"[{\\\"text\\\":\\\"Hello\\\"}]\"\n}\n    at AzureTranslator.translateText (src/services/translation/azure-translator.js:223:19)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async AzureTranslator.translate (src/services/translation/azure-translator.js:129:20)\n    at async Context.<anonymous> (tests/api/azure-api.test.js:208:13)",
                    "diff": null
                  },
                  "uuid": "d64bd4d8-2afb-48bd-9ce5-46500e183bb1",
                  "parentUUID": "8a5a8d84-da65-4dff-89ac-e9c879de0f29",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "d64bd4d8-2afb-48bd-9ce5-46500e183bb1"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "2630654b-2ebb-4fe8-a2ed-ddbc4a587a02",
          "title": "End-to-End Tests",
          "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/e2e/app.e2e.test.js",
          "file": "/tests/e2e/app.e2e.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be implemented with Playwright",
              "fullTitle": "End-to-End Tests should be implemented with Playwright",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "8b572bf0-c0ff-40d0-9c35-81f07cee33f1",
              "parentUUID": "2630654b-2ebb-4fe8-a2ed-ddbc4a587a02",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "8b572bf0-c0ff-40d0-9c35-81f07cee33f1"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "239cb8ff-0c5e-493f-9c70-f409087a681b",
          "title": "E2E Test Placeholder",
          "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/e2e/app.e2e.test.js",
          "file": "/tests/e2e/app.e2e.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should pass",
              "fullTitle": "E2E Test Placeholder should pass",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(true).to.be.true;",
              "err": {},
              "uuid": "9a8287c2-f99d-40a5-a4a7-8fc5ef6e66d6",
              "parentUUID": "239cb8ff-0c5e-493f-9c70-f409087a681b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9a8287c2-f99d-40a5-a4a7-8fc5ef6e66d6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c14ff37a-da46-4eb2-88db-e7b231b08d46",
          "title": "Translation App E2E Tests",
          "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/e2e/translationApp.e2e.test.js",
          "file": "/tests/e2e/translationApp.e2e.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should perform a complete translation flow",
              "fullTitle": "Translation App E2E Tests should perform a complete translation flow",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "81976ab3-5fe2-4dd3-ac77-6717d631a3c6",
              "parentUUID": "c14ff37a-da46-4eb2-88db-e7b231b08d46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle errors gracefully",
              "fullTitle": "Translation App E2E Tests should handle errors gracefully",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "eff08d11-9b60-4263-a07b-1f1e8ab140ea",
              "parentUUID": "c14ff37a-da46-4eb2-88db-e7b231b08d46",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "81976ab3-5fe2-4dd3-ac77-6717d631a3c6",
            "eff08d11-9b60-4263-a07b-1f1e8ab140ea"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6501b327-9f95-4dfd-a91a-0af3b2538390",
          "title": "E2E Test Placeholder",
          "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/e2e/translationApp.e2e.test.js",
          "file": "/tests/e2e/translationApp.e2e.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should pass",
              "fullTitle": "E2E Test Placeholder should pass",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(true).to.be.true;",
              "err": {},
              "uuid": "c9420949-018c-4216-8c01-56338eca975c",
              "parentUUID": "6501b327-9f95-4dfd-a91a-0af3b2538390",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c9420949-018c-4216-8c01-56338eca975c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c0c6a904-0db8-47be-b73a-1b5f5b048211",
          "title": "Example Test Suite",
          "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/example.test.js",
          "file": "/tests/example.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should pass a simple test",
              "fullTitle": "Example Test Suite should pass a simple test",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(true).to.be.true;",
              "err": {},
              "uuid": "2c4f1caf-80e7-4678-84d7-d4eb5d6673de",
              "parentUUID": "c0c6a904-0db8-47be-b73a-1b5f5b048211",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should demonstrate sinon stub",
              "fullTitle": "Example Test Suite should demonstrate sinon stub",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const stub = sinon.stub().returns(42);\nexpect(stub()).to.equal(42);",
              "err": {},
              "uuid": "6df343e2-959e-45be-9463-987bd3f2a01d",
              "parentUUID": "c0c6a904-0db8-47be-b73a-1b5f5b048211",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2c4f1caf-80e7-4678-84d7-d4eb5d6673de",
            "6df343e2-959e-45be-9463-987bd3f2a01d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "84e209ea-26b8-485a-ae34-63a5edf9fb35",
          "title": "Complete Pipeline Integration Tests",
          "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/integration/complete-pipeline.test.js",
          "file": "/tests/integration/complete-pipeline.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Complete Pipeline Integration Tests\"",
              "fullTitle": "Complete Pipeline Integration Tests \"before each\" hook in \"Complete Pipeline Integration Tests\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox = sinon.createSandbox();\n// Initialize managers with mock services\ntranslationManager = new TranslationManager();\ntranslationManager.services = {\n    deepl: new MockDeepLService(),\n    gpt4o: new MockGPT4oTranslator(),\n    google: new MockGoogleTranslate(),\n    azure: new MockAzureTranslator()\n};\n// Create STT and TTS managers (or mocks if needed)\nsttManager = new STTManager();\nttsManager = new TTSManager();\n// Mock filesystem operations\nsandbox.stub(fs, 'writeFileSync');\nsandbox.stub(fs, 'readFileSync');",
              "err": {},
              "uuid": "32568c4a-b9ab-4e13-946a-06c230abee7d",
              "parentUUID": "84e209ea-26b8-485a-ae34-63a5edf9fb35",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Complete Pipeline Integration Tests\"",
              "fullTitle": "Complete Pipeline Integration Tests \"after each\" hook in \"Complete Pipeline Integration Tests\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore();\nif (translationManager) translationManager.destroy();\nif (sttManager) sttManager.destroy();\nif (ttsManager) ttsManager.destroy();",
              "err": {},
              "uuid": "a1414355-18eb-4d03-b06c-1a2624bf954e",
              "parentUUID": "84e209ea-26b8-485a-ae34-63a5edf9fb35",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "386acefa-1a80-40d0-acb8-1c332717820a",
              "title": "End-to-end audio translation pipeline",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/integration/complete-pipeline.test.js",
              "file": "/tests/integration/complete-pipeline.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should process audio through the complete pipeline",
                  "fullTitle": "Complete Pipeline Integration Tests End-to-end audio translation pipeline should process audio through the complete pipeline",
                  "timedOut": false,
                  "duration": 363,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// This test might take longer\nthis.timeout(10000);\n// Initialize all components\nawait translationManager.initialize();\n// Mock STT transcription\nsandbox.stub(sttManager, 'transcribeAudio').resolves({\n    text: 'Hello, this is a test of the translation system.',\n    confidence: 0.95,\n    language: 'en',\n    service: 'whisper'\n});\n// Mock TTS synthesis\nsandbox.stub(ttsManager, 'synthesizeSpeech').resolves({\n    audioFile: '/path/to/mock/output.wav',\n    duration: 2.5,\n    service: 'elevenlabs',\n    voice: 'default'\n});\n// Step 1: Speech-to-Text\nconst sttResult = await sttManager.transcribeAudio('/path/to/mock/input.wav');\nexpect(sttResult.text).to.equal('Hello, this is a test of the translation system.');\nexpect(sttResult.language).to.equal('en');\n// Step 2: Translation\nconst translationResult = await translationManager.translate(\n    sttResult.text,\n    sttResult.language,\n    'es',\n    { context: 'System test' }\n);\nexpect(translationResult.success).to.be.true;\nexpect(translationResult.translation).to.be.a('string');\nexpect(translationResult.service).to.be.oneOf(['deepl', 'gpt4o', 'google', 'azure']);\n// Step 3: Text-to-Speech\nconst ttsResult = await ttsManager.synthesizeSpeech(\n    translationResult.translation,\n    'es',\n    { voice: 'default' }\n);\nexpect(ttsResult.audioFile).to.equal('/path/to/mock/output.wav');\nexpect(ttsResult.service).to.equal('elevenlabs');\n// Verify the complete flow works as expected\nexpect(sttManager.transcribeAudio.calledOnce).to.be.true;\nexpect(ttsManager.synthesizeSpeech.calledOnce).to.be.true;",
                  "err": {
                    "message": "TypeError: this.languagePairOptimizer.initialize is not a function",
                    "estack": "TypeError: this.languagePairOptimizer.initialize is not a function\n    at TranslationManager.initialize (src/services/translation/translation-manager.js:79:46)\n    at async Context.<anonymous> (tests/integration/complete-pipeline.test.js:61:13)",
                    "diff": null
                  },
                  "uuid": "fd9b42b4-b90d-4fdf-a3d3-f349a8ccfbe7",
                  "parentUUID": "386acefa-1a80-40d0-acb8-1c332717820a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle service failover in the pipeline",
                  "fullTitle": "Complete Pipeline Integration Tests End-to-end audio translation pipeline should handle service failover in the pipeline",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(10000);\n// Set up a failing STT service\nsandbox.stub(sttManager, 'transcribeAudio')\n    .onFirstCall().rejects(new Error('Service unavailable'))\n    .onSecondCall().resolves({\n        text: 'Hello, this is a test with failover.',\n        confidence: 0.9,\n        language: 'en',\n        service: 'google' // Fallback service\n    });\n// Mock other components\nsandbox.stub(translationManager, 'translate').resolves({\n    success: true,\n    translation: 'Hola, esta es una prueba con conmutación por error.',\n    service: 'google',\n    confidence: 0.85,\n    fromLanguage: 'en',\n    toLanguage: 'es'\n});\nsandbox.stub(ttsManager, 'synthesizeSpeech').resolves({\n    audioFile: '/path/to/mock/output.wav',\n    duration: 3.0,\n    service: 'google',\n    voice: 'default'\n});\n// Execute pipeline with retry logic\nlet sttResult;\ntry {\n    // First attempt will fail\n    sttResult = await sttManager.transcribeAudio('/path/to/mock/input.wav');\n} catch (error) {\n    // Retry with fallback service\n    sttResult = await sttManager.transcribeAudio('/path/to/mock/input.wav');\n}\nexpect(sttResult.text).to.equal('Hello, this is a test with failover.');\nexpect(sttResult.service).to.equal('google'); // Should use fallback\n// Continue with translation and TTS\nconst translationResult = await translationManager.translate(\n    sttResult.text,\n    sttResult.language,\n    'es'\n);\nconst ttsResult = await ttsManager.synthesizeSpeech(\n    translationResult.translation,\n    'es'\n);\nexpect(translationResult.success).to.be.true;\nexpect(ttsResult.audioFile).to.be.a('string');\n// Verify the STT service was called twice (initial failure + retry)\nexpect(sttManager.transcribeAudio.calledTwice).to.be.true;",
                  "err": {
                    "message": "TypeError: Cannot stub non-existent property transcribeAudio",
                    "estack": "TypeError: Cannot stub non-existent property transcribeAudio\n    at Function.stub (node_modules/sinon/lib/sinon/stub.js:82:15)\n    at Sandbox.stub (node_modules/sinon/lib/sinon/sandbox.js:389:39)\n    at Context.<anonymous> (tests/integration/complete-pipeline.test.js:116:21)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "16370513-58d0-43d1-99e1-1be994ec5c78",
                  "parentUUID": "386acefa-1a80-40d0-acb8-1c332717820a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should maintain conversation context across multiple exchanges",
                  "fullTitle": "Complete Pipeline Integration Tests End-to-end audio translation pipeline should maintain conversation context across multiple exchanges",
                  "timedOut": false,
                  "duration": 364,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(15000);\n// Initialize all components\nawait translationManager.initialize();\n// Mock STT for multiple utterances\nconst mockUtterances = [\n    { text: 'Hello, how are you today?', language: 'en' },\n    { text: 'I would like to schedule a meeting tomorrow.', language: 'en' },\n    { text: 'Does 2 PM work for you?', language: 'en' }\n];\nconst sttStub = sandbox.stub(sttManager, 'transcribeAudio');\nmockUtterances.forEach((utterance, index) => {\n    sttStub.onCall(index).resolves({\n        text: utterance.text,\n        confidence: 0.95,\n        language: utterance.language,\n        service: 'whisper'\n    });\n});\n// Mock TTS\nsandbox.stub(ttsManager, 'synthesizeSpeech').resolves({\n    audioFile: '/path/to/mock/output.wav',\n    duration: 2.0,\n    service: 'elevenlabs'\n});\n// Create conversation ID for context tracking\nconst conversationId = 'test-conversation-' + Date.now();\n// Process each utterance through the pipeline\nfor (let i = 0; i < mockUtterances.length; i++) {\n    // Step 1: Speech-to-Text\n    const sttResult = await sttManager.transcribeAudio(`/path/to/mock/input${i}.wav`);\n    // Step 2: Translation with conversation context\n    const translationResult = await translationManager.translate(\n        sttResult.text,\n        sttResult.language,\n        'es',\n        {\n            conversationId: conversationId,\n            domain: 'business'\n        }\n    );\n    // Step 3: Text-to-Speech\n    await ttsManager.synthesizeSpeech(\n        translationResult.translation,\n        'es'\n    );\n    expect(translationResult.success).to.be.true;\n}\n// Verify all utterances were processed\nexpect(sttManager.transcribeAudio.callCount).to.equal(mockUtterances.length);\nexpect(ttsManager.synthesizeSpeech.callCount).to.equal(mockUtterances.length);",
                  "err": {
                    "message": "TypeError: this.languagePairOptimizer.initialize is not a function",
                    "estack": "TypeError: this.languagePairOptimizer.initialize is not a function\n    at TranslationManager.initialize (src/services/translation/translation-manager.js:79:46)\n    at async Context.<anonymous> (tests/integration/complete-pipeline.test.js:178:13)",
                    "diff": null
                  },
                  "uuid": "418a5773-ee8a-427d-b135-34e40da76b96",
                  "parentUUID": "386acefa-1a80-40d0-acb8-1c332717820a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "fd9b42b4-b90d-4fdf-a3d3-f349a8ccfbe7",
                "16370513-58d0-43d1-99e1-1be994ec5c78",
                "418a5773-ee8a-427d-b135-34e40da76b96"
              ],
              "pending": [],
              "skipped": [],
              "duration": 728,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "d70e07b9-84e4-4671-a1bc-3eb40bcead24",
          "title": "Translation Integration Tests",
          "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/integration/stt-translation.test.js",
          "file": "/tests/integration/stt-translation.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Translation Integration Tests\"",
              "fullTitle": "Translation Integration Tests \"before each\" hook in \"Translation Integration Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox = sinon.createSandbox();\n// Create a translation manager with mock services\ntranslationManager = new TranslationManager();\n// Replace real services with mocks\ntranslationManager.services = {\n    deepl: new MockDeepLService(),\n    gpt4o: new MockGPT4oTranslator(),\n    google: new MockGoogleTranslate(),\n    azure: new MockAzureTranslator()\n};",
              "err": {},
              "uuid": "bbbfec33-0165-4909-9e02-d1ca97afe5f3",
              "parentUUID": "d70e07b9-84e4-4671-a1bc-3eb40bcead24",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Translation Integration Tests\"",
              "fullTitle": "Translation Integration Tests \"after each\" hook in \"Translation Integration Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore();\ntranslationManager.destroy();",
              "err": {},
              "uuid": "636b573a-f310-451c-a28f-f6106c25f527",
              "parentUUID": "d70e07b9-84e4-4671-a1bc-3eb40bcead24",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "80a307b9-f349-41ea-be46-75b994997c2c",
              "title": "End-to-end translation workflow",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/integration/stt-translation.test.js",
              "file": "/tests/integration/stt-translation.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should complete the full translation pipeline",
                  "fullTitle": "Translation Integration Tests End-to-end translation workflow should complete the full translation pipeline",
                  "timedOut": false,
                  "duration": 365,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Initialize the translation manager\nawait translationManager.initialize();\n// Verify all services initialized\nexpect(translationManager.isInitialized).to.be.true;\nexpect(Object.values(translationManager.serviceHealth).every(s => s.healthy)).to.be.true;\n// Get supported language pairs\nconst supportedPairs = await translationManager.getSupportedLanguagePairs();\nexpect(supportedPairs).to.be.an('array').that.is.not.empty;\n// Test basic translation\nconst result1 = await translationManager.translate('Hello world', 'en', 'es');\nexpect(result1.success).to.be.true;\nexpect(result1.translation).to.equal('Hola mundo');\nexpect(result1.service).to.be.oneOf(['deepl', 'gpt4o', 'google', 'azure']);\n// Test translation with context\nconst result2 = await translationManager.translate(\n    'How are you?',\n    'en',\n    'fr',\n    {\n        context: 'Casual conversation between friends',\n        domain: 'casual'\n    }\n);\nexpect(result2.success).to.be.true;\nexpect(result2.translation).to.equal('Comment allez-vous?');\n// Test translation with conversation context\nconst result3 = await translationManager.translate(\n    'Thank you',\n    'en',\n    'de',\n    {\n        conversationId: 'test-conversation',\n        domain: 'business'\n    }\n);\nexpect(result3.success).to.be.true;\nexpect(result3.translation).to.equal('Danke');\n// Test translation cache\nconst result4 = await translationManager.translate(\n    'Hello world',\n    'en',\n    'es',\n    { useCache: true }\n);\nexpect(result4.success).to.be.true;\nexpect(result4.cached).to.be.true;",
                  "err": {
                    "message": "TypeError: this.languagePairOptimizer.initialize is not a function",
                    "estack": "TypeError: this.languagePairOptimizer.initialize is not a function\n    at TranslationManager.initialize (src/services/translation/translation-manager.js:79:46)\n    at async Context.<anonymous> (tests/integration/stt-translation.test.js:38:13)",
                    "diff": null
                  },
                  "uuid": "b7a2634c-c9ec-4403-a23c-d10a07d83dad",
                  "parentUUID": "80a307b9-f349-41ea-be46-75b994997c2c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle service failover correctly",
                  "fullTitle": "Translation Integration Tests End-to-end translation workflow should handle service failover correctly",
                  "timedOut": false,
                  "duration": 364,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Create translation manager with one failing service\ntranslationManager.services.deepl = new MockDeepLService({ failureRate: 1.0 });\nawait translationManager.initialize();\n// Verify service health reflects the failure\nexpect(translationManager.serviceHealth.deepl.healthy).to.be.false;\n// Test that translation still works using a different service\nconst result = await translationManager.translate('Hello world', 'en', 'es');\nexpect(result.success).to.be.true;\nexpect(result.translation).to.equal('Hola mundo');\nexpect(result.service).to.not.equal('deepl');",
                  "err": {
                    "message": "TypeError: this.languagePairOptimizer.initialize is not a function",
                    "estack": "TypeError: this.languagePairOptimizer.initialize is not a function\n    at TranslationManager.initialize (src/services/translation/translation-manager.js:79:46)\n    at async Context.<anonymous> (tests/integration/stt-translation.test.js:98:13)",
                    "diff": null
                  },
                  "uuid": "c2fba0b9-9c8e-44a4-9fec-dbc9c86b27b6",
                  "parentUUID": "80a307b9-f349-41ea-be46-75b994997c2c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should maintain conversation context between translations",
                  "fullTitle": "Translation Integration Tests End-to-end translation workflow should maintain conversation context between translations",
                  "timedOut": false,
                  "duration": 364,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "await translationManager.initialize();\n// Perform a series of translations in the same conversation\nconst conversationId = 'test-conversation-context';\n// First message\nawait translationManager.translate(\n    'Hello, how are you today?',\n    'en',\n    'es',\n    { conversationId }\n);\n// Second message\nawait translationManager.translate(\n    'I am fine, thank you!',\n    'en',\n    'es',\n    { conversationId }\n);\n// Test that the context is used\nconst contextSpy = sandbox.spy(translationManager.contextManager, 'getConversationContext');\nawait translationManager.translate(\n    'Would you like to meet for coffee?',\n    'en',\n    'es',\n    { conversationId }\n);\nexpect(contextSpy.calledOnce).to.be.true;",
                  "err": {
                    "message": "TypeError: this.languagePairOptimizer.initialize is not a function",
                    "estack": "TypeError: this.languagePairOptimizer.initialize is not a function\n    at TranslationManager.initialize (src/services/translation/translation-manager.js:79:46)\n    at async Context.<anonymous> (tests/integration/stt-translation.test.js:112:13)",
                    "diff": null
                  },
                  "uuid": "af73dcb7-c57e-4870-b18b-5eda94de3105",
                  "parentUUID": "80a307b9-f349-41ea-be46-75b994997c2c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle different priority settings",
                  "fullTitle": "Translation Integration Tests End-to-end translation workflow should handle different priority settings",
                  "timedOut": false,
                  "duration": 366,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "await translationManager.initialize();\n// Test quality-focused translation\nconst qualityResult = await translationManager.translate(\n    'Good morning',\n    'en',\n    'fr',\n    { priority: 'quality' }\n);\n// Test speed-focused translation\nconst speedResult = await translationManager.translate(\n    'Good morning',\n    'en',\n    'fr',\n    { priority: 'speed' }\n);\n// These might use different services based on the routing logic\nexpect(qualityResult.translation).to.equal('Bonjour');\nexpect(speedResult.translation).to.equal('Bonjour');\n// Test cost-focused translation\nconst costResult = await translationManager.translate(\n    'Good evening',\n    'en',\n    'fr',\n    { priority: 'cost' }\n);\nexpect(costResult.translation).to.equal('Bonsoir');",
                  "err": {
                    "message": "TypeError: this.languagePairOptimizer.initialize is not a function",
                    "estack": "TypeError: this.languagePairOptimizer.initialize is not a function\n    at TranslationManager.initialize (src/services/translation/translation-manager.js:79:46)\n    at async Context.<anonymous> (tests/integration/stt-translation.test.js:147:13)",
                    "diff": null
                  },
                  "uuid": "1fc37b6e-fddf-44ce-a96d-fe1191984acc",
                  "parentUUID": "80a307b9-f349-41ea-be46-75b994997c2c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "b7a2634c-c9ec-4403-a23c-d10a07d83dad",
                "c2fba0b9-9c8e-44a4-9fec-dbc9c86b27b6",
                "af73dcb7-c57e-4870-b18b-5eda94de3105",
                "1fc37b6e-fddf-44ce-a96d-fe1191984acc"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1459,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5ca365d4-feb0-4cbc-9fc3-d2b85dcfcee4",
          "title": "Translation Performance Tests",
          "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/performance/translation-performance.test.js",
          "file": "/tests/performance/translation-performance.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Translation Performance Tests\"",
              "fullTitle": "Translation Performance Tests \"before all\" hook in \"Translation Performance Tests\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Load test data\ntestData = loadTestData('translation-test-data.json');\n// Create sandbox\nsandbox = sinon.createSandbox();",
              "err": {},
              "uuid": "620ea973-63fc-4d07-bb9c-6e9a503d2581",
              "parentUUID": "5ca365d4-feb0-4cbc-9fc3-d2b85dcfcee4",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook for \"should measure individual service latency\"",
              "fullTitle": "Translation Performance Tests \"before each\" hook for \"should measure individual service latency\"",
              "timedOut": false,
              "duration": 365,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Create and initialize managers with mock services\ntranslationManager = new TranslationManager();\ntranslationManager.services = createMockServices();\nsttManager = new STTManager();\nttsManager = new TTSManager();\n// Initialize components\nawait translationManager.initialize();\nawait sttManager.initialize();\nawait ttsManager.initialize();",
              "err": {
                "message": "TypeError: this.languagePairOptimizer.initialize is not a function",
                "estack": "TypeError: this.languagePairOptimizer.initialize is not a function\n    at TranslationManager.initialize (src/services/translation/translation-manager.js:79:46)\n    at async Context.<anonymous> (tests/performance/translation-performance.test.js:52:9)",
                "diff": null
              },
              "uuid": "e22025c5-6c26-48a8-a87d-b6f6f8abde8d",
              "parentUUID": "5ca365d4-feb0-4cbc-9fc3-d2b85dcfcee4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Translation Performance Tests\"",
              "fullTitle": "Translation Performance Tests \"after each\" hook in \"Translation Performance Tests\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore();\nif (translationManager) translationManager.destroy();\nif (sttManager) sttManager.destroy();\nif (ttsManager) ttsManager.destroy();",
              "err": {},
              "uuid": "e18c3594-62fd-499f-bf7b-1e34accd28b1",
              "parentUUID": "5ca365d4-feb0-4cbc-9fc3-d2b85dcfcee4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "1d685735-fdc7-4177-9cf4-e13913414d5c",
              "title": "Translation Service Latency",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/performance/translation-performance.test.js",
              "file": "/tests/performance/translation-performance.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should measure individual service latency",
                  "fullTitle": "Translation Performance Tests Translation Service Latency should measure individual service latency",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const results = {\n    deepl: [],\n    gpt4o: [],\n    google: [],\n    azure: []\n};\n// Test text to translate\nconst text = 'Hello world, this is a performance test for the translation system.';\nconst iterations = 5;\n// Measure latency for each service\nfor (const service of Object.keys(results)) {\n    for (let i = 0; i < iterations; i++) {\n        const startTime = Date.now();\n        try {\n            const result = await translationManager.attemptTranslation(\n                service,\n                text,\n                'en',\n                'es'\n            );\n            const endTime = Date.now();\n            const latency = endTime - startTime;\n            results[service].push({\n                latency,\n                success: result.success,\n                iteration: i\n            });\n        } catch (error) {\n            results[service].push({\n                latency: Date.now() - startTime,\n                success: false,\n                error: error.message,\n                iteration: i\n            });\n        }\n        // Small delay between tests\n        await delay(100);\n    }\n}\n// Calculate and report average latencies\nconst averages = {};\nfor (const [service, measurements] of Object.entries(results)) {\n    const successfulMeasurements = measurements.filter(m => m.success);\n    if (successfulMeasurements.length > 0) {\n        const totalLatency = successfulMeasurements.reduce((sum, m) => sum + m.latency, 0);\n        averages[service] = totalLatency / successfulMeasurements.length;\n    } else {\n        averages[service] = null; // All attempts failed\n    }\n}\nconsole.log('Average service latencies (ms):', averages);\n// Verify all services completed successfully at least once\nfor (const service of Object.keys(results)) {\n    const successCount = results[service].filter(m => m.success).length;\n    expect(successCount).to.be.greaterThan(0, `${service} should succeed at least once`);\n}\n// Verify latencies are within acceptable ranges\n// These thresholds should be adjusted based on your performance requirements\nexpect(averages.deepl).to.be.lessThan(500, 'DeepL latency should be under 500ms');\nexpect(averages.google).to.be.lessThan(500, 'Google latency should be under 500ms');\nexpect(averages.azure).to.be.lessThan(500, 'Azure latency should be under 500ms');\n// GPT-4o is expected to be slower\nexpect(averages.gpt4o).to.be.lessThan(1000, 'GPT-4o latency should be under 1000ms');",
                  "err": {},
                  "uuid": "6bab216b-337a-4076-9ccc-cd72c5a1744f",
                  "parentUUID": "1d685735-fdc7-4177-9cf4-e13913414d5c",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "6bab216b-337a-4076-9ccc-cd72c5a1744f"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "b5fac312-f738-4586-8494-54228e89305a",
              "title": "Translation Pipeline Throughput",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/performance/translation-performance.test.js",
              "file": "/tests/performance/translation-performance.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle multiple concurrent translation requests",
                  "fullTitle": "Translation Performance Tests Translation Pipeline Throughput should handle multiple concurrent translation requests",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Number of concurrent requests\nconst concurrentRequests = 10;\n// Sample texts to translate\nconst texts = testData.testCases.map(tc => tc.text);\n// Create array of translation promises\nconst translationPromises = [];\nconst startTime = Date.now();\n// Launch concurrent translations\nfor (let i = 0; i < concurrentRequests; i++) {\n    const textIndex = i % texts.length;\n    const promise = translationManager.translate(\n        texts[textIndex],\n        'en',\n        'es',\n        { priority: 'speed' } // Prioritize speed for throughput test\n    );\n    translationPromises.push(promise);\n}\n// Wait for all translations to complete\nconst results = await Promise.all(translationPromises);\nconst endTime = Date.now();\nconst totalTime = endTime - startTime;\n// Calculate metrics\nconst successCount = results.filter(r => r.success).length;\nconst throughput = (successCount / totalTime) * 1000; // translations per second\nconsole.log(`Throughput: ${throughput.toFixed(2)} translations/second`);\nconsole.log(`Total time for ${concurrentRequests} requests: ${totalTime}ms`);\n// Verify all translations succeeded\nexpect(successCount).to.equal(concurrentRequests, 'All translations should succeed');\n// Verify minimum throughput\n// This threshold should be adjusted based on your performance requirements\nexpect(throughput).to.be.greaterThan(5, 'Throughput should be at least 5 translations/second');",
                  "err": {},
                  "uuid": "23a84185-a3ff-41af-8323-118f6bd63edd",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "23a84185-a3ff-41af-8323-118f6bd63edd"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "6a620fa6-7cc8-4f18-8e17-48150ed5db87",
              "title": "Complete Pipeline Performance",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/performance/translation-performance.test.js",
              "file": "/tests/performance/translation-performance.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should measure end-to-end pipeline latency",
                  "fullTitle": "Translation Performance Tests Complete Pipeline Performance should measure end-to-end pipeline latency",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mock the STT and TTS components\nsandbox.stub(sttManager, 'transcribeAudio').callsFake(async () => {\n    await delay(300); // Simulate STT processing time\n    return {\n        text: 'Hello, this is a test of the translation system.',\n        confidence: 0.95,\n        language: 'en',\n        service: 'whisper'\n    };\n});\nsandbox.stub(ttsManager, 'synthesizeSpeech').callsFake(async (text, language) => {\n    await delay(500); // Simulate TTS processing time\n    return {\n        audioFile: '/path/to/mock/output.wav',\n        duration: 2.5,\n        service: 'elevenlabs',\n        voice: 'default'\n    };\n});\nconst iterations = 3;\nconst results = [];\nfor (let i = 0; i < iterations; i++) {\n    const startTime = Date.now();\n    // Step 1: Speech-to-Text\n    const sttResult = await sttManager.transcribeAudio('/path/to/mock/input.wav');\n    const sttTime = Date.now();\n    // Step 2: Translation\n    const translationResult = await translationManager.translate(\n        sttResult.text,\n        sttResult.language,\n        'es',\n        { context: 'System test' }\n    );\n    const translationTime = Date.now();\n    // Step 3: Text-to-Speech\n    const ttsResult = await ttsManager.synthesizeSpeech(\n        translationResult.translation,\n        'es',\n        { voice: 'default' }\n    );\n    const endTime = Date.now();\n    // Calculate component latencies\n    const sttLatency = sttTime - startTime;\n    const translationLatency = translationTime - sttTime;\n    const ttsLatency = endTime - translationTime;\n    const totalLatency = endTime - startTime;\n    results.push({\n        iteration: i,\n        sttLatency,\n        translationLatency,\n        ttsLatency,\n        totalLatency\n    });\n    // Small delay between iterations\n    await delay(200);\n}\n// Calculate averages\nconst avgSttLatency = results.reduce((sum, r) => sum + r.sttLatency, 0) / iterations;\nconst avgTranslationLatency = results.reduce((sum, r) => sum + r.translationLatency, 0) / iterations;\nconst avgTtsLatency = results.reduce((sum, r) => sum + r.ttsLatency, 0) / iterations;\nconst avgTotalLatency = results.reduce((sum, r) => sum + r.totalLatency, 0) / iterations;\nconsole.log('Average STT latency:', avgSttLatency.toFixed(2), 'ms');\nconsole.log('Average Translation latency:', avgTranslationLatency.toFixed(2), 'ms');\nconsole.log('Average TTS latency:', avgTtsLatency.toFixed(2), 'ms');\nconsole.log('Average Total latency:', avgTotalLatency.toFixed(2), 'ms');\n// Verify performance meets requirements\nexpect(avgSttLatency).to.be.lessThan(1000, 'STT should complete within 1000ms');\nexpect(avgTranslationLatency).to.be.lessThan(500, 'Translation should complete within 500ms');\nexpect(avgTtsLatency).to.be.lessThan(1500, 'TTS should complete within 1500ms');\nexpect(avgTotalLatency).to.be.lessThan(4000, 'Complete pipeline should finish within 4000ms');",
                  "err": {},
                  "uuid": "977f7fd7-9716-4a4a-82e9-64d3d21c4660",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "977f7fd7-9716-4a4a-82e9-64d3d21c4660"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "0de128f8-a631-49bf-af64-93152f1ff179",
              "title": "Resource Utilization",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/performance/translation-performance.test.js",
              "file": "/tests/performance/translation-performance.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should measure memory usage during translation",
                  "fullTitle": "Translation Performance Tests Resource Utilization should measure memory usage during translation",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Skip this test in CI environments where memory measurement may be unreliable\nif (process.env.CI) {\n    this.skip();\n    return;\n}\n// Get initial memory usage\nconst initialMemory = process.memoryUsage();\n// Number of translations to perform\nconst iterations = 50;\n// Perform multiple translations\nfor (let i = 0; i < iterations; i++) {\n    const result = await translationManager.translate(\n        `Test message ${i} for memory usage measurement.`,\n        'en',\n        'es'\n    );\n    // Verify translation succeeded\n    expect(result.success).to.be.true;\n}\n// Measure final memory usage\nconst finalMemory = process.memoryUsage();\n// Calculate memory increase\nconst heapIncrease = finalMemory.heapUsed - initialMemory.heapUsed;\nconst rssIncrease = finalMemory.rss - initialMemory.rss;\nconsole.log(`Memory usage after ${iterations} translations:`);\nconsole.log(`Heap increase: ${(heapIncrease / 1024 / 1024).toFixed(2)} MB`);\nconsole.log(`RSS increase: ${(rssIncrease / 1024 / 1024).toFixed(2)} MB`);\n// Verify memory increase is within acceptable limits\n// These thresholds should be adjusted based on your resource constraints\nexpect(heapIncrease).to.be.lessThan(50 * 1024 * 1024, 'Heap increase should be less than 50MB');\nexpect(rssIncrease).to.be.lessThan(100 * 1024 * 1024, 'RSS increase should be less than 100MB');",
                  "err": {},
                  "uuid": "329d5c4c-9676-44b2-afcd-f3c9765ddb6e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "329d5c4c-9676-44b2-afcd-f3c9765ddb6e"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "210c7207-4cbd-49bd-acda-510001590d35",
          "title": "Translation Cache Performance",
          "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/performance/translation-performance.test.js",
          "file": "/tests/performance/translation-performance.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook for \"should improve performance with caching\"",
              "fullTitle": "Translation Cache Performance \"before each\" hook for \"should improve performance with caching\"",
              "timedOut": false,
              "duration": 363,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "sandbox = sinon.createSandbox();\n// Create and initialize translation manager\ntranslationManager = new TranslationManager();\ntranslationManager.services = createMockServices();\nawait translationManager.initialize();",
              "err": {
                "message": "TypeError: this.languagePairOptimizer.initialize is not a function",
                "estack": "TypeError: this.languagePairOptimizer.initialize is not a function\n    at TranslationManager.initialize (src/services/translation/translation-manager.js:79:46)\n    at async Context.<anonymous> (tests/performance/translation-performance.test.js:331:9)",
                "diff": null
              },
              "uuid": "db2c6303-2915-4c83-9668-24c723eea943",
              "parentUUID": "210c7207-4cbd-49bd-acda-510001590d35",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Translation Cache Performance\"",
              "fullTitle": "Translation Cache Performance \"after each\" hook in \"Translation Cache Performance\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore();\nif (translationManager) translationManager.destroy();",
              "err": {},
              "uuid": "ed8fb32c-3e18-46b7-9f23-b7aa7b6a98b6",
              "parentUUID": "210c7207-4cbd-49bd-acda-510001590d35",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should improve performance with caching",
              "fullTitle": "Translation Cache Performance should improve performance with caching",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Texts to translate\nconst texts = [\n    'Hello world',\n    'How are you today?',\n    'The weather is beautiful'\n];\n// First round - without cache\nconst firstRoundTimes = [];\nfor (const text of texts) {\n    const startTime = Date.now();\n    const result = await translationManager.translate(text, 'en', 'es', { useCache: false });\n    const endTime = Date.now();\n    firstRoundTimes.push(endTime - startTime);\n    expect(result.success).to.be.true;\n}\n// Second round - with cache\nconst secondRoundTimes = [];\nfor (const text of texts) {\n    const startTime = Date.now();\n    const result = await translationManager.translate(text, 'en', 'es', { useCache: true });\n    const endTime = Date.now();\n    secondRoundTimes.push(endTime - startTime);\n    expect(result.success).to.be.true;\n    expect(result.cached).to.be.true;\n}\n// Calculate average times\nconst avgFirstRound = firstRoundTimes.reduce((sum, t) => sum + t, 0) / firstRoundTimes.length;\nconst avgSecondRound = secondRoundTimes.reduce((sum, t) => sum + t, 0) / secondRoundTimes.length;\nconsole.log('Average time without cache:', avgFirstRound.toFixed(2), 'ms');\nconsole.log('Average time with cache:', avgSecondRound.toFixed(2), 'ms');\nconsole.log('Performance improvement:', ((avgFirstRound - avgSecondRound) / avgFirstRound * 100).toFixed(2), '%');\n// Verify cache provides significant performance improvement\nexpect(avgSecondRound).to.be.lessThan(avgFirstRound * 0.5, 'Cache should reduce latency by at least 50%');",
              "err": {},
              "uuid": "55ee026a-b5be-489a-b28a-ea14c3bdca62",
              "parentUUID": "210c7207-4cbd-49bd-acda-510001590d35",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "55ee026a-b5be-489a-b28a-ea14c3bdca62"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "de7de7f6-0c7b-4294-bbea-1ed8530e6930",
          "title": "API Key Security",
          "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/security/api-key-security.test.js",
          "file": "/tests/security/api-key-security.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"API Key Security\"",
              "fullTitle": "API Key Security \"before each\" hook in \"API Key Security\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox = sinon.createSandbox();\n// Mock fs functions\nsandbox.stub(fs, 'readFileSync');\nsandbox.stub(fs, 'writeFileSync');\nsandbox.stub(fs, 'existsSync').returns(true);\n// Mock encryption/decryption functions\nmockConfig = {\n    encryptionKey: 'test-encryption-key',\n    configDir: '/mock/config/dir'\n};\napiKeyManager = new ApiKeyManager(mockConfig);",
              "err": {},
              "uuid": "88c665b9-6414-4a60-b6d6-d8f2e8572732",
              "parentUUID": "de7de7f6-0c7b-4294-bbea-1ed8530e6930",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"API Key Security\"",
              "fullTitle": "API Key Security \"after each\" hook in \"API Key Security\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore();",
              "err": {},
              "uuid": "f9c601db-ceda-44a0-ba2e-bac207bbe4b6",
              "parentUUID": "de7de7f6-0c7b-4294-bbea-1ed8530e6930",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "02134c16-ef07-477f-938a-d8fe43999ceb",
              "title": "API key storage",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/security/api-key-security.test.js",
              "file": "/tests/security/api-key-security.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should encrypt API keys before storing",
                  "fullTitle": "API Key Security API key storage should encrypt API keys before storing",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Set up test data\nconst serviceId = 'deepl';\nconst apiKey = 'test-api-key-12345';\n// Call store API key\napiKeyManager.storeApiKey(serviceId, apiKey);\n// Check that writeFileSync was called with encrypted data\nexpect(fs.writeFileSync.calledOnce).to.be.true;\nconst writeCall = fs.writeFileSync.firstCall;\nconst encryptedData = writeCall.args[1];\n// Verify data is encrypted (not plain text)\nexpect(encryptedData).to.not.include(apiKey);",
                  "err": {
                    "message": "TypeError: apiKeyManager.storeApiKey is not a function",
                    "estack": "TypeError: apiKeyManager.storeApiKey is not a function\n    at Context.<anonymous> (tests/security/api-key-security.test.js:46:27)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "eadea8ee-6332-4806-80c4-de3fc2d20613",
                  "parentUUID": "02134c16-ef07-477f-938a-d8fe43999ceb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should store API keys in the correct location",
                  "fullTitle": "API Key Security API key storage should store API keys in the correct location",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Set up test data\nconst serviceId = 'deepl';\nconst apiKey = 'test-api-key-12345';\n// Call store API key\napiKeyManager.storeApiKey(serviceId, apiKey);\n// Check that the file path is correct\nconst expectedPath = path.join(mockConfig.configDir, `${serviceId}.key`);\nexpect(fs.writeFileSync.firstCall.args[0]).to.equal(expectedPath);",
                  "err": {
                    "message": "TypeError: apiKeyManager.storeApiKey is not a function",
                    "estack": "TypeError: apiKeyManager.storeApiKey is not a function\n    at Context.<anonymous> (tests/security/api-key-security.test.js:64:27)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "abac0e5d-6fa3-4597-bd6d-c8fd16cb3bcc",
                  "parentUUID": "02134c16-ef07-477f-938a-d8fe43999ceb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not store API keys in plain text",
                  "fullTitle": "API Key Security API key storage should not store API keys in plain text",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Set up test data\nconst serviceId = 'deepl';\nconst apiKey = 'test-api-key-12345';\n// Spy on console to check for logging\nconst consoleSpy = sandbox.spy(console, 'log');\n// Call store API key\napiKeyManager.storeApiKey(serviceId, apiKey);\n// Verify key is not logged\nexpect(consoleSpy.neverCalledWith(sinon.match(apiKey))).to.be.true;",
                  "err": {
                    "message": "TypeError: apiKeyManager.storeApiKey is not a function",
                    "estack": "TypeError: apiKeyManager.storeApiKey is not a function\n    at Context.<anonymous> (tests/security/api-key-security.test.js:80:27)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "f115b223-beae-4a8a-a669-89b682c09ea6",
                  "parentUUID": "02134c16-ef07-477f-938a-d8fe43999ceb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "eadea8ee-6332-4806-80c4-de3fc2d20613",
                "abac0e5d-6fa3-4597-bd6d-c8fd16cb3bcc",
                "f115b223-beae-4a8a-a669-89b682c09ea6"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "48f61efe-9e83-46ec-82af-4f94dcc0ce62",
              "title": "API key retrieval",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/security/api-key-security.test.js",
              "file": "/tests/security/api-key-security.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should decrypt API keys when retrieving",
                  "fullTitle": "API Key Security API key retrieval should decrypt API keys when retrieving",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Set up test data\nconst serviceId = 'deepl';\nconst apiKey = 'test-api-key-12345';\n// Mock encryption and decryption\napiKeyManager.encryptData = sandbox.stub().returns('encrypted-data');\napiKeyManager.decryptData = sandbox.stub().returns(apiKey);\n// Mock readFileSync to return encrypted data\nfs.readFileSync.returns('encrypted-data');\n// Call retrieve API key\nconst retrievedKey = apiKeyManager.getApiKey(serviceId);\n// Check that decryption was called\nexpect(apiKeyManager.decryptData.calledOnce).to.be.true;\nexpect(retrievedKey).to.equal(apiKey);",
                  "err": {
                    "message": "TypeError: apiKeyManager.getApiKey is not a function",
                    "estack": "TypeError: apiKeyManager.getApiKey is not a function\n    at Context.<anonymous> (tests/security/api-key-security.test.js:101:48)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "971b9d44-7651-478e-a588-98078dfb7aa9",
                  "parentUUID": "48f61efe-9e83-46ec-82af-4f94dcc0ce62",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle missing API keys gracefully",
                  "fullTitle": "API Key Security API key retrieval should handle missing API keys gracefully",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Mock file not existing\nfs.existsSync.returns(false);\n// Call retrieve API key for non-existent service\nconst retrievedKey = apiKeyManager.getApiKey('nonexistent-service');\n// Should return null, not throw\nexpect(retrievedKey).to.be.null;",
                  "err": {
                    "message": "TypeError: apiKeyManager.getApiKey is not a function",
                    "estack": "TypeError: apiKeyManager.getApiKey is not a function\n    at Context.<anonymous> (tests/security/api-key-security.test.js:113:48)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "8161cc45-94f9-46fe-a38f-5eede0cc3b96",
                  "parentUUID": "48f61efe-9e83-46ec-82af-4f94dcc0ce62",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle decryption errors securely",
                  "fullTitle": "API Key Security API key retrieval should handle decryption errors securely",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Mock readFileSync to return data\nfs.readFileSync.returns('corrupted-data');\n// Mock decryption to throw error\napiKeyManager.decryptData = sandbox.stub().throws(new Error('Decryption failed'));\n// Call retrieve API key\ntry {\n    apiKeyManager.getApiKey('deepl');\n    expect.fail('Should have thrown an error');\n} catch (error) {\n    // Should throw a generic error without exposing sensitive info\n    expect(error.message).to.not.include('corrupted-data');\n    expect(error.message).to.include('retrieve API key');\n}",
                  "err": {
                    "message": "AssertionError: expected 'apiKeyManager.getApiKey is not a func…' to include 'retrieve API key'",
                    "estack": "AssertionError: expected 'apiKeyManager.getApiKey is not a func…' to include 'retrieve API key'\n    at Context.<anonymous> (tests/security/api-key-security.test.js:133:42)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "419e0754-0866-4175-8124-39661a1c461a",
                  "parentUUID": "48f61efe-9e83-46ec-82af-4f94dcc0ce62",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "971b9d44-7651-478e-a588-98078dfb7aa9",
                "8161cc45-94f9-46fe-a38f-5eede0cc3b96",
                "419e0754-0866-4175-8124-39661a1c461a"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "af42b358-0a82-4c96-ba40-beed31d5098d",
              "title": "API key validation",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/security/api-key-security.test.js",
              "file": "/tests/security/api-key-security.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate API key format",
                  "fullTitle": "API Key Security API key validation should validate API key format",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Valid API keys\nexpect(apiKeyManager.isValidApiKeyFormat('deepl', 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx')).to.be.true;\nexpect(apiKeyManager.isValidApiKeyFormat('gpt4o', 'sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx')).to.be.true;\n// Invalid API keys\nexpect(apiKeyManager.isValidApiKeyFormat('deepl', 'invalid-format')).to.be.false;\nexpect(apiKeyManager.isValidApiKeyFormat('gpt4o', 'invalid-format')).to.be.false;",
                  "err": {
                    "message": "TypeError: apiKeyManager.isValidApiKeyFormat is not a function",
                    "estack": "TypeError: apiKeyManager.isValidApiKeyFormat is not a function\n    at Context.<anonymous> (tests/security/api-key-security.test.js:141:34)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "55a11841-0030-40e8-87ff-32badcb0d111",
                  "parentUUID": "af42b358-0a82-4c96-ba40-beed31d5098d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect potentially compromised API keys",
                  "fullTitle": "API Key Security API key validation should detect potentially compromised API keys",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Set up mock compromised key database\napiKeyManager.compromisedKeyHashes = new Set(['hash-of-compromised-key']);\napiKeyManager.hashApiKey = sandbox.stub().returns('hash-of-compromised-key');\n// Should detect compromised key\nexpect(apiKeyManager.isCompromisedApiKey('compromised-key')).to.be.true;\n// Change hash result for safe key\napiKeyManager.hashApiKey.returns('hash-of-safe-key');\n// Should not flag safe key\nexpect(apiKeyManager.isCompromisedApiKey('safe-key')).to.be.false;",
                  "err": {
                    "message": "TypeError: apiKeyManager.isCompromisedApiKey is not a function",
                    "estack": "TypeError: apiKeyManager.isCompromisedApiKey is not a function\n    at Context.<anonymous> (tests/security/api-key-security.test.js:155:34)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "d29e9206-ef69-462b-a4e8-927dabe90158",
                  "parentUUID": "af42b358-0a82-4c96-ba40-beed31d5098d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "55a11841-0030-40e8-87ff-32badcb0d111",
                "d29e9206-ef69-462b-a4e8-927dabe90158"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "43631e13-cca4-4b79-8cf5-e7b38f686824",
              "title": "API key rotation",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/security/api-key-security.test.js",
              "file": "/tests/security/api-key-security.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should support API key rotation",
                  "fullTitle": "API Key Security API key rotation should support API key rotation",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Set up test data\nconst serviceId = 'deepl';\nconst oldApiKey = 'old-api-key';\nconst newApiKey = 'new-api-key';\n// Mock API key storage\napiKeyManager.storeApiKey = sandbox.spy();\napiKeyManager.getApiKey = sandbox.stub().returns(oldApiKey);\n// Mock service client\nconst mockServiceClient = {\n    validateApiKey: sandbox.stub().resolves(true)\n};\n// Call rotate API key\nawait apiKeyManager.rotateApiKey(serviceId, newApiKey, mockServiceClient);\n// Should store new key\nexpect(apiKeyManager.storeApiKey.calledWith(serviceId, newApiKey)).to.be.true;\n// Should validate new key\nexpect(mockServiceClient.validateApiKey.calledWith(newApiKey)).to.be.true;",
                  "err": {
                    "message": "TypeError: apiKeyManager.rotateApiKey is not a function",
                    "estack": "TypeError: apiKeyManager.rotateApiKey is not a function\n    at Context.<anonymous> (tests/security/api-key-security.test.js:182:33)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "82570b22-bf08-4c16-80b2-f16032260e90",
                  "parentUUID": "43631e13-cca4-4b79-8cf5-e7b38f686824",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not store invalid API keys during rotation",
                  "fullTitle": "API Key Security API key rotation should not store invalid API keys during rotation",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Set up test data\nconst serviceId = 'deepl';\nconst oldApiKey = 'old-api-key';\nconst invalidApiKey = 'invalid-api-key';\n// Mock API key storage\napiKeyManager.storeApiKey = sandbox.spy();\napiKeyManager.getApiKey = sandbox.stub().returns(oldApiKey);\n// Mock service client with validation failure\nconst mockServiceClient = {\n    validateApiKey: sandbox.stub().resolves(false)\n};\n// Call rotate API key\ntry {\n    await apiKeyManager.rotateApiKey(serviceId, invalidApiKey, mockServiceClient);\n    expect.fail('Should have thrown an error');\n} catch (error) {\n    // Should not store invalid key\n    expect(apiKeyManager.storeApiKey.neverCalledWith(serviceId, invalidApiKey)).to.be.true;\n}",
                  "err": {},
                  "uuid": "a017af24-c471-495e-a327-1be4d9a1bc69",
                  "parentUUID": "43631e13-cca4-4b79-8cf5-e7b38f686824",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a017af24-c471-495e-a327-1be4d9a1bc69"
              ],
              "failures": [
                "82570b22-bf08-4c16-80b2-f16032260e90"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "fe78a67b-ac48-445b-ac9f-d5e3586cc27c",
          "title": "App Security",
          "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/security/api-key-security.test.js",
          "file": "/tests/security/api-key-security.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"App Security\"",
              "fullTitle": "App Security \"before each\" hook in \"App Security\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox = sinon.createSandbox();",
              "err": {},
              "uuid": "67ea6009-4cc1-4f71-b1c8-8ab06a7a67e7",
              "parentUUID": "fe78a67b-ac48-445b-ac9f-d5e3586cc27c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"App Security\"",
              "fullTitle": "App Security \"after each\" hook in \"App Security\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore();",
              "err": {},
              "uuid": "3ad2d306-fe83-4b5b-a7e5-4bb5098da9f3",
              "parentUUID": "fe78a67b-ac48-445b-ac9f-d5e3586cc27c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "2968bd15-7d02-42d9-ae5e-3f2f14649052",
              "title": "Input sanitization",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/security/api-key-security.test.js",
              "file": "/tests/security/api-key-security.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should sanitize user inputs to prevent injection attacks",
                  "fullTitle": "App Security Input sanitization should sanitize user inputs to prevent injection attacks",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Import the sanitization module\nconst { sanitizeInput } = require('../../src/services/security/input-sanitizer');\n// Test potentially malicious inputs\nconst malicious = '<script>alert(\"XSS\")</script>';\nconst sanitized = sanitizeInput(malicious);\n// Should remove script tags\nexpect(sanitized).to.not.include('<script>');",
                  "err": {
                    "message": "Error: Cannot find module '../../src/services/security/input-sanitizer'\nRequire stack:\n- /Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/security/api-key-security.test.js",
                    "estack": "Error: Cannot find module '../../src/services/security/input-sanitizer'\nRequire stack:\n- /Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/security/api-key-security.test.js\n    at Function._resolveFilename (node:internal/modules/cjs/loader:1225:15)\n    at Function._load (node:internal/modules/cjs/loader:1055:27)\n    at TracingChannel.traceSync (node:diagnostics_channel:322:14)\n    at wrapModuleLoad (node:internal/modules/cjs/loader:220:24)\n    at Module.require (node:internal/modules/cjs/loader:1311:12)\n    at require (node:internal/modules/helpers:136:16)\n    at Context.<anonymous> (tests/security/api-key-security.test.js:232:39)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "6c3181df-f014-4964-b05a-b7d56acf8999",
                  "parentUUID": "2968bd15-7d02-42d9-ae5e-3f2f14649052",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should sanitize file paths to prevent path traversal",
                  "fullTitle": "App Security Input sanitization should sanitize file paths to prevent path traversal",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Import the sanitization module\nconst { sanitizePath } = require('../../src/services/security/input-sanitizer');\n// Test potentially malicious paths\nconst malicious = '../../../etc/passwd';\nconst sanitized = sanitizePath(malicious);\n// Should remove directory traversal\nexpect(sanitized).to.not.include('../');",
                  "err": {
                    "message": "Error: Cannot find module '../../src/services/security/input-sanitizer'\nRequire stack:\n- /Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/security/api-key-security.test.js",
                    "estack": "Error: Cannot find module '../../src/services/security/input-sanitizer'\nRequire stack:\n- /Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/security/api-key-security.test.js\n    at Function._resolveFilename (node:internal/modules/cjs/loader:1225:15)\n    at Function._load (node:internal/modules/cjs/loader:1055:27)\n    at TracingChannel.traceSync (node:diagnostics_channel:322:14)\n    at wrapModuleLoad (node:internal/modules/cjs/loader:220:24)\n    at Module.require (node:internal/modules/cjs/loader:1311:12)\n    at require (node:internal/modules/helpers:136:16)\n    at Context.<anonymous> (tests/security/api-key-security.test.js:244:38)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "c46508db-c9a4-4256-b19c-aa7643c7dad9",
                  "parentUUID": "2968bd15-7d02-42d9-ae5e-3f2f14649052",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "6c3181df-f014-4964-b05a-b7d56acf8999",
                "c46508db-c9a4-4256-b19c-aa7643c7dad9"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "f439e209-9857-4026-8aae-94a5917641ba",
              "title": "Content Security Policy",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/security/api-key-security.test.js",
              "file": "/tests/security/api-key-security.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate CSP headers",
                  "fullTitle": "App Security Content Security Policy should validate CSP headers",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Import the CSP module\nconst { getCSPHeaders } = require('../../src/services/security/content-security');\nconst headers = getCSPHeaders();\n// Should have required CSP directives\nexpect(headers['Content-Security-Policy']).to.include(\"default-src 'self'\");\nexpect(headers['Content-Security-Policy']).to.include(\"script-src 'self'\");",
                  "err": {
                    "message": "Error: Cannot find module '../../src/services/security/content-security'\nRequire stack:\n- /Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/security/api-key-security.test.js",
                    "estack": "Error: Cannot find module '../../src/services/security/content-security'\nRequire stack:\n- /Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/security/api-key-security.test.js\n    at Function._resolveFilename (node:internal/modules/cjs/loader:1225:15)\n    at Function._load (node:internal/modules/cjs/loader:1055:27)\n    at TracingChannel.traceSync (node:diagnostics_channel:322:14)\n    at wrapModuleLoad (node:internal/modules/cjs/loader:220:24)\n    at Module.require (node:internal/modules/cjs/loader:1311:12)\n    at require (node:internal/modules/helpers:136:16)\n    at Context.<anonymous> (tests/security/api-key-security.test.js:258:39)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "107fb483-c51a-4d9a-8340-2324237cffad",
                  "parentUUID": "f439e209-9857-4026-8aae-94a5917641ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "107fb483-c51a-4d9a-8340-2324237cffad"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "10fed9dc-239e-4561-9e0f-44147099bb4c",
              "title": "Secure storage",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/security/api-key-security.test.js",
              "file": "/tests/security/api-key-security.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should use secure storage for sensitive data",
                  "fullTitle": "App Security Secure storage should use secure storage for sensitive data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Import the secure storage module\nconst SecureStorage = require('../../src/services/security/secure-storage');\nconst secureStorage = new SecureStorage();\n// Test storing sensitive data\nconst testData = { username: 'test', password: 'secret' };\nsecureStorage.storeSecurely('credentials', testData);\n// Verify data is not stored in plain text\nconst storedData = secureStorage.retrieveSecurely('credentials');\n// Data should be retrieved correctly\nexpect(storedData).to.deep.equal(testData);\n// But internal storage should be encrypted\nexpect(JSON.stringify(secureStorage.storage)).to.not.include('secret');",
                  "err": {
                    "message": "Error: Cannot find module '../../src/services/security/secure-storage'\nRequire stack:\n- /Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/security/api-key-security.test.js",
                    "estack": "Error: Cannot find module '../../src/services/security/secure-storage'\nRequire stack:\n- /Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/security/api-key-security.test.js\n    at Function._resolveFilename (node:internal/modules/cjs/loader:1225:15)\n    at Function._load (node:internal/modules/cjs/loader:1055:27)\n    at TracingChannel.traceSync (node:diagnostics_channel:322:14)\n    at wrapModuleLoad (node:internal/modules/cjs/loader:220:24)\n    at Module.require (node:internal/modules/cjs/loader:1311:12)\n    at require (node:internal/modules/helpers:136:16)\n    at Context.<anonymous> (tests/security/api-key-security.test.js:271:35)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "42b22c28-15f7-4f42-9cac-49c1e31a03f6",
                  "parentUUID": "10fed9dc-239e-4561-9e0f-44147099bb4c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "42b22c28-15f7-4f42-9cac-49c1e31a03f6"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "44bda08a-e72a-43cc-b0de-8bcded8942ca",
          "title": "Network Security",
          "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/security/api-key-security.test.js",
          "file": "/tests/security/api-key-security.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Network Security\"",
              "fullTitle": "Network Security \"before each\" hook in \"Network Security\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox = sinon.createSandbox();",
              "err": {},
              "uuid": "65ffe0e3-c6a3-4f0e-836a-b8c66730ccee",
              "parentUUID": "44bda08a-e72a-43cc-b0de-8bcded8942ca",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Network Security\"",
              "fullTitle": "Network Security \"after each\" hook in \"Network Security\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore();",
              "err": {},
              "uuid": "706cdff8-a03b-4eb3-87bf-75c24932a9dd",
              "parentUUID": "44bda08a-e72a-43cc-b0de-8bcded8942ca",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "ef1c9942-3bfc-4538-a0ef-84e600eab67a",
              "title": "HTTPS verification",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/security/api-key-security.test.js",
              "file": "/tests/security/api-key-security.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should verify HTTPS certificates by default",
                  "fullTitle": "Network Security HTTPS verification should verify HTTPS certificates by default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Import the HTTP client\nconst HttpClient = require('../../src/services/network/http-client');\n// Create client\nconst client = new HttpClient();\n// Check default config\nexpect(client.config.rejectUnauthorized).to.be.true;",
                  "err": {
                    "message": "Error: Cannot find module '../../src/services/network/http-client'\nRequire stack:\n- /Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/security/api-key-security.test.js",
                    "estack": "Error: Cannot find module '../../src/services/network/http-client'\nRequire stack:\n- /Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/security/api-key-security.test.js\n    at Function._resolveFilename (node:internal/modules/cjs/loader:1225:15)\n    at Function._load (node:internal/modules/cjs/loader:1055:27)\n    at TracingChannel.traceSync (node:diagnostics_channel:322:14)\n    at wrapModuleLoad (node:internal/modules/cjs/loader:220:24)\n    at Module.require (node:internal/modules/cjs/loader:1311:12)\n    at require (node:internal/modules/helpers:136:16)\n    at Context.<anonymous> (tests/security/api-key-security.test.js:305:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "d2f0e470-8316-40a3-8520-bd4b96555b07",
                  "parentUUID": "ef1c9942-3bfc-4538-a0ef-84e600eab67a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect and prevent SSL stripping",
                  "fullTitle": "Network Security HTTPS verification should detect and prevent SSL stripping",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Import the HTTP client\nconst HttpClient = require('../../src/services/network/http-client');\n// Create client\nconst client = new HttpClient();\n// Mock request options\nconst options = {\n    url: 'http://api.example.com', // Non-HTTPS URL\n};\n// Should throw error for non-HTTPS URLs\nexpect(() => client.get(options)).to.throw(/HTTPS required/);",
                  "err": {
                    "message": "Error: Cannot find module '../../src/services/network/http-client'\nRequire stack:\n- /Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/security/api-key-security.test.js",
                    "estack": "Error: Cannot find module '../../src/services/network/http-client'\nRequire stack:\n- /Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/security/api-key-security.test.js\n    at Function._resolveFilename (node:internal/modules/cjs/loader:1225:15)\n    at Function._load (node:internal/modules/cjs/loader:1055:27)\n    at TracingChannel.traceSync (node:diagnostics_channel:322:14)\n    at wrapModuleLoad (node:internal/modules/cjs/loader:220:24)\n    at Module.require (node:internal/modules/cjs/loader:1311:12)\n    at require (node:internal/modules/helpers:136:16)\n    at Context.<anonymous> (tests/security/api-key-security.test.js:316:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "73ba293a-2e47-42d2-a863-db9cba28e86e",
                  "parentUUID": "ef1c9942-3bfc-4538-a0ef-84e600eab67a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "d2f0e470-8316-40a3-8520-bd4b96555b07",
                "73ba293a-2e47-42d2-a863-db9cba28e86e"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "fc63ceaa-c7c6-491b-abbe-2bc457ef8151",
              "title": "Authentication header handling",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/security/api-key-security.test.js",
              "file": "/tests/security/api-key-security.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should safely handle authentication headers",
                  "fullTitle": "Network Security Authentication header handling should safely handle authentication headers",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Import the HTTP client\nconst HttpClient = require('../../src/services/network/http-client');\n// Create client\nconst client = new HttpClient();\n// Mock logging function\nconst originalLog = console.log;\nconst logs = [];\nconsole.log = (message) => logs.push(message);\n// Make request with auth header\nclient.get({\n    url: 'https://api.example.com',\n    headers: {\n        'Authorization': 'Bearer secret-token-value'\n    }\n}).catch(() => { }); // Ignore actual network error\n// Restore console.log\nconsole.log = originalLog;\n// Check that auth header value is not logged\nconst hasAuthHeaderValue = logs.some(log => log.includes('secret-token-value'));\nexpect(hasAuthHeaderValue).to.be.false;",
                  "err": {
                    "message": "Error: Cannot find module '../../src/services/network/http-client'\nRequire stack:\n- /Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/security/api-key-security.test.js",
                    "estack": "Error: Cannot find module '../../src/services/network/http-client'\nRequire stack:\n- /Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/security/api-key-security.test.js\n    at Function._resolveFilename (node:internal/modules/cjs/loader:1225:15)\n    at Function._load (node:internal/modules/cjs/loader:1055:27)\n    at TracingChannel.traceSync (node:diagnostics_channel:322:14)\n    at wrapModuleLoad (node:internal/modules/cjs/loader:220:24)\n    at Module.require (node:internal/modules/cjs/loader:1311:12)\n    at require (node:internal/modules/helpers:136:16)\n    at Context.<anonymous> (tests/security/api-key-security.test.js:334:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "84c115ae-2489-4941-a209-4ea01b4e37b4",
                  "parentUUID": "fc63ceaa-c7c6-491b-abbe-2bc457ef8151",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "84c115ae-2489-4941-a209-4ea01b4e37b4"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "09f9802f-b177-4778-9766-7053d4d1bb39",
          "title": "Complete Translation Pipeline",
          "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/core/complete-pipeline.test.js",
          "file": "/tests/unit/core/complete-pipeline.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook for \"should initialize pipeline with default settings\"",
              "fullTitle": "Complete Translation Pipeline \"before each\" hook for \"should initialize pipeline with default settings\"",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Create mocks for all dependencies\nmockAudioManager = {\n  startCapture: sinon.stub(),\n  stopCapture: sinon.stub(),\n  setInputDevice: sinon.stub(),\n  setOutputDevice: sinon.stub(),\n  getAudioDevices: sinon.stub(),\n  isCapturing: sinon.stub().returns(false)\n};\nmockTranslationManager = {\n  translate: sinon.stub(),\n  setSourceLanguage: sinon.stub(),\n  setTargetLanguage: sinon.stub(),\n  setService: sinon.stub(),\n  getSupportedLanguages: sinon.stub(),\n  getAvailableServices: sinon.stub()\n};\nmockSTTManager = {\n  transcribe: sinon.stub(),\n  setLanguage: sinon.stub(),\n  setService: sinon.stub(),\n  isListening: sinon.stub().returns(false)\n};\nmockTTSManager = {\n  synthesize: sinon.stub(),\n  setVoice: sinon.stub(),\n  setLanguage: sinon.stub(),\n  setService: sinon.stub(),\n  playAudio: sinon.stub()\n};\nmockPlatformDetector = {\n  detectActiveApps: sinon.stub(),\n  configureAudioRouting: sinon.stub(),\n  getSupportedApps: sinon.stub(),\n  isMonitoring: sinon.stub().returns(false)\n};\nmockLogger = {\n  info: sinon.stub(),\n  error: sinon.stub(),\n  warn: sinon.stub(),\n  debug: sinon.stub()\n};\n// Mock the complete pipeline\ncompletePipeline = proxyquire('../../../src/core/complete-pipeline', {\n  '../audio/AudioManager': mockAudioManager,\n  '../services/translation/translation-manager': mockTranslationManager,\n  '../services/stt/STTManager': mockSTTManager,\n  '../services/tts/TTSManager': mockTTSManager,\n  '../services/platform-detector': mockPlatformDetector,\n  '../utils/logger': mockLogger\n});",
              "err": {
                "message": "Error: Cannot find module '../services/stt/stt-manager' from '/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/src/core'",
                "estack": "Error: Cannot find module '../services/stt/stt-manager' from '/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/src/core'\n    at Function.resolveSync [as sync] (node_modules/resolve/lib/sync.js:111:15)\n    at Proxyquire._resolveModule (node_modules/proxyquire/lib/proxyquire.js:137:20)\n    at Proxyquire._require (node_modules/proxyquire/lib/proxyquire.js:179:27)\n    at require (node:internal/modules/helpers:136:16)\n    at Object.<anonymous> (src/core/complete-pipeline.js:6:20)\n    at Module._compile (node:internal/modules/cjs/loader:1554:14)\n    at Object..js (node:internal/modules/cjs/loader:1706:10)\n    at require.extensions.<computed> (node_modules/proxyquire/lib/proxyquire.js:311:43)\n    at Module.load (node:internal/modules/cjs/loader:1289:32)\n    at Function._load (node:internal/modules/cjs/loader:1108:12)\n    at TracingChannel.traceSync (node:diagnostics_channel:322:14)\n    at wrapModuleLoad (node:internal/modules/cjs/loader:220:24)\n    at Module.require (node:internal/modules/cjs/loader:1311:12)\n    at Proxyquire._withoutCache (node_modules/proxyquire/lib/proxyquire.js:222:12)\n    at Proxyquire.load (node_modules/proxyquire/lib/proxyquire.js:129:15)\n    at Context.<anonymous> (tests/unit/core/complete-pipeline.test.js:64:24)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "6a004bb0-318c-46e2-a494-55bd23e8c930",
              "parentUUID": "09f9802f-b177-4778-9766-7053d4d1bb39",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Complete Translation Pipeline\"",
              "fullTitle": "Complete Translation Pipeline \"after each\" hook in \"Complete Translation Pipeline\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "bb10ab80-6fa3-46cc-a2fb-c07f6c6abc07",
              "parentUUID": "09f9802f-b177-4778-9766-7053d4d1bb39",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "dcc62906-0eb4-4db9-9179-9dc0f3da7729",
              "title": "Initialization",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/core/complete-pipeline.test.js",
              "file": "/tests/unit/core/complete-pipeline.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should initialize pipeline with default settings",
                  "fullTitle": "Complete Translation Pipeline Initialization should initialize pipeline with default settings",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pipeline = new completePipeline.CompletePipeline();\n\nexpect(pipeline).to.be.an('object');\nexpect(pipeline.isRunning).to.be.false;\nexpect(pipeline.config).to.be.an('object');",
                  "err": {},
                  "uuid": "fed7370b-d6d8-4ee0-9d2a-715820de5304",
                  "parentUUID": "dcc62906-0eb4-4db9-9179-9dc0f3da7729",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should initialize with custom configuration",
                  "fullTitle": "Complete Translation Pipeline Initialization should initialize with custom configuration",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config = {\n  sourceLanguage: 'en',\n  targetLanguage: 'es',\n  translationService: 'deepl',\n  sttService: 'azure',\n  ttsService: 'azure'\n};\nconst pipeline = new completePipeline.CompletePipeline(config);\n\nexpect(pipeline.config.sourceLanguage).to.equal('en');\nexpect(pipeline.config.targetLanguage).to.equal('es');",
                  "err": {},
                  "uuid": "7d0834c9-6e2c-4a5e-94cf-e7aac7eae1c9",
                  "parentUUID": "dcc62906-0eb4-4db9-9179-9dc0f3da7729",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should validate configuration on initialization",
                  "fullTitle": "Complete Translation Pipeline Initialization should validate configuration on initialization",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidConfig = {\n  sourceLanguage: 'invalid',\n  targetLanguage: 'invalid'\n};\nexpect(() => new completePipeline.CompletePipeline(invalidConfig)).to.throw();",
                  "err": {},
                  "uuid": "77f4fb09-496e-4902-b74e-8dcf7643d97d",
                  "parentUUID": "dcc62906-0eb4-4db9-9179-9dc0f3da7729",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "fed7370b-d6d8-4ee0-9d2a-715820de5304",
                "7d0834c9-6e2c-4a5e-94cf-e7aac7eae1c9",
                "77f4fb09-496e-4902-b74e-8dcf7643d97d"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "fbeff00b-82c7-4d05-bcc1-ef71fd00313d",
              "title": "Pipeline Start/Stop",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/core/complete-pipeline.test.js",
              "file": "/tests/unit/core/complete-pipeline.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should start pipeline successfully",
                  "fullTitle": "Complete Translation Pipeline Pipeline Start/Stop should start pipeline successfully",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pipeline = new completePipeline.CompletePipeline();\n\nmockAudioManager.startCapture.resolves();\nmockSTTManager.transcribe.resolves('Hello world');\nmockTranslationManager.translate.resolves('Hola mundo');\nmockTTSManager.synthesize.resolves(Buffer.from('audio data'));\nmockPlatformDetector.detectActiveApps.resolves(['discord']);\nconst result = await pipeline.start();\n\nexpect(result.success).to.be.true;\nexpect(pipeline.isRunning).to.be.true;\nexpect(mockAudioManager.startCapture.called).to.be.true;",
                  "err": {},
                  "uuid": "1771d763-7746-4045-952a-37bae4ca0247",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should stop pipeline successfully",
                  "fullTitle": "Complete Translation Pipeline Pipeline Start/Stop should stop pipeline successfully",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pipeline = new completePipeline.CompletePipeline();\npipeline.isRunning = true;\nmockAudioManager.stopCapture.resolves();\nmockPlatformDetector.detectActiveApps.resolves([]);\nconst result = await pipeline.stop();\n\nexpect(result.success).to.be.true;\nexpect(pipeline.isRunning).to.be.false;\nexpect(mockAudioManager.stopCapture.called).to.be.true;",
                  "err": {},
                  "uuid": "621930da-864d-457b-9468-23226bedbd41",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should handle start errors gracefully",
                  "fullTitle": "Complete Translation Pipeline Pipeline Start/Stop should handle start errors gracefully",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pipeline = new completePipeline.CompletePipeline();\n\nmockAudioManager.startCapture.rejects(new Error('Audio capture failed'));\nconst result = await pipeline.start();\n\nexpect(result.success).to.be.false;\nexpect(result.error).to.include('Audio capture failed');\nexpect(pipeline.isRunning).to.be.false;",
                  "err": {},
                  "uuid": "d7448d00-c386-4f19-8ca4-85579c91dd3b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should prevent multiple starts",
                  "fullTitle": "Complete Translation Pipeline Pipeline Start/Stop should prevent multiple starts",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pipeline = new completePipeline.CompletePipeline();\npipeline.isRunning = true;\nconst result = await pipeline.start();\n\nexpect(result.success).to.be.false;\nexpect(result.error).to.include('already running');",
                  "err": {},
                  "uuid": "74e16492-95dc-4d36-9d4d-7837f5c8fa57",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "1771d763-7746-4045-952a-37bae4ca0247",
                "621930da-864d-457b-9468-23226bedbd41",
                "d7448d00-c386-4f19-8ca4-85579c91dd3b",
                "74e16492-95dc-4d36-9d4d-7837f5c8fa57"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "4a0cea3e-75a7-427d-aadf-5d5d0abc2d9a",
              "title": "Audio Processing",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/core/complete-pipeline.test.js",
              "file": "/tests/unit/core/complete-pipeline.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should process audio input correctly",
                  "fullTitle": "Complete Translation Pipeline Audio Processing should process audio input correctly",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pipeline = new completePipeline.CompletePipeline();\npipeline.isRunning = true;\nconst audioData = Buffer.from('test audio data');\nmockSTTManager.transcribe.resolves('Hello world');\nmockTranslationManager.translate.resolves('Hola mundo');\nmockTTSManager.synthesize.resolves(Buffer.from('translated audio'));\nconst result = await pipeline.processAudio(audioData);\n\nexpect(result.success).to.be.true;\nexpect(result.transcription).to.equal('Hello world');\nexpect(result.translation).to.equal('Hola mundo');\nexpect(mockSTTManager.transcribe.calledWith(audioData)).to.be.true;",
                  "err": {},
                  "uuid": "61438697-d7a8-4358-87bf-698423cad800",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should handle audio processing errors",
                  "fullTitle": "Complete Translation Pipeline Audio Processing should handle audio processing errors",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pipeline = new completePipeline.CompletePipeline();\npipeline.isRunning = true;\nconst audioData = Buffer.from('test audio data');\nmockSTTManager.transcribe.rejects(new Error('STT failed'));\nconst result = await pipeline.processAudio(audioData);\n\nexpect(result.success).to.be.false;\nexpect(result.error).to.include('STT failed');",
                  "err": {},
                  "uuid": "dc6d49aa-c417-4ceb-8e9a-696bfb0c2867",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should handle empty audio data",
                  "fullTitle": "Complete Translation Pipeline Audio Processing should handle empty audio data",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pipeline = new completePipeline.CompletePipeline();\npipeline.isRunning = true;\nconst result = await pipeline.processAudio(Buffer.alloc(0));\n\nexpect(result.success).to.be.false;\nexpect(result.error).to.include('empty audio data');",
                  "err": {},
                  "uuid": "0c2239e6-599d-40ef-ae8e-d56c8d07a7de",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "61438697-d7a8-4358-87bf-698423cad800",
                "dc6d49aa-c417-4ceb-8e9a-696bfb0c2867",
                "0c2239e6-599d-40ef-ae8e-d56c8d07a7de"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "f794cc3f-ec38-4aa3-a2cd-0c4603f3b2ea",
              "title": "Translation Pipeline",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/core/complete-pipeline.test.js",
              "file": "/tests/unit/core/complete-pipeline.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should translate text correctly",
                  "fullTitle": "Complete Translation Pipeline Translation Pipeline should translate text correctly",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pipeline = new completePipeline.CompletePipeline();\n\nmockTranslationManager.translate.resolves('Hola mundo');\nmockTTSManager.synthesize.resolves(Buffer.from('audio data'));\nconst result = await pipeline.translateText('Hello world');\n\nexpect(result.success).to.be.true;\nexpect(result.translation).to.equal('Hola mundo');\nexpect(result.audio).to.be.instanceOf(Buffer);",
                  "err": {},
                  "uuid": "ed5e8a61-4c14-4185-83b3-280133dc7478",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should handle translation errors",
                  "fullTitle": "Complete Translation Pipeline Translation Pipeline should handle translation errors",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pipeline = new completePipeline.CompletePipeline();\n\nmockTranslationManager.translate.rejects(new Error('Translation failed'));\nconst result = await pipeline.translateText('Hello world');\n\nexpect(result.success).to.be.false;\nexpect(result.error).to.include('Translation failed');",
                  "err": {},
                  "uuid": "97b6b662-5451-4230-b507-b866c58c5937",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should use fallback services",
                  "fullTitle": "Complete Translation Pipeline Translation Pipeline should use fallback services",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pipeline = new completePipeline.CompletePipeline();\n\nmockTranslationManager.translate.onFirstCall().rejects(new Error('Primary service failed'));\nmockTranslationManager.translate.onSecondCall().resolves('Hola mundo');\nmockTTSManager.synthesize.resolves(Buffer.from('audio data'));\nconst result = await pipeline.translateText('Hello world');\n\nexpect(result.success).to.be.true;\nexpect(result.translation).to.equal('Hola mundo');",
                  "err": {},
                  "uuid": "64d8bfb0-1beb-4036-ad61-92d3af1d44d3",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "ed5e8a61-4c14-4185-83b3-280133dc7478",
                "97b6b662-5451-4230-b507-b866c58c5937",
                "64d8bfb0-1beb-4036-ad61-92d3af1d44d3"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "db302609-6d3f-4cf3-9b80-67fa688b82e0",
              "title": "Platform Integration",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/core/complete-pipeline.test.js",
              "file": "/tests/unit/core/complete-pipeline.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should detect active communication apps",
                  "fullTitle": "Complete Translation Pipeline Platform Integration should detect active communication apps",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pipeline = new completePipeline.CompletePipeline();\n\nmockPlatformDetector.detectActiveApps.resolves(['discord', 'zoom']);\nconst result = await pipeline.detectActiveApps();\n\nexpect(result.success).to.be.true;\nexpect(result.apps).to.include('discord');\nexpect(result.apps).to.include('zoom');",
                  "err": {},
                  "uuid": "384bd1cc-7699-4425-8e97-5cbd3b866eca",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should configure audio routing for detected apps",
                  "fullTitle": "Complete Translation Pipeline Platform Integration should configure audio routing for detected apps",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pipeline = new completePipeline.CompletePipeline();\n\nmockPlatformDetector.configureAudioRouting.resolves();\nconst result = await pipeline.configureAudioRouting(['discord']);\n\nexpect(result.success).to.be.true;\nexpect(mockPlatformDetector.configureAudioRouting.calledWith(['discord'])).to.be.true;",
                  "err": {},
                  "uuid": "28c8df35-cabe-474d-b68d-541754986ccf",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should handle platform detection errors",
                  "fullTitle": "Complete Translation Pipeline Platform Integration should handle platform detection errors",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pipeline = new completePipeline.CompletePipeline();\n\nmockPlatformDetector.detectActiveApps.rejects(new Error('Detection failed'));\nconst result = await pipeline.detectActiveApps();\n\nexpect(result.success).to.be.false;\nexpect(result.error).to.include('Detection failed');",
                  "err": {},
                  "uuid": "6acec1c6-a053-48ab-8510-f759ece5883b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "384bd1cc-7699-4425-8e97-5cbd3b866eca",
                "28c8df35-cabe-474d-b68d-541754986ccf",
                "6acec1c6-a053-48ab-8510-f759ece5883b"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "0de41997-edbc-457c-ad80-6629e45eba89",
              "title": "Configuration Management",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/core/complete-pipeline.test.js",
              "file": "/tests/unit/core/complete-pipeline.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update configuration",
                  "fullTitle": "Complete Translation Pipeline Configuration Management should update configuration",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pipeline = new completePipeline.CompletePipeline();\n\nconst newConfig = {\n  sourceLanguage: 'fr',\n  targetLanguage: 'de',\n  translationService: 'google'\n};\nconst result = pipeline.updateConfiguration(newConfig);\n\nexpect(result.success).to.be.true;\nexpect(pipeline.config.sourceLanguage).to.equal('fr');\nexpect(pipeline.config.targetLanguage).to.equal('de');",
                  "err": {},
                  "uuid": "99af56e4-e0cd-44c5-9ca8-659832f49306",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should validate configuration updates",
                  "fullTitle": "Complete Translation Pipeline Configuration Management should validate configuration updates",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pipeline = new completePipeline.CompletePipeline();\n\nconst invalidConfig = {\n  sourceLanguage: 'invalid'\n};\nconst result = pipeline.updateConfiguration(invalidConfig);\n\nexpect(result.success).to.be.false;\nexpect(result.error).to.include('invalid');",
                  "err": {},
                  "uuid": "215aa066-722b-4291-8dd2-402a27d9bc3c",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should get current configuration",
                  "fullTitle": "Complete Translation Pipeline Configuration Management should get current configuration",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pipeline = new completePipeline.CompletePipeline();\n\nconst config = pipeline.getConfiguration();\n\nexpect(config).to.be.an('object');\nexpect(config).to.have.property('sourceLanguage');\nexpect(config).to.have.property('targetLanguage');",
                  "err": {},
                  "uuid": "7cee67ab-2b40-4acb-a106-23dd025faa23",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "99af56e4-e0cd-44c5-9ca8-659832f49306",
                "215aa066-722b-4291-8dd2-402a27d9bc3c",
                "7cee67ab-2b40-4acb-a106-23dd025faa23"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "9168d639-f44a-4c08-8aa3-88b569dde0cd",
              "title": "Status and Monitoring",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/core/complete-pipeline.test.js",
              "file": "/tests/unit/core/complete-pipeline.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get pipeline status",
                  "fullTitle": "Complete Translation Pipeline Status and Monitoring should get pipeline status",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pipeline = new completePipeline.CompletePipeline();\npipeline.isRunning = true;\nconst status = pipeline.getStatus();\n\nexpect(status.isRunning).to.be.true;\nexpect(status).to.have.property('uptime');\nexpect(status).to.have.property('processedAudio');\nexpect(status).to.have.property('translations');",
                  "err": {},
                  "uuid": "087fd8c5-494e-4fff-beae-1b8ee936ae72",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should get performance metrics",
                  "fullTitle": "Complete Translation Pipeline Status and Monitoring should get performance metrics",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pipeline = new completePipeline.CompletePipeline();\n\nconst metrics = pipeline.getPerformanceMetrics();\n\nexpect(metrics).to.be.an('object');\nexpect(metrics).to.have.property('averageLatency');\nexpect(metrics).to.have.property('successRate');\nexpect(metrics).to.have.property('errorRate');",
                  "err": {},
                  "uuid": "121c89af-4186-4a8b-bf8d-a270a51857c5",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should reset metrics",
                  "fullTitle": "Complete Translation Pipeline Status and Monitoring should reset metrics",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pipeline = new completePipeline.CompletePipeline();\n\nconst result = pipeline.resetMetrics();\n\nexpect(result.success).to.be.true;",
                  "err": {},
                  "uuid": "2e9859fb-4f7a-4127-ac6b-ecd974f0446e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "087fd8c5-494e-4fff-beae-1b8ee936ae72",
                "121c89af-4186-4a8b-bf8d-a270a51857c5",
                "2e9859fb-4f7a-4127-ac6b-ecd974f0446e"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "a6a60cb8-75e9-426d-84af-863bd0b5e822",
              "title": "Error Handling and Recovery",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/core/complete-pipeline.test.js",
              "file": "/tests/unit/core/complete-pipeline.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle service failures gracefully",
                  "fullTitle": "Complete Translation Pipeline Error Handling and Recovery should handle service failures gracefully",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pipeline = new completePipeline.CompletePipeline();\n\nmockTranslationManager.translate.rejects(new Error('Service unavailable'));\nmockTTSManager.synthesize.rejects(new Error('TTS failed'));\nconst result = await pipeline.translateText('Hello world');\n\nexpect(result.success).to.be.false;\nexpect(result.error).to.include('Service unavailable');",
                  "err": {},
                  "uuid": "3285b244-c178-43b3-bb9b-29c9505e7b49",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should attempt recovery from errors",
                  "fullTitle": "Complete Translation Pipeline Error Handling and Recovery should attempt recovery from errors",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pipeline = new completePipeline.CompletePipeline();\n\nmockTranslationManager.translate.onFirstCall().rejects(new Error('Temporary error'));\nmockTranslationManager.translate.onSecondCall().resolves('Hola mundo');\nmockTTSManager.synthesize.resolves(Buffer.from('audio data'));\nconst result = await pipeline.translateText('Hello world');\n\nexpect(result.success).to.be.true;\nexpect(result.translation).to.equal('Hola mundo');",
                  "err": {},
                  "uuid": "9de78708-bc57-4368-b612-e05f9b28ebf0",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should log errors appropriately",
                  "fullTitle": "Complete Translation Pipeline Error Handling and Recovery should log errors appropriately",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pipeline = new completePipeline.CompletePipeline();\n\nmockTranslationManager.translate.rejects(new Error('Test error'));\nawait pipeline.translateText('Hello world');\n\nexpect(mockLogger.error.called).to.be.true;",
                  "err": {},
                  "uuid": "6ddef56c-e7ef-4bf1-a730-dd67cc7b153d",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "3285b244-c178-43b3-bb9b-29c9505e7b49",
                "9de78708-bc57-4368-b612-e05f9b28ebf0",
                "6ddef56c-e7ef-4bf1-a730-dd67cc7b153d"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "1b94ec08-39c2-40b4-8d19-9c6a7da48c2c",
              "title": "Resource Management",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/core/complete-pipeline.test.js",
              "file": "/tests/unit/core/complete-pipeline.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should cleanup resources on stop",
                  "fullTitle": "Complete Translation Pipeline Resource Management should cleanup resources on stop",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pipeline = new completePipeline.CompletePipeline();\npipeline.isRunning = true;\nmockAudioManager.stopCapture.resolves();\nmockPlatformDetector.detectActiveApps.resolves([]);\nconst result = await pipeline.stop();\n\nexpect(result.success).to.be.true;\nexpect(mockAudioManager.stopCapture.called).to.be.true;",
                  "err": {},
                  "uuid": "3c2ca4bf-834e-4161-ad6b-d8c2ae84f911",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should handle cleanup errors",
                  "fullTitle": "Complete Translation Pipeline Resource Management should handle cleanup errors",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pipeline = new completePipeline.CompletePipeline();\npipeline.isRunning = true;\nmockAudioManager.stopCapture.rejects(new Error('Cleanup failed'));\nconst result = await pipeline.stop();\n\nexpect(result.success).to.be.false;\nexpect(result.error).to.include('Cleanup failed');",
                  "err": {},
                  "uuid": "1fc8d604-3418-4cb9-9fb6-97bd1963dfdb",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "3c2ca4bf-834e-4161-ad6b-d8c2ae84f911",
                "1fc8d604-3418-4cb9-9fb6-97bd1963dfdb"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "a6d1e786-572d-444b-b86a-d6dfdc82abe2",
          "title": "Translation Error Handling",
          "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/error-handling/translation-error-handling.test.js",
          "file": "/tests/unit/services/error-handling/translation-error-handling.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook for \"should handle all services failing\"",
              "fullTitle": "Translation Error Handling \"before each\" hook for \"should handle all services failing\"",
              "timedOut": false,
              "duration": 364,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "sandbox = createTestSandbox();\n// Create translation manager with mock services\ntranslationManager = new TranslationManager();\ntranslationManager.services = createMockServices();\n// Initialize\nawait translationManager.initialize();",
              "err": {
                "message": "TypeError: this.languagePairOptimizer.initialize is not a function",
                "estack": "TypeError: this.languagePairOptimizer.initialize is not a function\n    at TranslationManager.initialize (src/services/translation/translation-manager.js:79:46)\n    at async Context.<anonymous> (tests/unit/services/error-handling/translation-error-handling.test.js:22:9)",
                "diff": null
              },
              "uuid": "aeddb114-e1e5-4eb5-9570-227e25161fe8",
              "parentUUID": "a6d1e786-572d-444b-b86a-d6dfdc82abe2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Translation Error Handling\"",
              "fullTitle": "Translation Error Handling \"after each\" hook in \"Translation Error Handling\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore();\nif (translationManager) translationManager.destroy();",
              "err": {},
              "uuid": "450ed480-d623-4d81-941d-bd892c6da6b5",
              "parentUUID": "a6d1e786-572d-444b-b86a-d6dfdc82abe2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "bc61aff3-3bf8-4307-bd4f-6150e0e55a04",
              "title": "Service failure handling",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/error-handling/translation-error-handling.test.js",
              "file": "/tests/unit/services/error-handling/translation-error-handling.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle all services failing",
                  "fullTitle": "Translation Error Handling Service failure handling should handle all services failing",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Make all services fail\nfor (const service of Object.keys(translationManager.services)) {\n    sandbox.stub(translationManager.services[service], 'translate').rejects(\n        new Error(`${service} service error`)\n    );\n}\n// Try to translate\nconst result = await translationManager.translate('Hello world', 'en', 'es');\n// Should report failure\nexpect(result.success).to.be.false;\nexpect(result.error).to.exist;\nexpect(result.failedServices).to.be.an('array');\nexpect(result.failedServices.length).to.be.greaterThan(0);",
                  "err": {},
                  "uuid": "b8300a4f-49e0-49c6-9de6-f185d2b18ce4",
                  "parentUUID": "bc61aff3-3bf8-4307-bd4f-6150e0e55a04",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should use fallback when primary service fails",
                  "fullTitle": "Translation Error Handling Service failure handling should use fallback when primary service fails",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Make primary service fail but leave fallbacks working\nconst primaryService = 'deepl';\nsandbox.stub(translationManager.languagePairOptimizer, 'getBestServiceForLanguagePair')\n    .returns(primaryService);\n// Make primary service fail\nsandbox.stub(translationManager.services[primaryService], 'translate').rejects(\n    new Error('Service temporarily unavailable')\n);\n// Try to translate\nconst result = await translationManager.translate('Hello world', 'en', 'es');\n// Should succeed using a fallback\nexpect(result.success).to.be.true;\nexpect(result.service).to.not.equal(primaryService);\nexpect(result.usedFallback).to.be.true;",
                  "err": {},
                  "uuid": "5b3df8e2-1afc-4656-b2e4-8748f148242a",
                  "parentUUID": "bc61aff3-3bf8-4307-bd4f-6150e0e55a04",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should handle intermittent failures",
                  "fullTitle": "Translation Error Handling Service failure handling should handle intermittent failures",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Simulate service that fails half the time\nconst mockService = translationManager.services.deepl;\nlet callCount = 0;\nsandbox.stub(mockService, 'translate').callsFake(async (text, fromLang, toLang) => {\n    callCount++;\n    if (callCount % 2 === 1) {\n        throw new Error('Intermittent failure');\n    }\n    return {\n        translation: 'Hola mundo',\n        confidence: 0.9\n    };\n});\n// Force using this service\nsandbox.stub(translationManager.languagePairOptimizer, 'getBestServiceForLanguagePair')\n    .returns('deepl');\n// First call should fail, retry should succeed\nconst result = await translationManager.translate('Hello world', 'en', 'es', {\n    retry: true, // Enable retry\n    maxRetries: 3\n});\n// Should succeed after retry\nexpect(result.success).to.be.true;\nexpect(result.translation).to.equal('Hola mundo');\nexpect(result.retryCount).to.be.greaterThan(0);",
                  "err": {},
                  "uuid": "a728534f-d764-4175-acc6-1447788a5724",
                  "parentUUID": "bc61aff3-3bf8-4307-bd4f-6150e0e55a04",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "b8300a4f-49e0-49c6-9de6-f185d2b18ce4",
                "5b3df8e2-1afc-4656-b2e4-8748f148242a",
                "a728534f-d764-4175-acc6-1447788a5724"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "cd423523-1655-4077-b543-a0e8dca7b691",
              "title": "Invalid input handling",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/error-handling/translation-error-handling.test.js",
              "file": "/tests/unit/services/error-handling/translation-error-handling.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle empty text input",
                  "fullTitle": "Translation Error Handling Invalid input handling should handle empty text input",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await translationManager.translate('', 'en', 'es');\n// Should return quickly without calling services\nexpect(result.success).to.be.true;\nexpect(result.translation).to.equal('');\nexpect(result.skipped).to.be.true;",
                  "err": {},
                  "uuid": "3e1a31b1-44b0-4d9a-a757-bc9cf66f4fb9",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should handle invalid language codes",
                  "fullTitle": "Translation Error Handling Invalid input handling should handle invalid language codes",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await translationManager.translate('Hello world', 'invalid', 'es');\n// Should fail with error\nexpect(result.success).to.be.false;\nexpect(result.error).to.include('language code');",
                  "err": {},
                  "uuid": "b0a8890b-9cfe-45c5-9827-fb4fec2825e5",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should handle very long input text",
                  "fullTitle": "Translation Error Handling Invalid input handling should handle very long input text",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Generate a very long text (50KB)\nconst longText = 'A'.repeat(50000);\n// Mock services to return truncated response\nfor (const service of Object.keys(translationManager.services)) {\n    sandbox.stub(translationManager.services[service], 'translate').callsFake(\n        async (text, fromLang, toLang) => {\n            // Simulate truncation\n            return {\n                translation: 'Truncated translation',\n                confidence: 0.7,\n                truncated: true\n            };\n        }\n    );\n}\nconst result = await translationManager.translate(longText, 'en', 'es');\n// Should succeed but indicate truncation\nexpect(result.success).to.be.true;\nexpect(result.truncated).to.be.true;",
                  "err": {},
                  "uuid": "7015fe77-b708-4d27-8026-ac18fc1e00f1",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should handle unsupported language pairs",
                  "fullTitle": "Translation Error Handling Invalid input handling should handle unsupported language pairs",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mock unsupported language detection\nsandbox.stub(translationManager, 'isLanguagePairSupported').returns(false);\nconst result = await translationManager.translate('Hello', 'en', 'xx');\n// Should fail with appropriate error\nexpect(result.success).to.be.false;\nexpect(result.error).to.include('unsupported');",
                  "err": {},
                  "uuid": "6439a819-145d-44ca-a094-6abdfbc83cb5",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "3e1a31b1-44b0-4d9a-a757-bc9cf66f4fb9",
                "b0a8890b-9cfe-45c5-9827-fb4fec2825e5",
                "7015fe77-b708-4d27-8026-ac18fc1e00f1",
                "6439a819-145d-44ca-a094-6abdfbc83cb5"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "a6776ce6-85e5-4f2a-9155-bed0fcfd7ed0",
              "title": "Network error handling",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/error-handling/translation-error-handling.test.js",
              "file": "/tests/unit/services/error-handling/translation-error-handling.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle timeout errors",
                  "fullTitle": "Translation Error Handling Network error handling should handle timeout errors",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stub services to time out\nfor (const service of Object.keys(translationManager.services)) {\n    sandbox.stub(translationManager.services[service], 'translate').callsFake(\n        async () => {\n            // Simulate timeout\n            await new Promise(resolve => setTimeout(resolve, 100));\n            throw new Error('Request timed out');\n        }\n    );\n}\n// Set a very short timeout\nconst result = await translationManager.translate('Hello world', 'en', 'es', {\n    timeout: 50 // 50ms timeout (shorter than simulated delay)\n});\n// Should fail with timeout error\nexpect(result.success).to.be.false;\nexpect(result.error).to.include('timed out');",
                  "err": {},
                  "uuid": "05b1d4c1-ac60-4ff8-82ae-8a5c2fe59e22",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should handle rate limit errors",
                  "fullTitle": "Translation Error Handling Network error handling should handle rate limit errors",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stub services to return rate limit errors\nfor (const service of Object.keys(translationManager.services)) {\n    sandbox.stub(translationManager.services[service], 'translate').callsFake(\n        async () => {\n            const error = new Error('Rate limit exceeded');\n            error.code = 429; // Rate limit status code\n            throw error;\n        }\n    );\n}\nconst result = await translationManager.translate('Hello world', 'en', 'es');\n// Should fail with rate limit error\nexpect(result.success).to.be.false;\nexpect(result.error).to.include('rate limit');\nexpect(result.rateLimited).to.be.true;",
                  "err": {},
                  "uuid": "8f78bd26-688c-4601-b6d9-f363cc7959a5",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should handle network connectivity errors",
                  "fullTitle": "Translation Error Handling Network error handling should handle network connectivity errors",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stub services to return network errors\nfor (const service of Object.keys(translationManager.services)) {\n    sandbox.stub(translationManager.services[service], 'translate').callsFake(\n        async () => {\n            const error = new Error('Network error');\n            error.code = 'ENOTFOUND'; // DNS lookup failure\n            throw error;\n        }\n    );\n}\nconst result = await translationManager.translate('Hello world', 'en', 'es');\n// Should fail with network error\nexpect(result.success).to.be.false;\nexpect(result.error).to.include('network');",
                  "err": {},
                  "uuid": "56a920f2-9e7c-4415-b373-7b7a89a5743f",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "05b1d4c1-ac60-4ff8-82ae-8a5c2fe59e22",
                "8f78bd26-688c-4601-b6d9-f363cc7959a5",
                "56a920f2-9e7c-4415-b373-7b7a89a5743f"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "b56e5375-78a1-416b-b0aa-265cbaa43607",
              "title": "Error recovery",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/error-handling/translation-error-handling.test.js",
              "file": "/tests/unit/services/error-handling/translation-error-handling.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should recover automatically when service becomes available again",
                  "fullTitle": "Translation Error Handling Error recovery should recover automatically when service becomes available again",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Service that fails first time but succeeds second time\nconst mockService = translationManager.services.deepl;\nlet callCount = 0;\nsandbox.stub(mockService, 'translate').callsFake(async (text, fromLang, toLang) => {\n    callCount++;\n    if (callCount === 1) {\n        throw new Error('Service temporarily unavailable');\n    }\n    return {\n        translation: 'Hola mundo',\n        confidence: 0.9\n    };\n});\n// Force using this service\nsandbox.stub(translationManager.languagePairOptimizer, 'getBestServiceForLanguagePair')\n    .returns('deepl');\n// First translation should fail\nconst result1 = await translationManager.translate('Hello world', 'en', 'es', {\n    retry: false // Disable retry to simulate failure\n});\nexpect(result1.success).to.be.false;\n// Second translation should succeed\nconst result2 = await translationManager.translate('Hello world', 'en', 'es');\nexpect(result2.success).to.be.true;\nexpect(result2.translation).to.equal('Hola mundo');",
                  "err": {},
                  "uuid": "bcd2e664-b2da-4558-8d86-9ea1195372d6",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should update service health status on failures",
                  "fullTitle": "Translation Error Handling Error recovery should update service health status on failures",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mock service that always fails\nconst mockService = translationManager.services.deepl;\nsandbox.stub(mockService, 'translate').rejects(new Error('Service error'));\n// Force using this service\nsandbox.stub(translationManager.languagePairOptimizer, 'getBestServiceForLanguagePair')\n    .returns('deepl');\n// Try to translate (will fail)\nawait translationManager.translate('Hello world', 'en', 'es');\n// Service health should be updated\nexpect(mockService.healthy).to.be.false;",
                  "err": {},
                  "uuid": "24160843-4ed6-45cf-a9b2-a89475bbfcd5",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should restore service health on successful translation",
                  "fullTitle": "Translation Error Handling Error recovery should restore service health on successful translation",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Set service as unhealthy\nconst mockService = translationManager.services.deepl;\nmockService.healthy = false;\n// Now make it succeed\nsandbox.stub(mockService, 'translate').resolves({\n    translation: 'Hola mundo',\n    confidence: 0.9\n});\n// Force using this service\nsandbox.stub(translationManager.languagePairOptimizer, 'getBestServiceForLanguagePair')\n    .returns('deepl');\n// Translate successfully\nawait translationManager.translate('Hello world', 'en', 'es');\n// Service health should be restored\nexpect(mockService.healthy).to.be.true;",
                  "err": {},
                  "uuid": "ee7607b3-ea2d-44bd-a775-7c20701127ed",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "bcd2e664-b2da-4558-8d86-9ea1195372d6",
                "24160843-4ed6-45cf-a9b2-a89475bbfcd5",
                "ee7607b3-ea2d-44bd-a775-7c20701127ed"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "fae1108d-a2a2-4cbf-ab5a-db31e37cc222",
          "title": "PlatformDetector",
          "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/platform-detector.test.js",
          "file": "/tests/unit/services/platform-detector.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"PlatformDetector\"",
              "fullTitle": "PlatformDetector \"before each\" hook in \"PlatformDetector\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox = sinon.createSandbox();\nexecStub = sandbox.stub(require('child_process'), 'exec');\nosStub = sandbox.stub(os, 'platform');",
              "err": {},
              "uuid": "e880f547-ff67-47a1-82bc-e730578b9154",
              "parentUUID": "fae1108d-a2a2-4cbf-ab5a-db31e37cc222",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"PlatformDetector\"",
              "fullTitle": "PlatformDetector \"after each\" hook in \"PlatformDetector\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore();",
              "err": {},
              "uuid": "eb3bc7e1-d2fd-484e-96e3-9693ffa763a6",
              "parentUUID": "fae1108d-a2a2-4cbf-ab5a-db31e37cc222",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "34d26714-4c9a-4871-87de-49748c28f202",
              "title": "constructor",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/platform-detector.test.js",
              "file": "/tests/unit/services/platform-detector.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should initialize with supported apps list",
                  "fullTitle": "PlatformDetector constructor should initialize with supported apps list",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(PlatformDetector.supportedApps).to.be.an('array');\nexpect(PlatformDetector.supportedApps).to.include('Discord');\nexpect(PlatformDetector.supportedApps).to.include('Zoom');\nexpect(PlatformDetector.supportedApps).to.include('Teams');",
                  "err": {},
                  "uuid": "5a606849-d508-4677-8524-ebdf23ce4571",
                  "parentUUID": "34d26714-4c9a-4871-87de-49748c28f202",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should set platform property",
                  "fullTitle": "PlatformDetector constructor should set platform property",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "osStub.returns('win32');\nconst detector = require('../../../src/services/platform-detector');\nexpect(detector.platform).to.equal('win32');",
                  "err": {
                    "message": "AssertionError: expected 'darwin' to equal 'win32'",
                    "estack": "AssertionError: expected 'darwin' to equal 'win32'\n    at Context.<anonymous> (tests/unit/services/platform-detector.test.js:35:36)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": "- darwin\n+ win32\n"
                  },
                  "uuid": "e5734f92-82f4-4872-b588-127e81df12a7",
                  "parentUUID": "34d26714-4c9a-4871-87de-49748c28f202",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5a606849-d508-4677-8524-ebdf23ce4571"
              ],
              "failures": [
                "e5734f92-82f4-4872-b588-127e81df12a7"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "9f08b4a2-8b12-4604-aae1-947dd1ffd7de",
              "title": "detectActiveApp",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/platform-detector.test.js",
              "file": "/tests/unit/services/platform-detector.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should detect Discord on Windows",
                  "fullTitle": "PlatformDetector detectActiveApp should detect Discord on Windows",
                  "timedOut": false,
                  "duration": 97,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "osStub.returns('win32');\nexecStub.yields(null, 'discord.exe', '');\n\nconst result = await PlatformDetector.detectActiveApp();\nexpect(result).to.equal('Discord');",
                  "err": {
                    "message": "AssertionError: expected 'Telegram' to equal 'Discord'",
                    "estack": "AssertionError: expected 'Telegram' to equal 'Discord'\n    at Context.<anonymous> (tests/unit/services/platform-detector.test.js:45:25)",
                    "diff": "- Telegram\n+ Discord\n"
                  },
                  "uuid": "350076a9-d6a8-4546-aa31-cb3b8b67b501",
                  "parentUUID": "9f08b4a2-8b12-4604-aae1-947dd1ffd7de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect Zoom on macOS",
                  "fullTitle": "PlatformDetector detectActiveApp should detect Zoom on macOS",
                  "timedOut": false,
                  "duration": 95,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "osStub.returns('darwin');\nexecStub.yields(null, 'zoom.us', '');\n\nconst result = await PlatformDetector.detectActiveApp();\nexpect(result).to.equal('Zoom');",
                  "err": {
                    "message": "AssertionError: expected 'Telegram' to equal 'Zoom'",
                    "estack": "AssertionError: expected 'Telegram' to equal 'Zoom'\n    at Context.<anonymous> (tests/unit/services/platform-detector.test.js:53:25)",
                    "diff": "- Telegram\n+ Zoom\n"
                  },
                  "uuid": "f486eff8-599c-433e-9a7c-5945d697182b",
                  "parentUUID": "9f08b4a2-8b12-4604-aae1-947dd1ffd7de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect Teams on Linux",
                  "fullTitle": "PlatformDetector detectActiveApp should detect Teams on Linux",
                  "timedOut": false,
                  "duration": 100,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "osStub.returns('linux');\nexecStub.yields(null, 'teams', '');\n\nconst result = await PlatformDetector.detectActiveApp();\nexpect(result).to.equal('Teams');",
                  "err": {
                    "message": "AssertionError: expected 'Telegram' to equal 'Teams'",
                    "estack": "AssertionError: expected 'Telegram' to equal 'Teams'\n    at Context.<anonymous> (tests/unit/services/platform-detector.test.js:61:25)",
                    "diff": "- Telegram\n+ Teams\n"
                  },
                  "uuid": "84d047e0-9d44-4283-8e30-3c869d8703ca",
                  "parentUUID": "9f08b4a2-8b12-4604-aae1-947dd1ffd7de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null when no supported app is detected",
                  "fullTitle": "PlatformDetector detectActiveApp should return null when no supported app is detected",
                  "timedOut": false,
                  "duration": 85,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "osStub.returns('win32');\nexecStub.yields(null, 'notepad.exe', '');\n\nconst result = await PlatformDetector.detectActiveApp();\nexpect(result).to.be.null;",
                  "err": {
                    "message": "AssertionError: expected 'Telegram' to be null",
                    "estack": "AssertionError: expected 'Telegram' to be null\n    at Context.<anonymous> (tests/unit/services/platform-detector.test.js:69:27)",
                    "diff": null
                  },
                  "uuid": "5dbb0b00-97a9-4472-a3e4-669db08c9b40",
                  "parentUUID": "9f08b4a2-8b12-4604-aae1-947dd1ffd7de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle exec errors gracefully",
                  "fullTitle": "PlatformDetector detectActiveApp should handle exec errors gracefully",
                  "timedOut": false,
                  "duration": 83,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "osStub.returns('win32');\nexecStub.yields(new Error('Command failed'), '', '');\n\nconst result = await PlatformDetector.detectActiveApp();\nexpect(result).to.be.null;",
                  "err": {
                    "message": "AssertionError: expected 'Telegram' to be null",
                    "estack": "AssertionError: expected 'Telegram' to be null\n    at Context.<anonymous> (tests/unit/services/platform-detector.test.js:77:27)",
                    "diff": null
                  },
                  "uuid": "266a6722-9545-4c8c-ad72-f045f95894b9",
                  "parentUUID": "9f08b4a2-8b12-4604-aae1-947dd1ffd7de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle unsupported platform",
                  "fullTitle": "PlatformDetector detectActiveApp should handle unsupported platform",
                  "timedOut": false,
                  "duration": 86,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "osStub.returns('android');\n\nconst result = await PlatformDetector.detectActiveApp();\nexpect(result).to.be.null;",
                  "err": {
                    "message": "AssertionError: expected 'Telegram' to be null",
                    "estack": "AssertionError: expected 'Telegram' to be null\n    at Context.<anonymous> (tests/unit/services/platform-detector.test.js:84:27)",
                    "diff": null
                  },
                  "uuid": "2b1572d4-a2ff-434c-83a1-f1a8e5d83d31",
                  "parentUUID": "9f08b4a2-8b12-4604-aae1-947dd1ffd7de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "350076a9-d6a8-4546-aa31-cb3b8b67b501",
                "f486eff8-599c-433e-9a7c-5945d697182b",
                "84d047e0-9d44-4283-8e30-3c869d8703ca",
                "5dbb0b00-97a9-4472-a3e4-669db08c9b40",
                "266a6722-9545-4c8c-ad72-f045f95894b9",
                "2b1572d4-a2ff-434c-83a1-f1a8e5d83d31"
              ],
              "pending": [],
              "skipped": [],
              "duration": 546,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "dfaed4b6-4208-467e-b5ef-c1f5051a3167",
              "title": "getAppConfig",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/platform-detector.test.js",
              "file": "/tests/unit/services/platform-detector.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return Discord configuration",
                  "fullTitle": "PlatformDetector getAppConfig should return Discord configuration",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config = PlatformDetector.getAppConfig('Discord');\nexpect(config).to.deep.include({\n  inputDevice: 'CABLE Input',\n  outputDevice: 'CABLE Output',\n  sampleRate: 48000,\n  channels: 2,\n  priority: 'high'\n});",
                  "err": {},
                  "uuid": "c055c680-ae2d-4bd4-b035-f33f75fc1d25",
                  "parentUUID": "dfaed4b6-4208-467e-b5ef-c1f5051a3167",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return Zoom configuration",
                  "fullTitle": "PlatformDetector getAppConfig should return Zoom configuration",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config = PlatformDetector.getAppConfig('Zoom');\nexpect(config).to.deep.include({\n  inputDevice: 'CABLE Input',\n  outputDevice: 'CABLE Output',\n  sampleRate: 16000,\n  channels: 1,\n  priority: 'high'\n});",
                  "err": {},
                  "uuid": "2efd5d11-e13f-4746-a52e-dd2275d06370",
                  "parentUUID": "dfaed4b6-4208-467e-b5ef-c1f5051a3167",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null for unsupported app",
                  "fullTitle": "PlatformDetector getAppConfig should return null for unsupported app",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config = PlatformDetector.getAppConfig('Notepad');\nexpect(config).to.be.null;",
                  "err": {},
                  "uuid": "0eca299b-1cca-4212-a446-1aaa3e270e49",
                  "parentUUID": "dfaed4b6-4208-467e-b5ef-c1f5051a3167",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c055c680-ae2d-4bd4-b035-f33f75fc1d25",
                "2efd5d11-e13f-4746-a52e-dd2275d06370",
                "0eca299b-1cca-4212-a446-1aaa3e270e49"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "bd50dffb-4f02-41eb-b6d8-f1950f4e991c",
              "title": "configureAudioRouting",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/platform-detector.test.js",
              "file": "/tests/unit/services/platform-detector.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should configure audio routing for Discord",
                  "fullTitle": "PlatformDetector configureAudioRouting should configure audio routing for Discord",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const applyRoutingStub = sandbox.stub(PlatformDetector, 'applyAudioRouting');\n\nawait PlatformDetector.configureAudioRouting('Discord');\n\nexpect(applyRoutingStub.calledOnce).to.be.true;\nexpect(applyRoutingStub.firstCall.args[0]).to.deep.include({\n  inputDevice: 'CABLE Input',\n  outputDevice: 'CABLE Output'\n});",
                  "err": {},
                  "uuid": "63f71974-7152-447f-908e-8ff3a5abc2c7",
                  "parentUUID": "bd50dffb-4f02-41eb-b6d8-f1950f4e991c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle unsupported app gracefully",
                  "fullTitle": "PlatformDetector configureAudioRouting should handle unsupported app gracefully",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const applyRoutingStub = sandbox.stub(PlatformDetector, 'applyAudioRouting');\n\nawait PlatformDetector.configureAudioRouting('Notepad');\n\nexpect(applyRoutingStub.called).to.be.false;",
                  "err": {},
                  "uuid": "5f63a50c-f448-49ce-a3c1-8aac20d94725",
                  "parentUUID": "bd50dffb-4f02-41eb-b6d8-f1950f4e991c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle errors gracefully",
                  "fullTitle": "PlatformDetector configureAudioRouting should handle errors gracefully",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sandbox.stub(PlatformDetector, 'getAppConfig').throws(new Error('Config error'));\n\n// Should not throw\nawait PlatformDetector.configureAudioRouting('Discord');",
                  "err": {},
                  "uuid": "52f4127d-73a2-4e9d-8326-d2fb973e57e4",
                  "parentUUID": "bd50dffb-4f02-41eb-b6d8-f1950f4e991c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "63f71974-7152-447f-908e-8ff3a5abc2c7",
                "5f63a50c-f448-49ce-a3c1-8aac20d94725",
                "52f4127d-73a2-4e9d-8326-d2fb973e57e4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "1e98122d-8de8-470e-9c3b-7dee81e30752",
              "title": "applyAudioRouting",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/platform-detector.test.js",
              "file": "/tests/unit/services/platform-detector.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should call Windows routing for win32 platform",
                  "fullTitle": "PlatformDetector applyAudioRouting should call Windows routing for win32 platform",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "osStub.returns('win32');\nconst windowsStub = sandbox.stub(PlatformDetector, 'applyWindowsAudioRouting');\n\nawait PlatformDetector.applyAudioRouting({ inputDevice: 'test', outputDevice: 'test' });\n\nexpect(windowsStub.calledOnce).to.be.true;",
                  "err": {
                    "message": "AssertionError: expected false to be true",
                    "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (tests/unit/services/platform-detector.test.js:153:43)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": "- false\n+ true\n"
                  },
                  "uuid": "97fa3fb1-9372-4906-99c6-d508d11c9bf3",
                  "parentUUID": "1e98122d-8de8-470e-9c3b-7dee81e30752",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should call macOS routing for darwin platform",
                  "fullTitle": "PlatformDetector applyAudioRouting should call macOS routing for darwin platform",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "osStub.returns('darwin');\nconst macStub = sandbox.stub(PlatformDetector, 'applyMacAudioRouting');\n\nawait PlatformDetector.applyAudioRouting({ inputDevice: 'test', outputDevice: 'test' });\n\nexpect(macStub.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "15d90037-4bbb-4b82-a2ba-6db2205acd2a",
                  "parentUUID": "1e98122d-8de8-470e-9c3b-7dee81e30752",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should call Linux routing for linux platform",
                  "fullTitle": "PlatformDetector applyAudioRouting should call Linux routing for linux platform",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "osStub.returns('linux');\nconst linuxStub = sandbox.stub(PlatformDetector, 'applyLinuxAudioRouting');\n\nawait PlatformDetector.applyAudioRouting({ inputDevice: 'test', outputDevice: 'test' });\n\nexpect(linuxStub.calledOnce).to.be.true;",
                  "err": {
                    "message": "AssertionError: expected false to be true",
                    "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (tests/unit/services/platform-detector.test.js:171:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": "- false\n+ true\n"
                  },
                  "uuid": "821d0d64-1f08-4224-aaa4-f74909051c31",
                  "parentUUID": "1e98122d-8de8-470e-9c3b-7dee81e30752",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "15d90037-4bbb-4b82-a2ba-6db2205acd2a"
              ],
              "failures": [
                "97fa3fb1-9372-4906-99c6-d508d11c9bf3",
                "821d0d64-1f08-4224-aaa4-f74909051c31"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "ddca19e0-f2a3-4b82-8986-0974704cddf2",
              "title": "applyWindowsAudioRouting",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/platform-detector.test.js",
              "file": "/tests/unit/services/platform-detector.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should execute PowerShell commands for Windows audio routing",
                  "fullTitle": "PlatformDetector applyWindowsAudioRouting should execute PowerShell commands for Windows audio routing",
                  "timedOut": false,
                  "duration": 6,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "osStub.returns('win32');\nexecStub.yields(null, '', '');\n\nawait PlatformDetector.applyWindowsAudioRouting({\n  inputDevice: 'CABLE Input',\n  outputDevice: 'CABLE Output'\n});\n\nexpect(execStub.calledTwice).to.be.true;\nexpect(execStub.firstCall.args[0]).to.include('Set-AudioDevice');\nexpect(execStub.secondCall.args[0]).to.include('Set-AudioDevice');",
                  "err": {
                    "message": "AssertionError: expected false to be true",
                    "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (tests/unit/services/platform-detector.test.js:185:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": "- false\n+ true\n"
                  },
                  "uuid": "08b9e2b9-3ad6-43e9-b9b0-c7096bbfe93d",
                  "parentUUID": "ddca19e0-f2a3-4b82-8986-0974704cddf2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle Windows routing errors",
                  "fullTitle": "PlatformDetector applyWindowsAudioRouting should handle Windows routing errors",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "osStub.returns('win32');\nexecStub.yields(new Error('PowerShell error'), '', '');\n\n// Should not throw\nawait PlatformDetector.applyWindowsAudioRouting({\n  inputDevice: 'CABLE Input',\n  outputDevice: 'CABLE Output'\n});",
                  "err": {},
                  "uuid": "6e4a4945-0aa1-4c54-b493-a3d418ef80a4",
                  "parentUUID": "ddca19e0-f2a3-4b82-8986-0974704cddf2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6e4a4945-0aa1-4c54-b493-a3d418ef80a4"
              ],
              "failures": [
                "08b9e2b9-3ad6-43e9-b9b0-c7096bbfe93d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "879d9f56-424c-41c2-a2ba-b682beda56f0",
              "title": "applyLinuxAudioRouting",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/platform-detector.test.js",
              "file": "/tests/unit/services/platform-detector.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should execute pactl commands for Linux audio routing",
                  "fullTitle": "PlatformDetector applyLinuxAudioRouting should execute pactl commands for Linux audio routing",
                  "timedOut": false,
                  "duration": 5,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "osStub.returns('linux');\nexecStub.yields(null, '', '');\n\nawait PlatformDetector.applyLinuxAudioRouting({\n  inputDevice: 'CABLE Input',\n  outputDevice: 'CABLE Output'\n});\n\nexpect(execStub.calledTwice).to.be.true;\nexpect(execStub.firstCall.args[0]).to.include('pactl set-default-sink');\nexpect(execStub.secondCall.args[0]).to.include('pactl set-default-source');",
                  "err": {
                    "message": "AssertionError: expected false to be true",
                    "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (tests/unit/services/platform-detector.test.js:212:41)",
                    "diff": "- false\n+ true\n"
                  },
                  "uuid": "bd4e6d5d-161b-4a90-9244-052b05504f6f",
                  "parentUUID": "879d9f56-424c-41c2-a2ba-b682beda56f0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle Linux routing errors",
                  "fullTitle": "PlatformDetector applyLinuxAudioRouting should handle Linux routing errors",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "osStub.returns('linux');\nexecStub.yields(new Error('pactl error'), '', '');\n\n// Should not throw\nawait PlatformDetector.applyLinuxAudioRouting({\n  inputDevice: 'CABLE Input',\n  outputDevice: 'CABLE Output'\n});",
                  "err": {},
                  "uuid": "2ac6a0c4-2808-4dac-93dc-1612e3478abc",
                  "parentUUID": "879d9f56-424c-41c2-a2ba-b682beda56f0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2ac6a0c4-2808-4dac-93dc-1612e3478abc"
              ],
              "failures": [
                "bd4e6d5d-161b-4a90-9244-052b05504f6f"
              ],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "0309c3c3-6af1-4913-850b-512a55c91d6b",
              "title": "applyMacAudioRouting",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/platform-detector.test.js",
              "file": "/tests/unit/services/platform-detector.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should log configuration for macOS",
                  "fullTitle": "PlatformDetector applyMacAudioRouting should log configuration for macOS",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "osStub.returns('darwin');\nconst consoleStub = sandbox.stub(console, 'log');\n\nawait PlatformDetector.applyMacAudioRouting({\n  inputDevice: 'CABLE Input',\n  outputDevice: 'CABLE Output'\n});\n\nexpect(consoleStub.called).to.be.true;",
                  "err": {},
                  "uuid": "f5ea37bc-a6a0-4f39-b74e-144aaac639d6",
                  "parentUUID": "0309c3c3-6af1-4913-850b-512a55c91d6b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f5ea37bc-a6a0-4f39-b74e-144aaac639d6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "d068a4cd-e568-4b13-8ceb-627596ef9c92",
          "title": "Setup Automation Service",
          "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/setup-automation.test.js",
          "file": "/tests/unit/services/setup-automation.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Setup Automation Service\"",
              "fullTitle": "Setup Automation Service \"before each\" hook in \"Setup Automation Service\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Create mocks\nmockChildProcess = {\n  exec: sinon.stub(),\n  spawn: sinon.stub()\n};\nmockFs = {\n  existsSync: sinon.stub(),\n  mkdirSync: sinon.stub(),\n  writeFileSync: sinon.stub(),\n  readFileSync: sinon.stub(),\n  copyFileSync: sinon.stub()\n};\nmockPath = {\n  join: sinon.stub(),\n  resolve: sinon.stub(),\n  dirname: sinon.stub()\n};\nmockOs = {\n  platform: sinon.stub().returns('darwin'),\n  type: sinon.stub().returns('Darwin'),\n  release: sinon.stub().returns('20.0.0')\n};\n// Mock the setup automation service\nsetupAutomation = proxyquire('../../../src/services/setup-automation', {\n  'child_process': mockChildProcess,\n  'fs': mockFs,\n  'path': mockPath,\n  'os': mockOs\n});",
              "err": {},
              "uuid": "c97cefef-9cde-49e4-8ab4-c2c122e105f8",
              "parentUUID": "d068a4cd-e568-4b13-8ceb-627596ef9c92",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Setup Automation Service\"",
              "fullTitle": "Setup Automation Service \"after each\" hook in \"Setup Automation Service\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "3322d8b6-0222-49fb-b1ec-71fe8fc6702d",
              "parentUUID": "d068a4cd-e568-4b13-8ceb-627596ef9c92",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "57477b55-ccd9-454f-9b97-9325932e36db",
              "title": "Platform Detection",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/setup-automation.test.js",
              "file": "/tests/unit/services/setup-automation.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should detect macOS correctly",
                  "fullTitle": "Setup Automation Service Platform Detection should detect macOS correctly",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockOs.platform.returns('darwin');\nconst platform = setupAutomation.detectPlatform();\nexpect(platform).to.equal('macos');",
                  "err": {
                    "message": "TypeError: setupAutomation.detectPlatform is not a function",
                    "estack": "TypeError: setupAutomation.detectPlatform is not a function\n    at Context.<anonymous> (tests/unit/services/setup-automation.test.js:55:40)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "e843ffdd-0801-4734-8cc6-5beab47705b5",
                  "parentUUID": "57477b55-ccd9-454f-9b97-9325932e36db",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect Windows correctly",
                  "fullTitle": "Setup Automation Service Platform Detection should detect Windows correctly",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockOs.platform.returns('win32');\nconst platform = setupAutomation.detectPlatform();\nexpect(platform).to.equal('windows');",
                  "err": {
                    "message": "TypeError: setupAutomation.detectPlatform is not a function",
                    "estack": "TypeError: setupAutomation.detectPlatform is not a function\n    at Context.<anonymous> (tests/unit/services/setup-automation.test.js:61:40)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "c1e06104-b246-4ead-942a-98567cf0e859",
                  "parentUUID": "57477b55-ccd9-454f-9b97-9325932e36db",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect Linux correctly",
                  "fullTitle": "Setup Automation Service Platform Detection should detect Linux correctly",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockOs.platform.returns('linux');\nconst platform = setupAutomation.detectPlatform();\nexpect(platform).to.equal('linux');",
                  "err": {
                    "message": "TypeError: setupAutomation.detectPlatform is not a function",
                    "estack": "TypeError: setupAutomation.detectPlatform is not a function\n    at Context.<anonymous> (tests/unit/services/setup-automation.test.js:67:40)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "7a1f466d-e897-4f24-9d4e-f2419df20e48",
                  "parentUUID": "57477b55-ccd9-454f-9b97-9325932e36db",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error for unsupported platform",
                  "fullTitle": "Setup Automation Service Platform Detection should throw error for unsupported platform",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockOs.platform.returns('freebsd');\nexpect(() => setupAutomation.detectPlatform()).to.throw('Unsupported platform: freebsd');",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw error including 'Unsupported platform: freebsd' but got 'setupAutomation.detectPlatform is not…'",
                    "estack": "AssertionError: expected [Function] to throw error including 'Unsupported platform: freebsd' but got 'setupAutomation.detectPlatform is not…'\n    at Context.<anonymous> (tests/unit/services/setup-automation.test.js:73:62)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": "- setupAutomation.detectPlatform is not a function\n+ Unsupported platform: freebsd\n"
                  },
                  "uuid": "1e7937f0-7faa-4ba1-8c80-7bae2adbf045",
                  "parentUUID": "57477b55-ccd9-454f-9b97-9325932e36db",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "e843ffdd-0801-4734-8cc6-5beab47705b5",
                "c1e06104-b246-4ead-942a-98567cf0e859",
                "7a1f466d-e897-4f24-9d4e-f2419df20e48",
                "1e7937f0-7faa-4ba1-8c80-7bae2adbf045"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "42a4848d-94e4-4e9a-93ed-0b24f72e9a3f",
              "title": "Virtual Audio Installation",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/setup-automation.test.js",
              "file": "/tests/unit/services/setup-automation.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should install VB-Audio Cable on Windows",
                  "fullTitle": "Setup Automation Service Virtual Audio Installation should install VB-Audio Cable on Windows",
                  "timedOut": true,
                  "duration": 5002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockOs.platform.returns('win32');\nmockChildProcess.exec.resolves({ stdout: 'success', stderr: '' });\nconst result = await setupAutomation.installVirtualAudio();\n\nexpect(result.success).to.be.true;\nexpect(result.platform).to.equal('windows');\nexpect(result.method).to.equal('vb-audio-cable');",
                  "err": {
                    "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/setup-automation.test.js)",
                    "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/setup-automation.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                    "diff": null
                  },
                  "uuid": "e9741224-d59f-43b7-849e-d5eb456aff6a",
                  "parentUUID": "42a4848d-94e4-4e9a-93ed-0b24f72e9a3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should install BlackHole on macOS",
                  "fullTitle": "Setup Automation Service Virtual Audio Installation should install BlackHole on macOS",
                  "timedOut": true,
                  "duration": 5001,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockOs.platform.returns('darwin');\nmockChildProcess.exec.resolves({ stdout: 'success', stderr: '' });\nconst result = await setupAutomation.installVirtualAudio();\n\nexpect(result.success).to.be.true;\nexpect(result.platform).to.equal('macos');\nexpect(result.method).to.equal('blackhole');",
                  "err": {
                    "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/setup-automation.test.js)",
                    "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/setup-automation.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                    "diff": null
                  },
                  "uuid": "29f2e093-bbd4-4cd7-a210-85119638906c",
                  "parentUUID": "42a4848d-94e4-4e9a-93ed-0b24f72e9a3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should create PulseAudio virtual sinks on Linux",
                  "fullTitle": "Setup Automation Service Virtual Audio Installation should create PulseAudio virtual sinks on Linux",
                  "timedOut": true,
                  "duration": 5001,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockOs.platform.returns('linux');\nmockChildProcess.exec.resolves({ stdout: 'success', stderr: '' });\nconst result = await setupAutomation.installVirtualAudio();\n\nexpect(result.success).to.be.true;\nexpect(result.platform).to.equal('linux');\nexpect(result.method).to.equal('pulseaudio');",
                  "err": {
                    "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/setup-automation.test.js)",
                    "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/setup-automation.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                    "diff": null
                  },
                  "uuid": "53ee53ff-069c-4522-ae5a-2054d48f466c",
                  "parentUUID": "42a4848d-94e4-4e9a-93ed-0b24f72e9a3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle installation errors",
                  "fullTitle": "Setup Automation Service Virtual Audio Installation should handle installation errors",
                  "timedOut": true,
                  "duration": 5002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockOs.platform.returns('win32');\nmockChildProcess.exec.rejects(new Error('Installation failed'));\nconst result = await setupAutomation.installVirtualAudio();\n\nexpect(result.success).to.be.false;\nexpect(result.error).to.include('Installation failed');",
                  "err": {
                    "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/setup-automation.test.js)",
                    "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/setup-automation.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                    "diff": null
                  },
                  "uuid": "c8b0a0f8-a47a-4b85-a485-136e07602a65",
                  "parentUUID": "42a4848d-94e4-4e9a-93ed-0b24f72e9a3f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "e9741224-d59f-43b7-849e-d5eb456aff6a",
                "29f2e093-bbd4-4cd7-a210-85119638906c",
                "53ee53ff-069c-4522-ae5a-2054d48f466c",
                "c8b0a0f8-a47a-4b85-a485-136e07602a65"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20006,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "a4a2a76b-ebc7-47ad-b660-2164705df96d",
              "title": "Audio Device Configuration",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/setup-automation.test.js",
              "file": "/tests/unit/services/setup-automation.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should configure audio devices successfully",
                  "fullTitle": "Setup Automation Service Audio Device Configuration should configure audio devices successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockChildProcess.exec.resolves({ stdout: 'devices configured', stderr: '' });\nmockFs.existsSync.returns(true);\nconst result = await setupAutomation.configureAudioDevices();\n\nexpect(result.success).to.be.true;\nexpect(result.devices).to.be.an('object');",
                  "err": {
                    "message": "AssertionError: expected undefined to be an object",
                    "estack": "AssertionError: expected undefined to be an object\n    at Context.<anonymous> (tests/unit/services/setup-automation.test.js:130:36)",
                    "diff": null
                  },
                  "uuid": "1558c0f5-14a6-4c38-9761-1d4edba1003a",
                  "parentUUID": "a4a2a76b-ebc7-47ad-b660-2164705df96d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle device configuration errors",
                  "fullTitle": "Setup Automation Service Audio Device Configuration should handle device configuration errors",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockChildProcess.exec.rejects(new Error('Device configuration failed'));\nconst result = await setupAutomation.configureAudioDevices();\n\nexpect(result.success).to.be.false;\nexpect(result.error).to.include('Device configuration failed');",
                  "err": {
                    "message": "AssertionError: expected true to be false",
                    "estack": "AssertionError: expected true to be false\n    at Context.<anonymous> (tests/unit/services/setup-automation.test.js:138:35)",
                    "diff": "- true\n+ false\n"
                  },
                  "uuid": "06ae71ae-5d5b-4e89-8eae-c4c2c7f33019",
                  "parentUUID": "a4a2a76b-ebc7-47ad-b660-2164705df96d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "1558c0f5-14a6-4c38-9761-1d4edba1003a",
                "06ae71ae-5d5b-4e89-8eae-c4c2c7f33019"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "0649878b-08ab-4053-809c-d48158149452",
              "title": "Communication App Configuration",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/setup-automation.test.js",
              "file": "/tests/unit/services/setup-automation.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should configure Discord settings",
                  "fullTitle": "Setup Automation Service Communication App Configuration should configure Discord settings",
                  "timedOut": false,
                  "duration": 99,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockFs.existsSync.returns(true);\nmockFs.readFileSync.returns('{\"voice\": {\"inputDevice\": \"default\"}}');\nmockFs.writeFileSync.returns();\nconst result = await setupAutomation.configureCommunicationApps(['discord']);\n\nexpect(result.success).to.be.true;\nexpect(result.apps).to.include('discord');",
                  "err": {
                    "message": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
                    "estack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n    at Context.<anonymous> (tests/unit/services/setup-automation.test.js:152:30)",
                    "diff": null
                  },
                  "uuid": "85f2bd85-6297-4a40-a109-87d7f6e5e576",
                  "parentUUID": "0649878b-08ab-4053-809c-d48158149452",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should configure Zoom settings",
                  "fullTitle": "Setup Automation Service Communication App Configuration should configure Zoom settings",
                  "timedOut": false,
                  "duration": 90,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockFs.existsSync.returns(true);\nmockFs.readFileSync.returns('{\"audio\": {\"microphone\": \"default\"}}');\nmockFs.writeFileSync.returns();\nconst result = await setupAutomation.configureCommunicationApps(['zoom']);\n\nexpect(result.success).to.be.true;\nexpect(result.apps).to.include('zoom');",
                  "err": {
                    "message": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
                    "estack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n    at Context.<anonymous> (tests/unit/services/setup-automation.test.js:163:30)",
                    "diff": null
                  },
                  "uuid": "95579f0c-adf8-4d70-9e59-575909adde6b",
                  "parentUUID": "0649878b-08ab-4053-809c-d48158149452",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle app configuration errors",
                  "fullTitle": "Setup Automation Service Communication App Configuration should handle app configuration errors",
                  "timedOut": false,
                  "duration": 83,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockFs.existsSync.returns(false);\nconst result = await setupAutomation.configureCommunicationApps(['nonexistent']);\n\nexpect(result.success).to.be.false;\nexpect(result.error).to.include('App not found');",
                  "err": {
                    "message": "AssertionError: expected true to be false",
                    "estack": "AssertionError: expected true to be false\n    at Context.<anonymous> (tests/unit/services/setup-automation.test.js:171:35)",
                    "diff": "- true\n+ false\n"
                  },
                  "uuid": "bb4743a9-c46e-4987-a2c6-63f6b81aa0b0",
                  "parentUUID": "0649878b-08ab-4053-809c-d48158149452",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "85f2bd85-6297-4a40-a109-87d7f6e5e576",
                "95579f0c-adf8-4d70-9e59-575909adde6b",
                "bb4743a9-c46e-4987-a2c6-63f6b81aa0b0"
              ],
              "pending": [],
              "skipped": [],
              "duration": 272,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "96ad6769-f801-4a88-b498-fde443368880",
              "title": "Configuration File Creation",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/setup-automation.test.js",
              "file": "/tests/unit/services/setup-automation.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create configuration files successfully",
                  "fullTitle": "Setup Automation Service Configuration File Creation should create configuration files successfully",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockPath.join.returns('/config/path');\nmockFs.writeFileSync.returns();\nconst config = {\n  translation: { service: 'deepl' },\n  audio: { inputDevice: 'microphone' }\n};\nconst result = await setupAutomation.createConfigurationFiles(config);\n\nexpect(result.success).to.be.true;\nexpect(result.files).to.be.an('array');",
                  "err": {
                    "message": "AssertionError: expected false to be true",
                    "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (tests/unit/services/setup-automation.test.js:188:35)",
                    "diff": "- false\n+ true\n"
                  },
                  "uuid": "f16c5fa8-a879-4fb6-86f2-2b978e5fd71d",
                  "parentUUID": "96ad6769-f801-4a88-b498-fde443368880",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle configuration file creation errors",
                  "fullTitle": "Setup Automation Service Configuration File Creation should handle configuration file creation errors",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockPath.join.returns('/config/path');\nmockFs.writeFileSync.throws(new Error('Write failed'));\nconst config = { translation: { service: 'deepl' } };\nconst result = await setupAutomation.createConfigurationFiles(config);\n\nexpect(result.success).to.be.false;\nexpect(result.error).to.include('Write failed');",
                  "err": {
                    "message": "AssertionError: expected 'ENOENT: no such file or directory, mk…' to include 'Write failed'",
                    "estack": "AssertionError: expected 'ENOENT: no such file or directory, mk…' to include 'Write failed'\n    at Context.<anonymous> (tests/unit/services/setup-automation.test.js:201:31)",
                    "diff": null
                  },
                  "uuid": "de5270c8-b0e4-4ebd-aa53-b52dde1d4029",
                  "parentUUID": "96ad6769-f801-4a88-b498-fde443368880",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "f16c5fa8-a879-4fb6-86f2-2b978e5fd71d",
                "de5270c8-b0e4-4ebd-aa53-b52dde1d4029"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "322e249e-2eb1-4905-8737-8d94122bb683",
              "title": "Complete Setup Process",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/setup-automation.test.js",
              "file": "/tests/unit/services/setup-automation.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should run complete setup successfully",
                  "fullTitle": "Setup Automation Service Complete Setup Process should run complete setup successfully",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockOs.platform.returns('darwin');\nmockChildProcess.exec.resolves({ stdout: 'success', stderr: '' });\nmockFs.existsSync.returns(true);\nmockFs.writeFileSync.returns();\nconst result = await setupAutomation.runCompleteSetup();\n\nexpect(result.success).to.be.true;\nexpect(result.steps).to.be.an('array');\nexpect(result.steps).to.have.length.greaterThan(0);",
                  "err": {
                    "message": "TypeError: setupAutomation.runCompleteSetup is not a function",
                    "estack": "TypeError: setupAutomation.runCompleteSetup is not a function\n    at Context.<anonymous> (tests/unit/services/setup-automation.test.js:212:44)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "615cf476-d604-4d4b-a3c7-bbdc0672212c",
                  "parentUUID": "322e249e-2eb1-4905-8737-8d94122bb683",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle setup step failures gracefully",
                  "fullTitle": "Setup Automation Service Complete Setup Process should handle setup step failures gracefully",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockOs.platform.returns('darwin');\nmockChildProcess.exec.rejects(new Error('Setup failed'));\nconst result = await setupAutomation.runCompleteSetup();\n\nexpect(result.success).to.be.false;\nexpect(result.errors).to.be.an('array');\nexpect(result.errors).to.have.length.greaterThan(0);",
                  "err": {
                    "message": "TypeError: setupAutomation.runCompleteSetup is not a function",
                    "estack": "TypeError: setupAutomation.runCompleteSetup is not a function\n    at Context.<anonymous> (tests/unit/services/setup-automation.test.js:223:44)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "67e713a0-77fa-4bfb-8047-72d855a141d8",
                  "parentUUID": "322e249e-2eb1-4905-8737-8d94122bb683",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should provide detailed step results",
                  "fullTitle": "Setup Automation Service Complete Setup Process should provide detailed step results",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockOs.platform.returns('darwin');\nmockChildProcess.exec.resolves({ stdout: 'success', stderr: '' });\nmockFs.existsSync.returns(true);\nmockFs.writeFileSync.returns();\nconst result = await setupAutomation.runCompleteSetup();\n\nexpect(result.steps).to.be.an('array');\nresult.steps.forEach(step => {\n  expect(step).to.have.property('name');\n  expect(step).to.have.property('success');\n  expect(step).to.have.property('duration');\n});",
                  "err": {
                    "message": "TypeError: setupAutomation.runCompleteSetup is not a function",
                    "estack": "TypeError: setupAutomation.runCompleteSetup is not a function\n    at Context.<anonymous> (tests/unit/services/setup-automation.test.js:236:44)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "5cbffb8d-954e-4aba-946f-c8282aef58d4",
                  "parentUUID": "322e249e-2eb1-4905-8737-8d94122bb683",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "615cf476-d604-4d4b-a3c7-bbdc0672212c",
                "67e713a0-77fa-4bfb-8047-72d855a141d8",
                "5cbffb8d-954e-4aba-946f-c8282aef58d4"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "44b2a472-abe5-421b-8013-dcfc79a99ed9",
              "title": "Error Handling",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/setup-automation.test.js",
              "file": "/tests/unit/services/setup-automation.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle timeout errors",
                  "fullTitle": "Setup Automation Service Error Handling should handle timeout errors",
                  "timedOut": true,
                  "duration": 5001,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockOs.platform.returns('darwin');\nmockChildProcess.exec.rejects(new Error('ETIMEDOUT'));\nconst result = await setupAutomation.installVirtualAudio();\n\nexpect(result.success).to.be.false;\nexpect(result.error).to.include('timeout');",
                  "err": {
                    "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/setup-automation.test.js)",
                    "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/setup-automation.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                    "diff": null
                  },
                  "uuid": "7b47c2d0-1a61-4fdb-916f-6f3bc6a29fbf",
                  "parentUUID": "44b2a472-abe5-421b-8013-dcfc79a99ed9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle permission errors",
                  "fullTitle": "Setup Automation Service Error Handling should handle permission errors",
                  "timedOut": true,
                  "duration": 5001,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockOs.platform.returns('darwin');\nmockChildProcess.exec.rejects(new Error('EACCES'));\nconst result = await setupAutomation.installVirtualAudio();\n\nexpect(result.success).to.be.false;\nexpect(result.error).to.include('permission');",
                  "err": {
                    "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/setup-automation.test.js)",
                    "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/setup-automation.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                    "diff": null
                  },
                  "uuid": "c62d05cf-1816-445e-a887-da8f3c678cef",
                  "parentUUID": "44b2a472-abe5-421b-8013-dcfc79a99ed9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle network errors",
                  "fullTitle": "Setup Automation Service Error Handling should handle network errors",
                  "timedOut": true,
                  "duration": 5002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockOs.platform.returns('darwin');\nmockChildProcess.exec.rejects(new Error('ENOTFOUND'));\nconst result = await setupAutomation.installVirtualAudio();\n\nexpect(result.success).to.be.false;\nexpect(result.error).to.include('network');",
                  "err": {
                    "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/setup-automation.test.js)",
                    "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/setup-automation.test.js)\n    at listOnTimeout (node:internal/timers:594:17)\n    at process.processTimers (node:internal/timers:529:7)",
                    "diff": null
                  },
                  "uuid": "b1a42754-9097-4d8b-b5c5-a8d180e2999e",
                  "parentUUID": "44b2a472-abe5-421b-8013-dcfc79a99ed9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "7b47c2d0-1a61-4fdb-916f-6f3bc6a29fbf",
                "c62d05cf-1816-445e-a887-da8f3c678cef",
                "b1a42754-9097-4d8b-b5c5-a8d180e2999e"
              ],
              "pending": [],
              "skipped": [],
              "duration": 15004,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "5ef9586b-4b60-4164-ada5-ab7397ea40fb",
              "title": "Validation",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/setup-automation.test.js",
              "file": "/tests/unit/services/setup-automation.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate platform support",
                  "fullTitle": "Setup Automation Service Validation should validate platform support",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(setupAutomation.isPlatformSupported('windows')).to.be.true;\nexpect(setupAutomation.isPlatformSupported('macos')).to.be.true;\nexpect(setupAutomation.isPlatformSupported('linux')).to.be.true;\nexpect(setupAutomation.isPlatformSupported('freebsd')).to.be.false;",
                  "err": {
                    "message": "TypeError: setupAutomation.isPlatformSupported is not a function",
                    "estack": "TypeError: setupAutomation.isPlatformSupported is not a function\n    at Context.<anonymous> (tests/unit/services/setup-automation.test.js:281:30)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "14b2bb05-eaef-4971-b202-2a4b185a3097",
                  "parentUUID": "5ef9586b-4b60-4164-ada5-ab7397ea40fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate app support",
                  "fullTitle": "Setup Automation Service Validation should validate app support",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(setupAutomation.isAppSupported('discord')).to.be.true;\nexpect(setupAutomation.isAppSupported('zoom')).to.be.true;\nexpect(setupAutomation.isAppSupported('teams')).to.be.true;\nexpect(setupAutomation.isAppSupported('nonexistent')).to.be.false;",
                  "err": {
                    "message": "TypeError: setupAutomation.isAppSupported is not a function",
                    "estack": "TypeError: setupAutomation.isAppSupported is not a function\n    at Context.<anonymous> (tests/unit/services/setup-automation.test.js:288:30)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "79f85e87-9980-4bb2-a808-b85908747d07",
                  "parentUUID": "5ef9586b-4b60-4164-ada5-ab7397ea40fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate configuration",
                  "fullTitle": "Setup Automation Service Validation should validate configuration",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const validConfig = {\n  translation: { service: 'deepl', apiKey: 'test-key' },\n  audio: { inputDevice: 'microphone' }\n};\nconst invalidConfig = {\n  translation: { service: 'invalid' }\n};\nexpect(setupAutomation.validateConfiguration(validConfig)).to.be.true;\nexpect(setupAutomation.validateConfiguration(invalidConfig)).to.be.false;",
                  "err": {
                    "message": "TypeError: setupAutomation.validateConfiguration is not a function",
                    "estack": "TypeError: setupAutomation.validateConfiguration is not a function\n    at Context.<anonymous> (tests/unit/services/setup-automation.test.js:304:30)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "c48e5164-2007-41df-98e3-8e30b0313281",
                  "parentUUID": "5ef9586b-4b60-4164-ada5-ab7397ea40fb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "14b2bb05-eaef-4971-b202-2a4b185a3097",
                "79f85e87-9980-4bb2-a808-b85908747d07",
                "c48e5164-2007-41df-98e3-8e30b0313281"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "daffef21-1912-4030-aeeb-4cb187a33798",
          "title": "AzureTranslator",
          "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/azure-translator.test.js",
          "file": "/tests/unit/services/translation/azure-translator.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"AzureTranslator\"",
              "fullTitle": "AzureTranslator \"before each\" hook in \"AzureTranslator\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox = sinon.createSandbox();\ntranslator = new AzureTranslator({\n    apiKey: 'test-api-key',\n    endpoint: 'https://api.cognitive.microsofttranslator.com',\n    region: 'eastus'\n});\n// Mock axios\nsandbox.stub(axios, 'post');\nsandbox.stub(axios, 'get');",
              "err": {},
              "uuid": "8ea46101-7ea5-4b1e-91de-65c07b45b100",
              "parentUUID": "daffef21-1912-4030-aeeb-4cb187a33798",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"AzureTranslator\"",
              "fullTitle": "AzureTranslator \"after each\" hook in \"AzureTranslator\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore();",
              "err": {},
              "uuid": "c4f01bcf-bc99-4687-89a7-662870c4bd04",
              "parentUUID": "daffef21-1912-4030-aeeb-4cb187a33798",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "33f1d55a-8263-4f58-b17e-a3a79114d244",
              "title": "initialization",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/azure-translator.test.js",
              "file": "/tests/unit/services/translation/azure-translator.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should initialize successfully with valid credentials",
                  "fullTitle": "AzureTranslator initialization should initialize successfully with valid credentials",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Mock languages API response\naxios.get.resolves({\n    data: {\n        translation: {\n            en: { name: 'English', dir: 'ltr', supported: true },\n            es: { name: 'Spanish', dir: 'ltr', supported: true },\n            fr: { name: 'French', dir: 'ltr', supported: true }\n        }\n    }\n});\nconst result = await translator.initialize();\nexpect(result.success).to.be.true;\nexpect(translator.isInitialized).to.be.true;\nexpect(translator.supportedLanguages.length).to.be.greaterThan(0);\nexpect(axios.get.calledOnce).to.be.true;",
                  "err": {
                    "message": "Error: Azure Translator connection test failed: Azure Translator error: Cannot read properties of undefined (reading 'data')",
                    "estack": "Error: Azure Translator connection test failed: Azure Translator error: Cannot read properties of undefined (reading 'data')\n    at AzureTranslator.testConnection (src/services/translation/azure-translator.js:79:19)\n    at async AzureTranslator.initialize (src/services/translation/azure-translator.js:51:13)\n    at async Context.<anonymous> (tests/unit/services/translation/azure-translator.test.js:41:28)",
                    "diff": null
                  },
                  "uuid": "10df1429-b349-4492-bd4b-c88f78ecd8e9",
                  "parentUUID": "33f1d55a-8263-4f58-b17e-a3a79114d244",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle missing API key",
                  "fullTitle": "AzureTranslator initialization should handle missing API key",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "translator = new AzureTranslator({\n    apiKey: null,\n    endpoint: 'https://api.cognitive.microsofttranslator.com',\n    region: 'eastus'\n});\ntry {\n    await translator.initialize();\n    expect.fail('Should have thrown an error');\n} catch (error) {\n    expect(error.message).to.include('API key');\n}",
                  "err": {},
                  "uuid": "d944fb33-749d-427a-94f6-e9b3e77b5710",
                  "parentUUID": "33f1d55a-8263-4f58-b17e-a3a79114d244",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle API errors during initialization",
                  "fullTitle": "AzureTranslator initialization should handle API errors during initialization",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Mock languages API error\naxios.get.rejects(new Error('Unable to connect to Azure'));\ntry {\n    await translator.initialize();\n    expect.fail('Should have thrown an error');\n} catch (error) {\n    expect(error.message).to.include('Unable to connect to Azure');\n    expect(translator.isInitialized).to.be.false;\n}",
                  "err": {
                    "message": "AssertionError: expected 'Azure Translator connection test fail…' to include 'Unable to connect to Azure'",
                    "estack": "AssertionError: expected 'Azure Translator connection test fail…' to include 'Unable to connect to Azure'\n    at Context.<anonymous> (tests/unit/services/translation/azure-translator.test.js:72:42)",
                    "diff": null
                  },
                  "uuid": "1730b651-718b-4442-91d2-9f2d9d56a4be",
                  "parentUUID": "33f1d55a-8263-4f58-b17e-a3a79114d244",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d944fb33-749d-427a-94f6-e9b3e77b5710"
              ],
              "failures": [
                "10df1429-b349-4492-bd4b-c88f78ecd8e9",
                "1730b651-718b-4442-91d2-9f2d9d56a4be"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "66e65a30-8a7e-4107-b715-9e8845fa2723",
              "title": "translate",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/azure-translator.test.js",
              "file": "/tests/unit/services/translation/azure-translator.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"translate\"",
                  "fullTitle": "AzureTranslator translate \"before each\" hook in \"translate\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Setup initialized translator\ntranslator.isInitialized = true;",
                  "err": {},
                  "uuid": "78fb62b8-8f25-406e-a8d1-ef8be2f7460f",
                  "parentUUID": "66e65a30-8a7e-4107-b715-9e8845fa2723",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should translate text successfully",
                  "fullTitle": "AzureTranslator translate should translate text successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Mock successful translation response\naxios.post.resolves({\n    data: [\n        {\n            translations: [\n                {\n                    text: 'Hola mundo',\n                    to: 'es',\n                    alignment: { proj: '0:4-0:3 6:10-5:9' },\n                    sentLen: { srcSentLen: [11], transSentLen: [10] }\n                }\n            ],\n            detectedLanguage: {\n                language: 'en',\n                score: 0.95\n            }\n        }\n    ]\n});\n// Mock UUID generation for deterministic testing\nsandbox.stub(uuidv4).returns('test-uuid');\nconst result = await translator.translate('Hello world', 'en', 'es');\nexpect(result.translation).to.equal('Hola mundo');\nexpect(result.detectedLanguage).to.equal('en');\nexpect(result.confidence).to.equal(0.95);\nexpect(result.service).to.equal('azure');\nexpect(axios.post.calledOnce).to.be.true;\n// Verify correct API call parameters\nconst postCall = axios.post.getCall(0);\nexpect(postCall.args[0]).to.include('translate');\nexpect(postCall.args[1]).to.deep.equal([{ text: 'Hello world' }]);\nexpect(postCall.args[2].params).to.include({\n    'api-version': translator.config.apiVersion,\n    'to': 'es',\n    'from': 'en'\n});\nexpect(postCall.args[2].headers).to.include({\n    'Ocp-Apim-Subscription-Key': 'test-api-key',\n    'Ocp-Apim-Subscription-Region': 'eastus',\n    'Content-Type': 'application/json',\n    'X-ClientTraceId': 'test-uuid'\n});",
                  "err": {
                    "message": "TypeError: sandbox.stub(...).returns is not a function",
                    "estack": "TypeError: sandbox.stub(...).returns is not a function\n    at Context.<anonymous> (tests/unit/services/translation/azure-translator.test.js:106:34)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "47524a7c-9ab2-46e0-8e11-aeb1d23597a4",
                  "parentUUID": "66e65a30-8a7e-4107-b715-9e8845fa2723",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect language when fromLanguage is \"auto\"",
                  "fullTitle": "AzureTranslator translate should detect language when fromLanguage is \"auto\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mock successful translation with language detection\naxios.post.resolves({\n    data: [\n        {\n            translations: [\n                {\n                    text: 'Hello world',\n                    to: 'en'\n                }\n            ],\n            detectedLanguage: {\n                language: 'es',\n                score: 0.92\n            }\n        }\n    ]\n});\nconst result = await translator.translate('Hola mundo', 'auto', 'en');\nexpect(result.translation).to.equal('Hello world');\nexpect(result.detectedLanguage).to.equal('es');\nexpect(result.confidence).to.equal(0.92);\n// Verify API call does not include 'from' parameter\nconst postCall = axios.post.getCall(0);\nexpect(postCall.args[2].params.from).to.be.undefined;",
                  "err": {},
                  "uuid": "de6a8ed5-f805-4038-9a4d-daec3ad69083",
                  "parentUUID": "66e65a30-8a7e-4107-b715-9e8845fa2723",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle API errors gracefully",
                  "fullTitle": "AzureTranslator translate should handle API errors gracefully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mock API error\naxios.post.rejects({\n    response: {\n        data: {\n            error: {\n                code: 401,\n                message: 'Access denied due to invalid subscription key'\n            }\n        }\n    }\n});\ntry {\n    await translator.translate('Hello world', 'en', 'es');\n    expect.fail('Should have thrown an error');\n} catch (error) {\n    expect(error.message).to.include('Access denied');\n    // Check metrics update\n    expect(translator.metrics.successRate).to.be.lessThan(1.0);\n    expect(translator.metrics.lastError).to.include('Access denied');\n}",
                  "err": {},
                  "uuid": "c131fd3e-a5aa-497c-bd74-fd662c48f31f",
                  "parentUUID": "66e65a30-8a7e-4107-b715-9e8845fa2723",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle text formatting options",
                  "fullTitle": "AzureTranslator translate should handle text formatting options",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mock successful translation response\naxios.post.resolves({\n    data: [\n        {\n            translations: [\n                {\n                    text: '<p>Hola <b>mundo</b></p>',\n                    to: 'es'\n                }\n            ],\n            detectedLanguage: {\n                language: 'en',\n                score: 0.95\n            }\n        }\n    ]\n});\nawait translator.translate('<p>Hello <b>world</b></p>', 'en', 'es', {\n    textType: 'html',\n    preserveFormatting: true\n});\n// Verify API call includes textType parameter\nconst postCall = axios.post.getCall(0);\nexpect(postCall.args[2].params.textType).to.equal('html');",
                  "err": {},
                  "uuid": "3bcb55bd-049e-4d2a-87b4-d20e55436ae1",
                  "parentUUID": "66e65a30-8a7e-4107-b715-9e8845fa2723",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respect formality setting when available",
                  "fullTitle": "AzureTranslator translate should respect formality setting when available",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mock successful translation response\naxios.post.resolves({\n    data: [\n        {\n            translations: [\n                {\n                    text: 'Hola mundo',\n                    to: 'es'\n                }\n            ]\n        }\n    ]\n});\nawait translator.translate('Hello world', 'en', 'es', {\n    formality: 'formal'\n});\n// Verify API call includes textType parameter\nconst postCall = axios.post.getCall(0);\n// Check if the API supports formality parameter\nif (translator.supportsFormality) {\n    expect(postCall.args[2].params).to.include({ 'formality': 'formal' });\n}",
                  "err": {},
                  "uuid": "260ccc13-8368-4365-ab51-ee8a757bf697",
                  "parentUUID": "66e65a30-8a7e-4107-b715-9e8845fa2723",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "de6a8ed5-f805-4038-9a4d-daec3ad69083",
                "c131fd3e-a5aa-497c-bd74-fd662c48f31f",
                "3bcb55bd-049e-4d2a-87b4-d20e55436ae1",
                "260ccc13-8368-4365-ab51-ee8a757bf697"
              ],
              "failures": [
                "47524a7c-9ab2-46e0-8e11-aeb1d23597a4"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "c1d8703c-ee59-4876-bf06-4ad7837f0152",
              "title": "detectLanguage",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/azure-translator.test.js",
              "file": "/tests/unit/services/translation/azure-translator.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"detectLanguage\"",
                  "fullTitle": "AzureTranslator detectLanguage \"before each\" hook in \"detectLanguage\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "translator.isInitialized = true;",
                  "err": {},
                  "uuid": "e593c4d2-ee67-4618-bc8c-0e609b214222",
                  "parentUUID": "c1d8703c-ee59-4876-bf06-4ad7837f0152",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should detect language correctly",
                  "fullTitle": "AzureTranslator detectLanguage should detect language correctly",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Mock successful language detection\naxios.post.resolves({\n    data: [\n        {\n            language: 'es',\n            score: 0.95,\n            isTranslationSupported: true,\n            isTransliterationSupported: false\n        }\n    ]\n});\nconst result = await translator.detectLanguage('Hola mundo');\nexpect(result.language).to.equal('es');\nexpect(result.confidence).to.equal(0.95);\nexpect(result.isTranslationSupported).to.be.true;\nexpect(axios.post.calledOnce).to.be.true;\n// Verify correct API call\nconst postCall = axios.post.getCall(0);\nexpect(postCall.args[0]).to.include('detect');\nexpect(postCall.args[1]).to.deep.equal([{ text: 'Hola mundo' }]);",
                  "err": {
                    "message": "AssertionError: expected undefined to be true",
                    "estack": "AssertionError: expected undefined to be true\n    at Context.<anonymous> (tests/unit/services/translation/azure-translator.test.js:268:56)",
                    "diff": null
                  },
                  "uuid": "9a6fbadf-261e-4b52-b562-670daa28a9c9",
                  "parentUUID": "c1d8703c-ee59-4876-bf06-4ad7837f0152",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle empty text in language detection",
                  "fullTitle": "AzureTranslator detectLanguage should handle empty text in language detection",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "try {\n    await translator.detectLanguage('');\n    expect.fail('Should have thrown an error');\n} catch (error) {\n    expect(error.message).to.include('Text cannot be empty');\n}",
                  "err": {
                    "message": "AssertionError: expected 'Cannot read properties of undefined (…' to include 'Text cannot be empty'",
                    "estack": "AssertionError: expected 'Cannot read properties of undefined (…' to include 'Text cannot be empty'\n    at Context.<anonymous> (tests/unit/services/translation/azure-translator.test.js:282:42)",
                    "diff": null
                  },
                  "uuid": "66f638ad-bf6e-4e1c-b194-679eda449002",
                  "parentUUID": "c1d8703c-ee59-4876-bf06-4ad7837f0152",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "9a6fbadf-261e-4b52-b562-670daa28a9c9",
                "66f638ad-bf6e-4e1c-b194-679eda449002"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "72d6d677-a9ad-4576-bf8b-8fa55836b5ed",
          "title": "GPT4oTranslator",
          "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/gpt4o-translator.test.js",
          "file": "/tests/unit/services/translation/gpt4o-translator.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"GPT4oTranslator\"",
              "fullTitle": "GPT4oTranslator \"before each\" hook in \"GPT4oTranslator\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox = sinon.createSandbox();\ntranslator = new GPT4oTranslator({\n    apiKey: 'test-api-key',\n    model: 'gpt-4o',\n    temperature: 0.1\n});",
              "err": {},
              "uuid": "ece4a568-f5c2-40f0-a123-2f0886fd9214",
              "parentUUID": "72d6d677-a9ad-4576-bf8b-8fa55836b5ed",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"GPT4oTranslator\"",
              "fullTitle": "GPT4oTranslator \"after each\" hook in \"GPT4oTranslator\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore();",
              "err": {},
              "uuid": "cff82a73-0890-4e08-b042-1777d44c3ac8",
              "parentUUID": "72d6d677-a9ad-4576-bf8b-8fa55836b5ed",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "c3000f45-63d1-4659-8fdb-53f120cc2b69",
              "title": "initialization",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/gpt4o-translator.test.js",
              "file": "/tests/unit/services/translation/gpt4o-translator.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should initialize successfully with valid API key",
                  "fullTitle": "GPT4oTranslator initialization should initialize successfully with valid API key",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Mock the OpenAI constructor and client methods\nconst mockOpenAI = {\n    chat: {\n        completions: {\n            create: sandbox.stub().resolves({\n                id: 'test-completion-id',\n                choices: [{ message: { content: 'Test response' } }],\n                usage: { total_tokens: 10 }\n            })\n        }\n    }\n};\nglobal.OpenAI = sandbox.stub().returns(mockOpenAI);\nconst result = await translator.initialize();\nexpect(result.success).to.be.true;\nexpect(translator.isInitialized).to.be.true;\nexpect(translator.openai).to.equal(mockOpenAI);",
                  "err": {
                    "message": "Error: GPT-4o connection test failed: Connection test response was unexpected",
                    "estack": "Error: GPT-4o connection test failed: Connection test response was unexpected\n    at GPT4oTranslator.testConnection (src/services/translation/gpt4o-translator.js:95:19)\n    at async GPT4oTranslator.initialize (src/services/translation/gpt4o-translator.js:57:13)\n    at async Context.<anonymous> (tests/unit/services/translation/gpt4o-translator.test.js:40:28)",
                    "diff": null
                  },
                  "uuid": "f76ede2b-28b1-4fec-b954-68c7a8d1b798",
                  "parentUUID": "c3000f45-63d1-4659-8fdb-53f120cc2b69",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle missing API key",
                  "fullTitle": "GPT4oTranslator initialization should handle missing API key",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "translator = new GPT4oTranslator({ apiKey: null });\ntry {\n    await translator.initialize();\n    expect.fail('Should have thrown an error');\n} catch (error) {\n    expect(error.message).to.include('API key');\n}",
                  "err": {
                    "message": "AssertionError: expected 'GPT-4o connection test failed: Connec…' to include 'API key'",
                    "estack": "AssertionError: expected 'GPT-4o connection test failed: Connec…' to include 'API key'\n    at Context.<anonymous> (tests/unit/services/translation/gpt4o-translator.test.js:54:42)",
                    "diff": null
                  },
                  "uuid": "e6864762-d5e5-4a92-b88d-a7a193232cfa",
                  "parentUUID": "c3000f45-63d1-4659-8fdb-53f120cc2b69",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "f76ede2b-28b1-4fec-b954-68c7a8d1b798",
                "e6864762-d5e5-4a92-b88d-a7a193232cfa"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "a2e40b35-2e1e-4437-8242-87c19a8fe832",
              "title": "translate",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/gpt4o-translator.test.js",
              "file": "/tests/unit/services/translation/gpt4o-translator.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"translate\"",
                  "fullTitle": "GPT4oTranslator translate \"before each\" hook in \"translate\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Setup initialized translator\ntranslator.isInitialized = true;\ntranslator.openai = {\n    chat: {\n        completions: {\n            create: sandbox.stub()\n        }\n    }\n};\n// Mock loadCulturalProfiles\nsandbox.stub(translator, 'loadCulturalProfiles');",
                  "err": {},
                  "uuid": "668b5b19-040a-488f-9bf4-b0662075eae7",
                  "parentUUID": "a2e40b35-2e1e-4437-8242-87c19a8fe832",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should translate text successfully",
                  "fullTitle": "GPT4oTranslator translate should translate text successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Mock successful translation response\nconst mockCompletion = {\n    id: 'test-completion-id',\n    choices: [\n        {\n            message: {\n                content: JSON.stringify({\n                    translation: 'Hola mundo',\n                    confidence: 0.95,\n                    reasoning: 'Simple translation of a common phrase',\n                    alternatives: ['Saludos mundo'],\n                    formality: 'neutral',\n                    cultural_notes: 'Standard greeting'\n                })\n            }\n        }\n    ],\n    usage: {\n        total_tokens: 25\n    }\n};\ntranslator.openai.chat.completions.create.resolves(mockCompletion);\nconst result = await translator.translate('Hello world', 'en', 'es');\nexpect(result.translation).to.equal('Hola mundo');\nexpect(result.confidence).to.equal(0.95);\nexpect(result.service).to.equal('gpt4o');\nexpect(result.alternatives).to.deep.equal(['Saludos mundo']);\nexpect(translator.openai.chat.completions.create.calledOnce).to.be.true;",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'tone')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'tone')\n    at GPT4oTranslator.buildTranslationContext (src/services/translation/gpt4o-translator.js:272:56)\n    at GPT4oTranslator.translate (src/services/translation/gpt4o-translator.js:162:55)\n    at Context.<anonymous> (tests/unit/services/translation/gpt4o-translator.test.js:100:45)",
                    "diff": null
                  },
                  "uuid": "216fd6bf-18df-449f-b16d-da09ad1653fd",
                  "parentUUID": "a2e40b35-2e1e-4437-8242-87c19a8fe832",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle API errors gracefully",
                  "fullTitle": "GPT4oTranslator translate should handle API errors gracefully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Mock API error\ntranslator.openai.chat.completions.create.rejects(\n    new Error('Rate limit exceeded')\n);\ntry {\n    await translator.translate('Hello world', 'en', 'es');\n    expect.fail('Should have thrown an error');\n} catch (error) {\n    expect(error.message).to.include('Rate limit exceeded');\n}",
                  "err": {
                    "message": "AssertionError: expected 'Cannot read properties of undefined (…' to include 'Rate limit exceeded'",
                    "estack": "AssertionError: expected 'Cannot read properties of undefined (…' to include 'Rate limit exceeded'\n    at Context.<anonymous> (tests/unit/services/translation/gpt4o-translator.test.js:119:42)",
                    "diff": null
                  },
                  "uuid": "8497f4fc-6e73-4a7d-8400-5edea2fb94de",
                  "parentUUID": "a2e40b35-2e1e-4437-8242-87c19a8fe832",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle malformed API responses",
                  "fullTitle": "GPT4oTranslator translate should handle malformed API responses",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Mock invalid JSON response\nconst mockCompletion = {\n    id: 'test-completion-id',\n    choices: [\n        {\n            message: {\n                content: 'This is not valid JSON'\n            }\n        }\n    ],\n    usage: {\n        total_tokens: 10\n    }\n};\ntranslator.openai.chat.completions.create.resolves(mockCompletion);\ntry {\n    await translator.translate('Hello world', 'en', 'es');\n    expect.fail('Should have thrown an error');\n} catch (error) {\n    expect(error.message).to.include('Failed to parse translation response');\n}",
                  "err": {
                    "message": "AssertionError: expected 'Cannot read properties of undefined (…' to include 'Failed to parse translation response'",
                    "estack": "AssertionError: expected 'Cannot read properties of undefined (…' to include 'Failed to parse translation response'\n    at Context.<anonymous> (tests/unit/services/translation/gpt4o-translator.test.js:145:42)",
                    "diff": null
                  },
                  "uuid": "458d13a6-d063-41e1-accd-04438f221324",
                  "parentUUID": "a2e40b35-2e1e-4437-8242-87c19a8fe832",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update conversation context when provided",
                  "fullTitle": "GPT4oTranslator translate should update conversation context when provided",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Mock successful translation\nconst mockCompletion = {\n    id: 'test-completion-id',\n    choices: [\n        {\n            message: {\n                content: JSON.stringify({\n                    translation: 'Hola mundo',\n                    confidence: 0.95\n                })\n            }\n        }\n    ],\n    usage: {\n        total_tokens: 15\n    }\n};\ntranslator.openai.chat.completions.create.resolves(mockCompletion);\n// Mock the updateConversationContext method\nconst updateContextSpy = sandbox.spy(translator, 'updateConversationContext');\nawait translator.translate('Hello world', 'en', 'es', {\n    conversationId: 'test-conversation'\n});\nexpect(updateContextSpy.calledOnce).to.be.true;\nexpect(updateContextSpy.args[0][0]).to.equal('test-conversation');\nexpect(updateContextSpy.args[0][1]).to.equal('Hello world');\nexpect(updateContextSpy.args[0][2]).to.equal('Hola mundo');",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'tone')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'tone')\n    at GPT4oTranslator.buildTranslationContext (src/services/translation/gpt4o-translator.js:272:56)\n    at GPT4oTranslator.translate (src/services/translation/gpt4o-translator.js:162:55)\n    at Context.<anonymous> (tests/unit/services/translation/gpt4o-translator.test.js:173:30)",
                    "diff": null
                  },
                  "uuid": "8ef9e7d8-9876-4b14-a7b9-b14acd194938",
                  "parentUUID": "a2e40b35-2e1e-4437-8242-87c19a8fe832",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "216fd6bf-18df-449f-b16d-da09ad1653fd",
                "8497f4fc-6e73-4a7d-8400-5edea2fb94de",
                "458d13a6-d063-41e1-accd-04438f221324",
                "8ef9e7d8-9876-4b14-a7b9-b14acd194938"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "63f80370-9fdb-4d38-b4d8-f4ad1aa91192",
              "title": "buildTranslationContext",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/gpt4o-translator.test.js",
              "file": "/tests/unit/services/translation/gpt4o-translator.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"buildTranslationContext\"",
                  "fullTitle": "GPT4oTranslator buildTranslationContext \"before each\" hook in \"buildTranslationContext\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Setup cultural profiles\ntranslator.culturalProfiles = new Map();\ntranslator.culturalProfiles.set('default', {\n    tone: 'balanced',\n    formality: 'neutral',\n    culturalNotes: 'Balance accuracy with natural flow in target language.',\n    prioritizeAccuracy: true\n});\ntranslator.culturalProfiles.set('business', {\n    tone: 'professional',\n    formality: 'formal',\n    culturalNotes: 'Use business terminology, maintain professional tone.',\n    prioritizeAccuracy: true\n});",
                  "err": {},
                  "uuid": "950174ad-fdaa-4d6d-b0b6-1a979c3f2a9d",
                  "parentUUID": "63f80370-9fdb-4d38-b4d8-f4ad1aa91192",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should build appropriate context for translation",
                  "fullTitle": "GPT4oTranslator buildTranslationContext should build appropriate context for translation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mock getConversationContext\nsandbox.stub(translator, 'getConversationContext').returns('Previous: Hello -> Hola');\nconst params = {\n    text: 'How are you today?',\n    fromLanguage: 'en',\n    toLanguage: 'es',\n    profile: 'business',\n    preserveFormatting: true,\n    context: 'Business meeting context',\n    conversationId: 'test-conversation'\n};\nconst { systemPrompt, userPrompt } = translator.buildTranslationContext(params);\nexpect(systemPrompt).to.include('professional translator');\nexpect(systemPrompt).to.include('Business meeting context');\nexpect(systemPrompt).to.include('TRANSLATION REQUIREMENTS');\nexpect(systemPrompt).to.include('professional'); // tone\nexpect(systemPrompt).to.include('formal'); // formality\nexpect(userPrompt).to.include('Translate this en text to es');\nexpect(userPrompt).to.include('How are you today?');",
                  "err": {},
                  "uuid": "471aebbc-5698-4169-9982-4d72a10880c7",
                  "parentUUID": "63f80370-9fdb-4d38-b4d8-f4ad1aa91192",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle different profiles correctly",
                  "fullTitle": "GPT4oTranslator buildTranslationContext should handle different profiles correctly",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const params = {\n    text: 'Hello world',\n    fromLanguage: 'en',\n    toLanguage: 'fr',\n    profile: 'default',\n    preserveFormatting: true\n};\nconst { systemPrompt } = translator.buildTranslationContext(params);\nexpect(systemPrompt).to.include('balanced'); // tone\nexpect(systemPrompt).to.include('neutral'); // formality\nexpect(systemPrompt).to.include('Balance accuracy with natural flow');",
                  "err": {},
                  "uuid": "0c3d0d72-2be6-4633-bc6a-10fd86fc2394",
                  "parentUUID": "63f80370-9fdb-4d38-b4d8-f4ad1aa91192",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "471aebbc-5698-4169-9982-4d72a10880c7",
                "0c3d0d72-2be6-4633-bc6a-10fd86fc2394"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "7ab34605-29fc-450d-a427-45841d4b91bc",
              "title": "updateConversationContext",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/gpt4o-translator.test.js",
              "file": "/tests/unit/services/translation/gpt4o-translator.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should add new entries to conversation context",
                  "fullTitle": "GPT4oTranslator updateConversationContext should add new entries to conversation context",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Initialize empty conversation contexts\ntranslator.conversationContexts = new Map();\ntranslator.config.contextWindowSize = 3;\ntranslator.updateConversationContext(\n    'test-conversation',\n    'Hello',\n    'Hola',\n    'en',\n    'es'\n);\nexpect(translator.conversationContexts.has('test-conversation')).to.be.true;\nconst context = translator.conversationContexts.get('test-conversation');\nexpect(context.length).to.equal(1);\nexpect(context[0].original).to.equal('Hello');\nexpect(context[0].translated).to.equal('Hola');",
                  "err": {},
                  "uuid": "00925a51-f3ef-4f46-a72b-b4c0240a298f",
                  "parentUUID": "7ab34605-29fc-450d-a427-45841d4b91bc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should limit context size to configured window",
                  "fullTitle": "GPT4oTranslator updateConversationContext should limit context size to configured window",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Initialize conversation with existing entries\ntranslator.conversationContexts = new Map();\ntranslator.config.contextWindowSize = 2;\nconst existingContext = [\n    {\n        timestamp: Date.now() - 3000,\n        original: 'Hello',\n        translated: 'Hola',\n        fromLanguage: 'en',\n        toLanguage: 'es'\n    },\n    {\n        timestamp: Date.now() - 2000,\n        original: 'How are you?',\n        translated: '¿Cómo estás?',\n        fromLanguage: 'en',\n        toLanguage: 'es'\n    }\n];\ntranslator.conversationContexts.set('test-conversation', existingContext);\n// Add a new entry\ntranslator.updateConversationContext(\n    'test-conversation',\n    'Good morning',\n    'Buenos días',\n    'en',\n    'es'\n);\n// Should keep only the last 2 entries\nconst context = translator.conversationContexts.get('test-conversation');\nexpect(context.length).to.equal(2);\nexpect(context[0].original).to.equal('How are you?');\nexpect(context[1].original).to.equal('Good morning');",
                  "err": {
                    "message": "AssertionError: expected 3 to equal 2",
                    "estack": "AssertionError: expected 3 to equal 2\n    at Context.<anonymous> (tests/unit/services/translation/gpt4o-translator.test.js:300:39)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": "- 3\n+ 2\n"
                  },
                  "uuid": "4708eee9-2cef-49b4-8a17-8461b08be134",
                  "parentUUID": "7ab34605-29fc-450d-a427-45841d4b91bc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "00925a51-f3ef-4f46-a72b-b4c0240a298f"
              ],
              "failures": [
                "4708eee9-2cef-49b4-8a17-8461b08be134"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "7e8be573-47bd-42b3-8638-c98f4dbaa332",
          "title": "TranslationManager",
          "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/translation-manager.test.js",
          "file": "/tests/unit/services/translation/translation-manager.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"TranslationManager\"",
              "fullTitle": "TranslationManager \"before each\" hook in \"TranslationManager\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox = sinon.createSandbox();\ntranslationManager = new TranslationManager();",
              "err": {},
              "uuid": "07780a47-86d3-4de9-ac72-b2ac686b6eba",
              "parentUUID": "7e8be573-47bd-42b3-8638-c98f4dbaa332",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"TranslationManager\"",
              "fullTitle": "TranslationManager \"after each\" hook in \"TranslationManager\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore();",
              "err": {},
              "uuid": "3a97a9bb-7713-4ca4-a594-a27736915573",
              "parentUUID": "7e8be573-47bd-42b3-8638-c98f4dbaa332",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "ea8012ff-ca6c-4385-b4b7-fbe54574ffce",
              "title": "initialization",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/translation-manager.test.js",
              "file": "/tests/unit/services/translation/translation-manager.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should initialize successfully with all services",
                  "fullTitle": "TranslationManager initialization should initialize successfully with all services",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Mock all service initializations\nconst mockDeeplInit = sandbox.stub(translationManager.services.deepl, 'initialize').resolves({ success: true });\nconst mockGpt4oInit = sandbox.stub(translationManager.services.gpt4o, 'initialize').resolves({ success: true });\nconst mockGoogleInit = sandbox.stub(translationManager.services.google, 'initialize').resolves({ success: true });\nconst mockAzureInit = sandbox.stub(translationManager.services.azure, 'initialize').resolves({ success: true });\n// Mock supporting components\nsandbox.stub(translationManager.languagePairOptimizer, 'initialize').resolves();\nsandbox.stub(translationManager.contextManager, 'initialize').resolves();\nsandbox.stub(translationManager.translationCache, 'initialize').resolves();\nsandbox.stub(translationManager.qualityAssessment, 'initialize').resolves();\nconst result = await translationManager.initialize();\nexpect(result.success).to.be.true;\nexpect(mockDeeplInit.calledOnce).to.be.true;\nexpect(mockGpt4oInit.calledOnce).to.be.true;\nexpect(mockGoogleInit.calledOnce).to.be.true;\nexpect(mockAzureInit.calledOnce).to.be.true;\nexpect(translationManager.isInitialized).to.be.true;",
                  "err": {
                    "message": "TypeError: Cannot stub non-existent property initialize",
                    "estack": "TypeError: Cannot stub non-existent property initialize\n    at Function.stub (node_modules/sinon/lib/sinon/stub.js:82:15)\n    at Sandbox.stub (node_modules/sinon/lib/sinon/sandbox.js:389:39)\n    at Context.<anonymous> (tests/unit/services/translation/translation-manager.test.js:31:21)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "6e308c56-c56c-4607-9e78-a78249d74fb2",
                  "parentUUID": "ea8012ff-ca6c-4385-b4b7-fbe54574ffce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle service initialization failures gracefully",
                  "fullTitle": "TranslationManager initialization should handle service initialization failures gracefully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Mock one service failing\nsandbox.stub(translationManager.services.deepl, 'initialize').resolves({ success: true });\nsandbox.stub(translationManager.services.gpt4o, 'initialize').rejects(new Error('API key not found'));\nsandbox.stub(translationManager.services.google, 'initialize').resolves({ success: true });\nsandbox.stub(translationManager.services.azure, 'initialize').resolves({ success: true });\n// Mock supporting components\nsandbox.stub(translationManager.languagePairOptimizer, 'initialize').resolves();\nsandbox.stub(translationManager.contextManager, 'initialize').resolves();\nsandbox.stub(translationManager.translationCache, 'initialize').resolves();\nsandbox.stub(translationManager.qualityAssessment, 'initialize').resolves();\nconst result = await translationManager.initialize();\nexpect(result.success).to.be.true; // Still succeeds with some services available\nexpect(translationManager.serviceHealth.gpt4o.healthy).to.be.false;\nexpect(translationManager.isInitialized).to.be.true;",
                  "err": {
                    "message": "TypeError: Cannot stub non-existent property initialize",
                    "estack": "TypeError: Cannot stub non-existent property initialize\n    at Function.stub (node_modules/sinon/lib/sinon/stub.js:82:15)\n    at Sandbox.stub (node_modules/sinon/lib/sinon/sandbox.js:389:39)\n    at Context.<anonymous> (tests/unit/services/translation/translation-manager.test.js:54:21)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "522065d7-a1c8-42f5-8d9b-905d598a85ae",
                  "parentUUID": "ea8012ff-ca6c-4385-b4b7-fbe54574ffce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "6e308c56-c56c-4607-9e78-a78249d74fb2",
                "522065d7-a1c8-42f5-8d9b-905d598a85ae"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "0593a3b1-64ee-498c-b9f7-e151824353d1",
              "title": "translate",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/translation-manager.test.js",
              "file": "/tests/unit/services/translation/translation-manager.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"translate\"",
                  "fullTitle": "TranslationManager translate \"before each\" hook in \"translate\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Setup initialized translation manager\ntranslationManager.isInitialized = true;\n// Mock the supporting components\nsandbox.stub(translationManager.languagePairOptimizer, 'getBestServiceForLanguagePair').returns('deepl');\nsandbox.stub(translationManager.translationCache, 'get').resolves(null);\nsandbox.stub(translationManager.contextManager, 'getConversationContext').resolves('');",
                  "err": {},
                  "uuid": "d970013a-9d0f-4743-bf8c-a566ed7e88b7",
                  "parentUUID": "0593a3b1-64ee-498c-b9f7-e151824353d1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should translate text using the best service",
                  "fullTitle": "TranslationManager translate should translate text using the best service",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mock successful translation\nconst mockTranslation = {\n    success: true,\n    translation: 'Hola, mundo',\n    confidence: 0.95,\n    service: 'deepl',\n    processingTime: 120,\n    fromLanguage: 'en',\n    toLanguage: 'es'\n};\nsandbox.stub(translationManager, 'attemptTranslation').resolves(mockTranslation);\nsandbox.stub(translationManager.qualityAssessment, 'assessTranslation').resolves({\n    score: 0.92,\n    metrics: {\n        accuracy: 0.95,\n        fluency: 0.90,\n        cultural: 0.88\n    }\n});\nconst result = await translationManager.translate('Hello, world', 'en', 'es');\nexpect(result.success).to.be.true;\nexpect(result.translation).to.equal('Hola, mundo');\nexpect(result.service).to.equal('deepl');",
                  "err": {},
                  "uuid": "84a65159-e4bf-4fdf-8cf1-bbe91d25c2de",
                  "parentUUID": "0593a3b1-64ee-498c-b9f7-e151824353d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should use cached translation when available",
                  "fullTitle": "TranslationManager translate should use cached translation when available",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Mock cache hit\nconst cachedTranslation = {\n    success: true,\n    translation: 'Hola, mundo',\n    confidence: 0.95,\n    service: 'deepl',\n    processingTime: 5, // Fast because cached\n    fromLanguage: 'en',\n    toLanguage: 'es',\n    cached: true\n};\nsandbox.stub(translationManager.translationCache, 'get').resolves(cachedTranslation);\n// The attemptTranslation should not be called because of cache hit\nconst attemptStub = sandbox.stub(translationManager, 'attemptTranslation');\nconst result = await translationManager.translate('Hello, world', 'en', 'es', { useCache: true });\nexpect(result.success).to.be.true;\nexpect(result.translation).to.equal('Hola, mundo');\nexpect(result.cached).to.be.true;\nexpect(attemptStub.called).to.be.false;",
                  "err": {
                    "message": "TypeError: Attempted to wrap get which is already wrapped",
                    "estack": "TypeError: Attempted to wrap get which is already wrapped\n    at checkWrappedMethod (node_modules/sinon/lib/sinon/util/core/wrap-method.js:67:21)\n    at wrapMethod (node_modules/sinon/lib/sinon/util/core/wrap-method.js:132:13)\n    at Function.stub (node_modules/sinon/lib/sinon/stub.js:130:44)\n    at Sandbox.stub (node_modules/sinon/lib/sinon/sandbox.js:389:39)\n    at Context.<anonymous> (tests/unit/services/translation/translation-manager.test.js:120:21)\n--------------\nError: Stack Trace for original\n    at extendObjectWithWrappedMethods (node_modules/sinon/lib/sinon/util/core/wrap-method.js:173:34)\n    at wrapMethod (node_modules/sinon/lib/sinon/util/core/wrap-method.js:161:5)\n    at Function.stub (node_modules/sinon/lib/sinon/stub.js:130:44)\n    at Sandbox.stub (node_modules/sinon/lib/sinon/sandbox.js:389:39)\n    at Context.<anonymous> (tests/unit/services/translation/translation-manager.test.js:74:21)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "56592458-a33d-4377-88fb-321b5dbd721c",
                  "parentUUID": "0593a3b1-64ee-498c-b9f7-e151824353d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should try fallback services when primary service fails",
                  "fullTitle": "TranslationManager translate should try fallback services when primary service fails",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Primary service fails\nsandbox.stub(translationManager, 'attemptTranslation')\n    .withArgs('deepl', sinon.match.any, sinon.match.any, sinon.match.any, sinon.match.any, sinon.match.any)\n    .resolves({\n        success: false,\n        error: 'Service unavailable',\n        service: 'deepl'\n    });\n// Fallback succeeds\nsandbox.stub(translationManager, 'fallbackTranslation').resolves({\n    success: true,\n    translation: 'Hola, mundo',\n    confidence: 0.85,\n    service: 'google',\n    processingTime: 180,\n    fromLanguage: 'en',\n    toLanguage: 'es'\n});\nsandbox.stub(translationManager.qualityAssessment, 'assessTranslation').resolves({\n    score: 0.85,\n    metrics: {\n        accuracy: 0.87,\n        fluency: 0.82,\n        cultural: 0.80\n    }\n});\nconst result = await translationManager.translate('Hello, world', 'en', 'es');\nexpect(result.success).to.be.true;\nexpect(result.translation).to.equal('Hola, mundo');\nexpect(result.service).to.equal('google');",
                  "err": {},
                  "uuid": "a76b75a1-d025-4fc2-bcf2-a4043450e3d7",
                  "parentUUID": "0593a3b1-64ee-498c-b9f7-e151824353d1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "84a65159-e4bf-4fdf-8cf1-bbe91d25c2de",
                "a76b75a1-d025-4fc2-bcf2-a4043450e3d7"
              ],
              "failures": [
                "56592458-a33d-4377-88fb-321b5dbd721c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "ca936fa6-551e-47d0-a1e1-b4b51d29e2c9",
              "title": "attemptTranslation",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/translation-manager.test.js",
              "file": "/tests/unit/services/translation/translation-manager.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"attemptTranslation\"",
                  "fullTitle": "TranslationManager attemptTranslation \"before each\" hook in \"attemptTranslation\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "translationManager.isInitialized = true;",
                  "err": {},
                  "uuid": "293767e7-5f2d-4246-a2d9-de59cf3709ec",
                  "parentUUID": "ca936fa6-551e-47d0-a1e1-b4b51d29e2c9",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should translate text with the specified service",
                  "fullTitle": "TranslationManager attemptTranslation should translate text with the specified service",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mock deepl service\nconst mockResult = {\n    translation: 'Hola, mundo',\n    confidence: 0.95,\n    detectedLanguage: 'en'\n};\nsandbox.stub(translationManager.services.deepl, 'translate').resolves(mockResult);\nconst result = await translationManager.attemptTranslation(\n    'deepl',\n    'Hello, world',\n    'en',\n    'es'\n);\nexpect(result.success).to.be.true;\nexpect(result.translation).to.equal('Hola, mundo');\nexpect(result.service).to.equal('deepl');\nexpect(translationManager.serviceHealth.deepl.healthy).to.be.true;",
                  "err": {},
                  "uuid": "87ab7c46-f84e-429f-9dfd-d0476341d356",
                  "parentUUID": "ca936fa6-551e-47d0-a1e1-b4b51d29e2c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle service errors gracefully",
                  "fullTitle": "TranslationManager attemptTranslation should handle service errors gracefully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mock service error\nsandbox.stub(translationManager.services.deepl, 'translate')\n    .rejects(new Error('API rate limit exceeded'));\nconst result = await translationManager.attemptTranslation(\n    'deepl',\n    'Hello, world',\n    'en',\n    'es'\n);\nexpect(result.success).to.be.false;\nexpect(result.error).to.include('API rate limit exceeded');\nexpect(result.service).to.equal('deepl');\nexpect(translationManager.serviceHealth.deepl.healthy).to.be.false;",
                  "err": {},
                  "uuid": "523b1a01-27b5-4bcd-a44e-54ba63496b67",
                  "parentUUID": "ca936fa6-551e-47d0-a1e1-b4b51d29e2c9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "87ab7c46-f84e-429f-9dfd-d0476341d356",
                "523b1a01-27b5-4bcd-a44e-54ba63496b67"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "09ebdf10-a57a-4f20-9653-00a339d3a56f",
              "title": "fallbackTranslation",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/translation-manager.test.js",
              "file": "/tests/unit/services/translation/translation-manager.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should try alternative services when primary fails",
                  "fullTitle": "TranslationManager fallbackTranslation should try alternative services when primary fails",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "translationManager.isInitialized = true;\n// Mock successful translation with Google after DeepL fails\nsandbox.stub(translationManager, 'attemptTranslation')\n    .withArgs('google', sinon.match.any, sinon.match.any, sinon.match.any, sinon.match.any, sinon.match.any)\n    .resolves({\n        success: true,\n        translation: 'Hola, mundo',\n        confidence: 0.85,\n        service: 'google',\n        processingTime: 150\n    })\n    .withArgs('deepl', sinon.match.any, sinon.match.any, sinon.match.any, sinon.match.any, sinon.match.any)\n    .resolves({\n        success: false,\n        error: 'Service unavailable',\n        service: 'deepl'\n    });\n// Mock service health\ntranslationManager.serviceHealth = {\n    deepl: { healthy: false },\n    google: { healthy: true },\n    azure: { healthy: true },\n    gpt4o: { healthy: true }\n};\nconst result = await translationManager.fallbackTranslation(\n    'Hello, world',\n    'en',\n    'es',\n    '',\n    'deepl'\n);\nexpect(result.success).to.be.true;\nexpect(result.translation).to.equal('Hola, mundo');\nexpect(result.service).to.equal('google');",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'success')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'success')\n    at TranslationManager.fallbackTranslation (src/services/translation/translation-manager.js:383:24)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async Context.<anonymous> (tests/unit/services/translation/translation-manager.test.js:247:28)",
                    "diff": null
                  },
                  "uuid": "c45cf4eb-eeda-4a90-986b-7f78b385e7a3",
                  "parentUUID": "09ebdf10-a57a-4f20-9653-00a339d3a56f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error when all services fail",
                  "fullTitle": "TranslationManager fallbackTranslation should return error when all services fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "translationManager.isInitialized = true;\n// Mock all services failing\nsandbox.stub(translationManager, 'attemptTranslation').resolves({\n    success: false,\n    error: 'Service unavailable'\n});\nconst result = await translationManager.fallbackTranslation(\n    'Hello, world',\n    'en',\n    'es',\n    '',\n    'deepl'\n);\nexpect(result.success).to.be.false;\nexpect(result.error).to.include('All translation services failed');",
                  "err": {},
                  "uuid": "19d36357-c371-41b9-be11-b7a7909893f4",
                  "parentUUID": "09ebdf10-a57a-4f20-9653-00a339d3a56f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "19d36357-c371-41b9-be11-b7a7909893f4"
              ],
              "failures": [
                "c45cf4eb-eeda-4a90-986b-7f78b385e7a3"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "7fd02588-e27f-4b26-af78-2233dafb83f2",
          "title": "TranslationService",
          "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/translation-service.test.js",
          "file": "/tests/unit/services/translation/translation-service.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"TranslationService\"",
              "fullTitle": "TranslationService \"before each\" hook in \"TranslationService\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox = sinon.createSandbox();\nservice = new TranslationService({\n    serviceName: 'test-service',\n    apiKey: 'test-api-key'\n});",
              "err": {},
              "uuid": "80ddfa05-89c7-49d8-b218-19e76e3d6848",
              "parentUUID": "7fd02588-e27f-4b26-af78-2233dafb83f2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"TranslationService\"",
              "fullTitle": "TranslationService \"after each\" hook in \"TranslationService\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore();",
              "err": {},
              "uuid": "85770b0d-ced2-4590-b211-6eb3c3bf219f",
              "parentUUID": "7fd02588-e27f-4b26-af78-2233dafb83f2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "d07d384a-894a-4522-af2a-4cb275b40099",
              "title": "initialization",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/translation-service.test.js",
              "file": "/tests/unit/services/translation/translation-service.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create an instance with the provided config",
                  "fullTitle": "TranslationService initialization should create an instance with the provided config",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(service).to.be.an.instanceOf(TranslationService);\nexpect(service.config.serviceName).to.equal('test-service');\nexpect(service.config.apiKey).to.equal('test-api-key');",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'serviceName')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'serviceName')\n    at Context.<anonymous> (tests/unit/services/translation/translation-service.test.js:24:35)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "26826be9-a213-4699-bdc9-d0e84ee1283b",
                  "parentUUID": "d07d384a-894a-4522-af2a-4cb275b40099",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have default values for non-provided config options",
                  "fullTitle": "TranslationService initialization should have default values for non-provided config options",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(service.config.timeout).to.be.a('number');\nexpect(service.config.retries).to.be.a('number');",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'timeout')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'timeout')\n    at Context.<anonymous> (tests/unit/services/translation/translation-service.test.js:29:35)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "96ce8a6e-abaf-4aee-845c-439ab91d4cc8",
                  "parentUUID": "d07d384a-894a-4522-af2a-4cb275b40099",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "26826be9-a213-4699-bdc9-d0e84ee1283b",
                "96ce8a6e-abaf-4aee-845c-439ab91d4cc8"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "dc291433-7236-4d20-beb6-9e917409e3ba",
              "title": "abstract methods",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/translation-service.test.js",
              "file": "/tests/unit/services/translation/translation-service.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should throw error for abstract translate method",
                  "fullTitle": "TranslationService abstract methods should throw error for abstract translate method",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "try {\n    await service.translate('Hello', 'en', 'fr');\n    expect.fail('Should have thrown an error');\n} catch (err) {\n    expect(err.message).to.include('Method not implemented');\n}",
                  "err": {
                    "message": "AssertionError: expected 'Should have thrown an error' to include 'Method not implemented'",
                    "estack": "AssertionError: expected 'Should have thrown an error' to include 'Method not implemented'\n    at Context.<anonymous> (tests/unit/services/translation/translation-service.test.js:40:40)",
                    "diff": null
                  },
                  "uuid": "4f4dd17d-0298-46b6-9dba-11434e71a060",
                  "parentUUID": "dc291433-7236-4d20-beb6-9e917409e3ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error for abstract detectLanguage method",
                  "fullTitle": "TranslationService abstract methods should throw error for abstract detectLanguage method",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "try {\n    await service.detectLanguage('Hello');\n    expect.fail('Should have thrown an error');\n} catch (err) {\n    expect(err.message).to.include('Method not implemented');\n}",
                  "err": {
                    "message": "AssertionError: expected 'Should have thrown an error' to include 'Method not implemented'",
                    "estack": "AssertionError: expected 'Should have thrown an error' to include 'Method not implemented'\n    at Context.<anonymous> (tests/unit/services/translation/translation-service.test.js:49:40)",
                    "diff": null
                  },
                  "uuid": "6a9029bf-7b46-42b9-9ac3-07e1918020a3",
                  "parentUUID": "dc291433-7236-4d20-beb6-9e917409e3ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "4f4dd17d-0298-46b6-9dba-11434e71a060",
                "6a9029bf-7b46-42b9-9ac3-07e1918020a3"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "311baf68-a445-4391-b3ad-f9a69a3673be",
              "title": "utility methods",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/translation-service.test.js",
              "file": "/tests/unit/services/translation/translation-service.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should format language codes correctly",
                  "fullTitle": "TranslationService utility methods should format language codes correctly",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(service.formatLanguageCode('en-US')).to.equal('en');\nexpect(service.formatLanguageCode('zh-CN')).to.equal('zh');\nexpect(service.formatLanguageCode('en')).to.equal('en');",
                  "err": {
                    "message": "TypeError: service.formatLanguageCode is not a function",
                    "estack": "TypeError: service.formatLanguageCode is not a function\n    at Context.<anonymous> (tests/unit/services/translation/translation-service.test.js:56:28)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "31eb2399-1de2-42a5-b7dd-3b2472c8bf16",
                  "parentUUID": "311baf68-a445-4391-b3ad-f9a69a3673be",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "31eb2399-1de2-42a5-b7dd-3b2472c8bf16"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e1ea515c-0017-45d2-9972-e844df704c53",
          "title": "ContextManager",
          "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/utils/context-manager.test.js",
          "file": "/tests/unit/services/translation/utils/context-manager.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"ContextManager\"",
              "fullTitle": "ContextManager \"before each\" hook in \"ContextManager\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox = sinon.createSandbox();\ncontextManager = new ContextManager({\n    maxContextEntries: 5,\n    maxContextAgeMs: 1000 // 1 second for faster testing\n});",
              "err": {},
              "uuid": "a507decf-42d2-4fc6-9db8-a539bbe23574",
              "parentUUID": "e1ea515c-0017-45d2-9972-e844df704c53",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"ContextManager\"",
              "fullTitle": "ContextManager \"after each\" hook in \"ContextManager\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore();",
              "err": {},
              "uuid": "d8edb166-10d2-47fd-a2f8-b3a3ca5150b7",
              "parentUUID": "e1ea515c-0017-45d2-9972-e844df704c53",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "59fbc39d-db4a-410d-9449-8c5a1cadd061",
              "title": "initialization",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/utils/context-manager.test.js",
              "file": "/tests/unit/services/translation/utils/context-manager.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should initialize with default settings",
                  "fullTitle": "ContextManager initialization should initialize with default settings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const defaultManager = new ContextManager();\nexpect(defaultManager.config.maxContextEntries).to.be.greaterThan(0);\nexpect(defaultManager.config.maxContextAgeMs).to.be.greaterThan(0);",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'maxContextEntries')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'maxContextEntries')\n    at Context.<anonymous> (tests/unit/services/translation/utils/context-manager.test.js:28:42)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "b45a455c-8f31-415d-9390-423f304b4699",
                  "parentUUID": "59fbc39d-db4a-410d-9449-8c5a1cadd061",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should initialize with custom settings",
                  "fullTitle": "ContextManager initialization should initialize with custom settings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(contextManager.config.maxContextEntries).to.equal(5);\nexpect(contextManager.config.maxContextAgeMs).to.equal(1000);",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'maxContextEntries')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'maxContextEntries')\n    at Context.<anonymous> (tests/unit/services/translation/utils/context-manager.test.js:33:42)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "4870b0c3-4abe-432e-8304-41a7359d6bfe",
                  "parentUUID": "59fbc39d-db4a-410d-9449-8c5a1cadd061",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should initialize empty conversation contexts",
                  "fullTitle": "ContextManager initialization should initialize empty conversation contexts",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(contextManager.conversationContexts).to.be.instanceOf(Map);\nexpect(contextManager.conversationContexts.size).to.equal(0);",
                  "err": {
                    "message": "AssertionError: expected undefined to be an instance of Map",
                    "estack": "AssertionError: expected undefined to be an instance of Map\n    at Context.<anonymous> (tests/unit/services/translation/utils/context-manager.test.js:38:63)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "92ff334b-fd30-4bfd-a66c-e6ba9a510b3e",
                  "parentUUID": "59fbc39d-db4a-410d-9449-8c5a1cadd061",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "b45a455c-8f31-415d-9390-423f304b4699",
                "4870b0c3-4abe-432e-8304-41a7359d6bfe",
                "92ff334b-fd30-4bfd-a66c-e6ba9a510b3e"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "58ae8bdc-58c8-489b-9d79-cf3c7d724354",
              "title": "addTranslationEntry",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/utils/context-manager.test.js",
              "file": "/tests/unit/services/translation/utils/context-manager.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should add entries to the correct conversation",
                  "fullTitle": "ContextManager addTranslationEntry should add entries to the correct conversation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const conversationId = 'conversation1';\nconst entry = {\n    original: 'Hello',\n    translated: 'Hola',\n    isSourceToTarget: true\n};\nawait contextManager.addTranslationEntry(conversationId, entry);\nexpect(contextManager.conversationContexts.has(conversationId)).to.be.true;\nconst context = contextManager.conversationContexts.get(conversationId);\nexpect(context).to.be.an('array');\nexpect(context.length).to.equal(1);\nexpect(context[0].original).to.equal('Hello');\nexpect(context[0].translated).to.equal('Hola');\nexpect(context[0].isSourceToTarget).to.be.true;\nexpect(context[0].timestamp).to.be.a('number');",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'has')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'has')\n    at Context.<anonymous> (tests/unit/services/translation/utils/context-manager.test.js:54:56)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": null
                  },
                  "uuid": "61f39e03-d520-4826-9f55-7efc1c2b7fdb",
                  "parentUUID": "58ae8bdc-58c8-489b-9d79-cf3c7d724354",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle missing conversation ID",
                  "fullTitle": "ContextManager addTranslationEntry should handle missing conversation ID",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// This should not throw\nawait contextManager.addTranslationEntry(null, { original: 'Test' });\n// No entry should be added\nexpect(contextManager.conversationContexts.size).to.equal(0);",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'size')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'size')\n    at Context.<anonymous> (tests/unit/services/translation/utils/context-manager.test.js:69:56)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": null
                  },
                  "uuid": "8b300bcd-5746-467d-b8e8-74420eea05ef",
                  "parentUUID": "58ae8bdc-58c8-489b-9d79-cf3c7d724354",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add multiple entries to the same conversation",
                  "fullTitle": "ContextManager addTranslationEntry should add multiple entries to the same conversation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const conversationId = 'conversation1';\nawait contextManager.addTranslationEntry(conversationId, {\n    original: 'Hello',\n    translated: 'Hola',\n    isSourceToTarget: true\n});\nawait contextManager.addTranslationEntry(conversationId, {\n    original: 'How are you?',\n    translated: '¿Cómo estás?',\n    isSourceToTarget: true\n});\nconst context = contextManager.conversationContexts.get(conversationId);\nexpect(context.length).to.equal(2);",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'get')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'get')\n    at Context.<anonymous> (tests/unit/services/translation/utils/context-manager.test.js:87:65)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": null
                  },
                  "uuid": "2992209e-14e6-4355-92c2-61b7ced17a70",
                  "parentUUID": "58ae8bdc-58c8-489b-9d79-cf3c7d724354",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respect maxContextEntries limit",
                  "fullTitle": "ContextManager addTranslationEntry should respect maxContextEntries limit",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const conversationId = 'conversation1';\n// Add more entries than the limit (5)\nfor (let i = 0; i < 7; i++) {\n    await contextManager.addTranslationEntry(conversationId, {\n        original: `Message ${i}`,\n        translated: `Translated ${i}`,\n        isSourceToTarget: true\n    });\n}\nconst context = contextManager.conversationContexts.get(conversationId);\nexpect(context.length).to.equal(5); // Limited to maxContextEntries\n// The oldest entries should be removed first\nexpect(context[0].original).to.equal('Message 2');\nexpect(context[4].original).to.equal('Message 6');",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'get')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'get')\n    at Context.<anonymous> (tests/unit/services/translation/utils/context-manager.test.js:103:65)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": null
                  },
                  "uuid": "9b67269d-cfb1-4b36-852c-50434868655b",
                  "parentUUID": "58ae8bdc-58c8-489b-9d79-cf3c7d724354",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "61f39e03-d520-4826-9f55-7efc1c2b7fdb",
                "8b300bcd-5746-467d-b8e8-74420eea05ef",
                "2992209e-14e6-4355-92c2-61b7ced17a70",
                "9b67269d-cfb1-4b36-852c-50434868655b"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "9d7927a8-d0d2-4de3-abda-cb7a637ad6bf",
              "title": "getConversationContext",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/utils/context-manager.test.js",
              "file": "/tests/unit/services/translation/utils/context-manager.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return empty string for non-existent conversation",
                  "fullTitle": "ContextManager getConversationContext should return empty string for non-existent conversation",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const context = await contextManager.getConversationContext('nonexistent');\nexpect(context).to.equal('');",
                  "err": {},
                  "uuid": "4fc32693-f824-4a3f-9ea5-3570ea7c262a",
                  "parentUUID": "9d7927a8-d0d2-4de3-abda-cb7a637ad6bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should format context entries correctly",
                  "fullTitle": "ContextManager getConversationContext should format context entries correctly",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const conversationId = 'conversation1';\n// Add entries with timestamps\nconst entry1 = {\n    original: 'Hello',\n    translated: 'Hola',\n    isSourceToTarget: true,\n    timestamp: Date.now() - 500 // 500ms ago\n};\nconst entry2 = {\n    original: 'How are you?',\n    translated: '¿Cómo estás?',\n    isSourceToTarget: true,\n    timestamp: Date.now() - 250 // 250ms ago\n};\nawait contextManager.addTranslationEntry(conversationId, entry1);\nawait contextManager.addTranslationEntry(conversationId, entry2);\nconst context = await contextManager.getConversationContext(conversationId);\n// Context should be a formatted string\nexpect(context).to.be.a('string');\nexpect(context.length).to.be.greaterThan(0);\n// Should contain both entries\nexpect(context).to.include('Hello -> Hola');\nexpect(context).to.include('How are you? -> ¿Cómo estás?');",
                  "err": {
                    "message": "AssertionError: expected +0 to be above +0",
                    "estack": "AssertionError: expected +0 to be above +0\n    at Context.<anonymous> (tests/unit/services/translation/utils/context-manager.test.js:143:42)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": ""
                  },
                  "uuid": "4e58b4f8-dd10-40f9-96dd-b786c6dbc83e",
                  "parentUUID": "9d7927a8-d0d2-4de3-abda-cb7a637ad6bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle bidirectional conversation correctly",
                  "fullTitle": "ContextManager getConversationContext should handle bidirectional conversation correctly",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const conversationId = 'conversation1';\n// Add entries with different directions\nawait contextManager.addTranslationEntry(conversationId, {\n    original: 'Hello',\n    translated: 'Hola',\n    isSourceToTarget: true // source -> target\n});\nawait contextManager.addTranslationEntry(conversationId, {\n    original: 'Bien, ¿y tú?',\n    translated: 'Good, and you?',\n    isSourceToTarget: false // target -> source\n});\nconst context = await contextManager.getConversationContext(conversationId);\n// Should show correct direction for each entry\nexpect(context).to.include('Hello -> Hola');\nexpect(context).to.include('Bien, ¿y tú? <- Good, and you?');",
                  "err": {
                    "message": "AssertionError: expected '' to include 'Hello -> Hola'",
                    "estack": "AssertionError: expected '' to include 'Hello -> Hola'\n    at Context.<anonymous> (tests/unit/services/translation/utils/context-manager.test.js:169:32)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": null
                  },
                  "uuid": "cd3fac5a-f76a-4b24-a9e2-4c691d3e7830",
                  "parentUUID": "9d7927a8-d0d2-4de3-abda-cb7a637ad6bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4fc32693-f824-4a3f-9ea5-3570ea7c262a"
              ],
              "failures": [
                "4e58b4f8-dd10-40f9-96dd-b786c6dbc83e",
                "cd3fac5a-f76a-4b24-a9e2-4c691d3e7830"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "9befd8a1-d7ce-40a7-84a9-cf83bc6158ea",
              "title": "pruneOldEntries",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/utils/context-manager.test.js",
              "file": "/tests/unit/services/translation/utils/context-manager.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should remove entries older than maxContextAgeMs",
                  "fullTitle": "ContextManager pruneOldEntries should remove entries older than maxContextAgeMs",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const conversationId = 'conversation1';\n// Add one older entry and one newer entry\nawait contextManager.addTranslationEntry(conversationId, {\n    original: 'Old message',\n    translated: 'Mensaje antiguo',\n    isSourceToTarget: true,\n    timestamp: Date.now() - 2000 // 2 seconds ago (older than maxContextAgeMs)\n});\nawait contextManager.addTranslationEntry(conversationId, {\n    original: 'New message',\n    translated: 'Mensaje nuevo',\n    isSourceToTarget: true,\n    timestamp: Date.now() - 500 // 0.5 seconds ago (newer than maxContextAgeMs)\n});\n// Prune old entries\ncontextManager.pruneOldEntries(conversationId);\nconst context = contextManager.conversationContexts.get(conversationId);\nexpect(context.length).to.equal(1);\nexpect(context[0].original).to.equal('New message');",
                  "err": {
                    "message": "TypeError: contextManager.pruneOldEntries is not a function",
                    "estack": "TypeError: contextManager.pruneOldEntries is not a function\n    at Context.<anonymous> (tests/unit/services/translation/utils/context-manager.test.js:194:28)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": null
                  },
                  "uuid": "d36461a4-b02c-4b61-9364-42c58ce8a352",
                  "parentUUID": "9befd8a1-d7ce-40a7-84a9-cf83bc6158ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle non-existent conversation ID",
                  "fullTitle": "ContextManager pruneOldEntries should handle non-existent conversation ID",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// This should not throw\ncontextManager.pruneOldEntries('nonexistent');",
                  "err": {
                    "message": "TypeError: contextManager.pruneOldEntries is not a function",
                    "estack": "TypeError: contextManager.pruneOldEntries is not a function\n    at Context.<anonymous> (tests/unit/services/translation/utils/context-manager.test.js:203:28)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "728c7716-4b6b-4b1f-97f5-a933c1e8c03c",
                  "parentUUID": "9befd8a1-d7ce-40a7-84a9-cf83bc6158ea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "d36461a4-b02c-4b61-9364-42c58ce8a352",
                "728c7716-4b6b-4b1f-97f5-a933c1e8c03c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "b0547447-4873-4de0-b4dd-50a1213ba193",
              "title": "clearContext",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/utils/context-manager.test.js",
              "file": "/tests/unit/services/translation/utils/context-manager.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should clear a specific conversation",
                  "fullTitle": "ContextManager clearContext should clear a specific conversation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Add entries to two different conversations\nawait contextManager.addTranslationEntry('conversation1', {\n    original: 'Hello1',\n    translated: 'Hola1'\n});\nawait contextManager.addTranslationEntry('conversation2', {\n    original: 'Hello2',\n    translated: 'Hola2'\n});\n// Clear only one conversation\nawait contextManager.clearContext('conversation1');\nexpect(contextManager.conversationContexts.has('conversation1')).to.be.false;\nexpect(contextManager.conversationContexts.has('conversation2')).to.be.true;",
                  "err": {
                    "message": "TypeError: contextManager.clearContext is not a function",
                    "estack": "TypeError: contextManager.clearContext is not a function\n    at Context.<anonymous> (tests/unit/services/translation/utils/context-manager.test.js:221:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": null
                  },
                  "uuid": "1ad258ed-768b-44ef-bc92-a02c765acb4c",
                  "parentUUID": "b0547447-4873-4de0-b4dd-50a1213ba193",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should clear all conversations when no ID is provided",
                  "fullTitle": "ContextManager clearContext should clear all conversations when no ID is provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Add entries to multiple conversations\nawait contextManager.addTranslationEntry('conversation1', {\n    original: 'Hello1',\n    translated: 'Hola1'\n});\nawait contextManager.addTranslationEntry('conversation2', {\n    original: 'Hello2',\n    translated: 'Hola2'\n});\n// Clear all conversations\nawait contextManager.clearContext();\nexpect(contextManager.conversationContexts.size).to.equal(0);",
                  "err": {
                    "message": "TypeError: contextManager.clearContext is not a function",
                    "estack": "TypeError: contextManager.clearContext is not a function\n    at Context.<anonymous> (tests/unit/services/translation/utils/context-manager.test.js:240:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": null
                  },
                  "uuid": "7b2d3edc-af1e-4d24-b043-f9aa578a3829",
                  "parentUUID": "b0547447-4873-4de0-b4dd-50a1213ba193",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle non-existent conversation ID",
                  "fullTitle": "ContextManager clearContext should handle non-existent conversation ID",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// This should not throw\nawait contextManager.clearContext('nonexistent');",
                  "err": {
                    "message": "TypeError: contextManager.clearContext is not a function",
                    "estack": "TypeError: contextManager.clearContext is not a function\n    at Context.<anonymous> (tests/unit/services/translation/utils/context-manager.test.js:247:34)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "e5bad150-7a6f-4a8b-b0b4-c0000a6f1e3b",
                  "parentUUID": "b0547447-4873-4de0-b4dd-50a1213ba193",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "1ad258ed-768b-44ef-bc92-a02c765acb4c",
                "7b2d3edc-af1e-4d24-b043-f9aa578a3829",
                "e5bad150-7a6f-4a8b-b0b4-c0000a6f1e3b"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "8496bd77-9a12-451b-8645-fa227e5b104a",
              "title": "edge cases",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/utils/context-manager.test.js",
              "file": "/tests/unit/services/translation/utils/context-manager.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle empty entries",
                  "fullTitle": "ContextManager edge cases should handle empty entries",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const conversationId = 'conversation1';\nawait contextManager.addTranslationEntry(conversationId, {\n    original: '',\n    translated: '',\n    isSourceToTarget: true\n});\nconst context = await contextManager.getConversationContext(conversationId);\nexpect(context).to.include(' ->  '); // Empty but correctly formatted",
                  "err": {
                    "message": "AssertionError: expected '' to include ' ->  '",
                    "estack": "AssertionError: expected '' to include ' ->  '\n    at Context.<anonymous> (tests/unit/services/translation/utils/context-manager.test.js:262:32)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": null
                  },
                  "uuid": "e7a17966-65eb-4219-aa45-c85ccb080fff",
                  "parentUUID": "8496bd77-9a12-451b-8645-fa227e5b104a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle entries without timestamps",
                  "fullTitle": "ContextManager edge cases should handle entries without timestamps",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const conversationId = 'conversation1';\nawait contextManager.addTranslationEntry(conversationId, {\n    original: 'Hello',\n    translated: 'Hola',\n    isSourceToTarget: true\n    // No timestamp provided\n});\nconst context = contextManager.conversationContexts.get(conversationId);\nexpect(context[0].timestamp).to.be.a('number');",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'get')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'get')\n    at Context.<anonymous> (tests/unit/services/translation/utils/context-manager.test.js:275:65)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": null
                  },
                  "uuid": "4299a527-3861-4ca3-ab6d-5ed7b947450f",
                  "parentUUID": "8496bd77-9a12-451b-8645-fa227e5b104a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle special characters in context",
                  "fullTitle": "ContextManager edge cases should handle special characters in context",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const conversationId = 'conversation1';\nawait contextManager.addTranslationEntry(conversationId, {\n    original: 'Special: !@#$%^&*()_+{}[]|\\\\:;\"\\'<>,.?/',\n    translated: 'Especial: !@#$%^&*()_+{}[]|\\\\:;\"\\'<>,.?/',\n    isSourceToTarget: true\n});\nconst context = await contextManager.getConversationContext(conversationId);\nexpect(context).to.include('Special: !@#$%^&*()_+{}[]|\\\\:;\"\\'<>,.?/ -> Especial: !@#$%^&*()_+{}[]|\\\\:;\"\\'<>,.?/');",
                  "err": {
                    "message": "AssertionError: expected '' to include 'Special: !@#$%^&*()_+{}[]|\\:;\"\\'<>,.?…'",
                    "estack": "AssertionError: expected '' to include 'Special: !@#$%^&*()_+{}[]|\\:;\"\\'<>,.?…'\n    at Context.<anonymous> (tests/unit/services/translation/utils/context-manager.test.js:289:32)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": null
                  },
                  "uuid": "02466881-d565-4243-a7f4-26a9dffd660c",
                  "parentUUID": "8496bd77-9a12-451b-8645-fa227e5b104a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "e7a17966-65eb-4219-aa45-c85ccb080fff",
                "4299a527-3861-4ca3-ab6d-5ed7b947450f",
                "02466881-d565-4243-a7f4-26a9dffd660c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "28f4995f-40b8-4b42-a4a3-0d31dba7af43",
          "title": "LanguagePairOptimizer",
          "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/utils/language-pair-optimizer.test.js",
          "file": "/tests/unit/services/translation/utils/language-pair-optimizer.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"LanguagePairOptimizer\"",
              "fullTitle": "LanguagePairOptimizer \"before each\" hook in \"LanguagePairOptimizer\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox = sinon.createSandbox();\n// Create mock translation manager\nmockTranslationManager = {\n    services: {\n        deepl: { healthy: true },\n        gpt4o: { healthy: true },\n        google: { healthy: true },\n        azure: { healthy: true }\n    }\n};\noptimizer = new LanguagePairOptimizer(mockTranslationManager);",
              "err": {},
              "uuid": "d441a688-58f6-4a6f-b398-6d0e32c55999",
              "parentUUID": "28f4995f-40b8-4b42-a4a3-0d31dba7af43",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"LanguagePairOptimizer\"",
              "fullTitle": "LanguagePairOptimizer \"after each\" hook in \"LanguagePairOptimizer\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore();",
              "err": {},
              "uuid": "3fe90955-15cd-4acd-8228-f1995b6c5f32",
              "parentUUID": "28f4995f-40b8-4b42-a4a3-0d31dba7af43",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "90e7de0a-3bda-4f32-810e-cfd5bcc2de2f",
              "title": "initialization",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/utils/language-pair-optimizer.test.js",
              "file": "/tests/unit/services/translation/utils/language-pair-optimizer.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should initialize language pairs from config",
                  "fullTitle": "LanguagePairOptimizer initialization should initialize language pairs from config",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(optimizer.languagePairs).to.be.instanceOf(Map);\nexpect(optimizer.languagePairs.size).to.be.greaterThan(0);",
                  "err": {
                    "message": "AssertionError: expected undefined to be an instance of Map",
                    "estack": "AssertionError: expected undefined to be an instance of Map\n    at Context.<anonymous> (tests/unit/services/translation/utils/language-pair-optimizer.test.js:37:51)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "3847d69c-56ef-4ec9-bbe3-3f51f913065f",
                  "parentUUID": "90e7de0a-3bda-4f32-810e-cfd5bcc2de2f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should load language sets from config",
                  "fullTitle": "LanguagePairOptimizer initialization should load language sets from config",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(optimizer.europeanLanguages).to.be.instanceOf(Set);\nexpect(optimizer.europeanLanguages.size).to.be.greaterThan(0);\nexpect(optimizer.europeanLanguages.has('en')).to.be.true;\nexpect(optimizer.asianLanguages).to.be.instanceOf(Set);\nexpect(optimizer.asianLanguages.size).to.be.greaterThan(0);\nexpect(optimizer.asianLanguages.has('ja')).to.be.true;\nexpect(optimizer.adaptationLanguages).to.be.instanceOf(Set);\nexpect(optimizer.adaptationLanguages.size).to.be.greaterThan(0);",
                  "err": {
                    "message": "AssertionError: expected undefined to be an instance of Set",
                    "estack": "AssertionError: expected undefined to be an instance of Set\n    at Context.<anonymous> (tests/unit/services/translation/utils/language-pair-optimizer.test.js:42:55)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "0da21848-c28a-4330-ae3f-2b5ae239f6a8",
                  "parentUUID": "90e7de0a-3bda-4f32-810e-cfd5bcc2de2f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should load default ranking from config",
                  "fullTitle": "LanguagePairOptimizer initialization should load default ranking from config",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(optimizer.defaultRanking).to.be.an('object');\nexpect(optimizer.defaultRanking.quality).to.be.an('array');\nexpect(optimizer.defaultRanking.speed).to.be.an('array');",
                  "err": {
                    "message": "AssertionError: expected undefined to be an object",
                    "estack": "AssertionError: expected undefined to be an object\n    at Context.<anonymous> (tests/unit/services/translation/utils/language-pair-optimizer.test.js:55:52)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "2f87ef24-da26-468b-85ae-2d62a3ae389b",
                  "parentUUID": "90e7de0a-3bda-4f32-810e-cfd5bcc2de2f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "3847d69c-56ef-4ec9-bbe3-3f51f913065f",
                "0da21848-c28a-4330-ae3f-2b5ae239f6a8",
                "2f87ef24-da26-468b-85ae-2d62a3ae389b"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "d0cf0464-912d-4c3a-97a7-8d5e24d60801",
              "title": "getBestServiceForLanguagePair",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/utils/language-pair-optimizer.test.js",
              "file": "/tests/unit/services/translation/utils/language-pair-optimizer.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should select based on language pair config",
                  "fullTitle": "LanguagePairOptimizer getBestServiceForLanguagePair should select based on language pair config",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// English to Spanish is a configured pair\nconst service = optimizer.getBestServiceForLanguagePair('en', 'es', {\n    priority: 'quality',\n    serviceHealth: {\n        deepl: { healthy: true },\n        gpt4o: { healthy: true },\n        google: { healthy: true },\n        azure: { healthy: true }\n    }\n});\n// Should select one of the configured services\nexpect(['deepl', 'gpt4o', 'google', 'azure']).to.include(service);",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'general')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'general')\n    at LanguagePairOptimizer.getBestServiceForLanguagePair (src/services/translation/utils/language-pair-optimizer.js:112:57)\n    at Context.<anonymous> (tests/unit/services/translation/utils/language-pair-optimizer.test.js:64:39)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "5960a420-d02d-4b09-b911-d45b6dba5476",
                  "parentUUID": "d0cf0464-912d-4c3a-97a7-8d5e24d60801",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should prioritize based on quality score",
                  "fullTitle": "LanguagePairOptimizer getBestServiceForLanguagePair should prioritize based on quality score",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Mock a language pair with deepl having highest quality\noptimizer.languagePairs.set('en-fr', {\n    source: 'en',\n    target: 'fr',\n    services: {\n        deepl: { quality: 0.95, speed: 0.8 },\n        gpt4o: { quality: 0.9, speed: 0.7 },\n        google: { quality: 0.85, speed: 0.9 },\n        azure: { quality: 0.8, speed: 0.85 }\n    }\n});\nconst service = optimizer.getBestServiceForLanguagePair('en', 'fr', {\n    priority: 'quality',\n    serviceHealth: {\n        deepl: { healthy: true },\n        gpt4o: { healthy: true },\n        google: { healthy: true },\n        azure: { healthy: true }\n    }\n});\n// Should select deepl as it has highest quality\nexpect(service).to.equal('deepl');",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'set')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'set')\n    at Context.<anonymous> (tests/unit/services/translation/utils/language-pair-optimizer.test.js:80:37)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "eca95e45-7b74-4a5b-936c-95a8f8761c1f",
                  "parentUUID": "d0cf0464-912d-4c3a-97a7-8d5e24d60801",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should prioritize based on speed",
                  "fullTitle": "LanguagePairOptimizer getBestServiceForLanguagePair should prioritize based on speed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Mock a language pair with google having highest speed\noptimizer.languagePairs.set('en-fr', {\n    source: 'en',\n    target: 'fr',\n    services: {\n        deepl: { quality: 0.95, speed: 0.8 },\n        gpt4o: { quality: 0.9, speed: 0.7 },\n        google: { quality: 0.85, speed: 0.9 }, // Highest speed\n        azure: { quality: 0.8, speed: 0.85 }\n    }\n});\nconst service = optimizer.getBestServiceForLanguagePair('en', 'fr', {\n    priority: 'speed', // Prioritize speed\n    serviceHealth: {\n        deepl: { healthy: true },\n        gpt4o: { healthy: true },\n        google: { healthy: true },\n        azure: { healthy: true }\n    }\n});\n// Should select google as it has highest speed\nexpect(service).to.equal('google');",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'set')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'set')\n    at Context.<anonymous> (tests/unit/services/translation/utils/language-pair-optimizer.test.js:107:37)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "85400a74-bb8c-4767-b99c-ff92ff7c1737",
                  "parentUUID": "d0cf0464-912d-4c3a-97a7-8d5e24d60801",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respect service health status",
                  "fullTitle": "LanguagePairOptimizer getBestServiceForLanguagePair should respect service health status",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Mock a language pair with deepl having highest quality but unhealthy\noptimizer.languagePairs.set('en-fr', {\n    source: 'en',\n    target: 'fr',\n    services: {\n        deepl: { quality: 0.95, speed: 0.8 },\n        gpt4o: { quality: 0.9, speed: 0.7 },\n        google: { quality: 0.85, speed: 0.9 },\n        azure: { quality: 0.8, speed: 0.85 }\n    }\n});\nconst service = optimizer.getBestServiceForLanguagePair('en', 'fr', {\n    priority: 'quality',\n    serviceHealth: {\n        deepl: { healthy: false }, // Unhealthy\n        gpt4o: { healthy: true },\n        google: { healthy: true },\n        azure: { healthy: true }\n    }\n});\n// Should select gpt4o as it has second highest quality\nexpect(service).to.equal('gpt4o');",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'set')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'set')\n    at Context.<anonymous> (tests/unit/services/translation/utils/language-pair-optimizer.test.js:134:37)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "d24745fe-70ad-451b-a1c9-383fe27f017a",
                  "parentUUID": "d0cf0464-912d-4c3a-97a7-8d5e24d60801",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle unconfigured language pairs",
                  "fullTitle": "LanguagePairOptimizer getBestServiceForLanguagePair should handle unconfigured language pairs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Unconfigured language pair\nconst service = optimizer.getBestServiceForLanguagePair('it', 'ru', {\n    priority: 'quality',\n    serviceHealth: {\n        deepl: { healthy: true },\n        gpt4o: { healthy: true },\n        google: { healthy: true },\n        azure: { healthy: true }\n    }\n});\n// Should still select a service\nexpect(['deepl', 'gpt4o', 'google', 'azure']).to.include(service);",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'general')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'general')\n    at LanguagePairOptimizer.getBestServiceForLanguagePair (src/services/translation/utils/language-pair-optimizer.js:112:57)\n    at Context.<anonymous> (tests/unit/services/translation/utils/language-pair-optimizer.test.js:161:39)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "8e8e69b8-0024-4110-8528-dcffd683b620",
                  "parentUUID": "d0cf0464-912d-4c3a-97a7-8d5e24d60801",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should prefer DeepL for European languages",
                  "fullTitle": "LanguagePairOptimizer getBestServiceForLanguagePair should prefer DeepL for European languages",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Both Italian and French are European languages\nconst service = optimizer.getBestServiceForLanguagePair('it', 'fr', {\n    priority: 'quality',\n    serviceHealth: {\n        deepl: { healthy: true },\n        gpt4o: { healthy: true },\n        google: { healthy: true },\n        azure: { healthy: true }\n    }\n});\n// Should select DeepL for European language pair\nexpect(service).to.equal('deepl');",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'general')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'general')\n    at LanguagePairOptimizer.getBestServiceForLanguagePair (src/services/translation/utils/language-pair-optimizer.js:112:57)\n    at Context.<anonymous> (tests/unit/services/translation/utils/language-pair-optimizer.test.js:177:39)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "17e87e0a-4d03-4fa3-981f-866ef51e4738",
                  "parentUUID": "d0cf0464-912d-4c3a-97a7-8d5e24d60801",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should prefer GPT-4o for Asian languages",
                  "fullTitle": "LanguagePairOptimizer getBestServiceForLanguagePair should prefer GPT-4o for Asian languages",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Japanese is in the adaptation languages list\nconst service = optimizer.getBestServiceForLanguagePair('en', 'ja', {\n    priority: 'quality',\n    serviceHealth: {\n        deepl: { healthy: true },\n        gpt4o: { healthy: true },\n        google: { healthy: true },\n        azure: { healthy: true }\n    }\n});\n// Should select GPT-4o for Asian language\nexpect(service).to.equal('gpt4o');",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'general')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'general')\n    at LanguagePairOptimizer.getBestServiceForLanguagePair (src/services/translation/utils/language-pair-optimizer.js:112:57)\n    at Context.<anonymous> (tests/unit/services/translation/utils/language-pair-optimizer.test.js:193:39)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "83a5da8b-f02a-4adf-8409-0c20644f64db",
                  "parentUUID": "d0cf0464-912d-4c3a-97a7-8d5e24d60801",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respect user preference",
                  "fullTitle": "LanguagePairOptimizer getBestServiceForLanguagePair should respect user preference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Even though deepl might be better for this pair\nconst service = optimizer.getBestServiceForLanguagePair('en', 'fr', {\n    priority: 'quality',\n    serviceHealth: {\n        deepl: { healthy: true },\n        gpt4o: { healthy: true },\n        google: { healthy: true },\n        azure: { healthy: true }\n    },\n    userPreference: 'google' // User prefers Google\n});\n// Should respect user preference\nexpect(service).to.equal('google');",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'google')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'google')\n    at LanguagePairOptimizer.isServiceSupportingLanguagePair (src/services/translation/utils/language-pair-optimizer.js:208:74)\n    at LanguagePairOptimizer.getBestServiceForLanguagePair (src/services/translation/utils/language-pair-optimizer.js:72:36)\n    at Context.<anonymous> (tests/unit/services/translation/utils/language-pair-optimizer.test.js:209:39)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "9010de0f-0250-466e-aaee-070b81993550",
                  "parentUUID": "d0cf0464-912d-4c3a-97a7-8d5e24d60801",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore unhealthy user preference",
                  "fullTitle": "LanguagePairOptimizer getBestServiceForLanguagePair should ignore unhealthy user preference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// User prefers Google but it's unhealthy\nconst service = optimizer.getBestServiceForLanguagePair('en', 'fr', {\n    priority: 'quality',\n    serviceHealth: {\n        deepl: { healthy: true },\n        gpt4o: { healthy: true },\n        google: { healthy: false }, // Unhealthy\n        azure: { healthy: true }\n    },\n    userPreference: 'google' // Unhealthy\n});\n// Should not use user preference as it's unhealthy\nexpect(service).to.not.equal('google');",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'google')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'google')\n    at LanguagePairOptimizer.isServiceSupportingLanguagePair (src/services/translation/utils/language-pair-optimizer.js:208:74)\n    at LanguagePairOptimizer.getBestServiceForLanguagePair (src/services/translation/utils/language-pair-optimizer.js:72:36)\n    at Context.<anonymous> (tests/unit/services/translation/utils/language-pair-optimizer.test.js:226:39)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "48d33c50-52ed-4945-987d-59e9241db50d",
                  "parentUUID": "d0cf0464-912d-4c3a-97a7-8d5e24d60801",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should prioritize context-aware services when context is required",
                  "fullTitle": "LanguagePairOptimizer getBestServiceForLanguagePair should prioritize context-aware services when context is required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const service = optimizer.getBestServiceForLanguagePair('en', 'fr', {\n    priority: 'speed', // Would normally select Google\n    serviceHealth: {\n        deepl: { healthy: true },\n        gpt4o: { healthy: true },\n        google: { healthy: true },\n        azure: { healthy: true }\n    },\n    requiresContext: true // Requires context\n});\n// Should prioritize a context-aware service (based on defaultRanking.context)\nexpect(service).to.equal(optimizer.defaultRanking.context[0]);",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'gpt4o')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'gpt4o')\n    at LanguagePairOptimizer.isServiceSupportingLanguagePair (src/services/translation/utils/language-pair-optimizer.js:208:74)\n    at LanguagePairOptimizer.getBestServiceForLanguagePair (src/services/translation/utils/language-pair-optimizer.js:80:22)\n    at Context.<anonymous> (tests/unit/services/translation/utils/language-pair-optimizer.test.js:242:39)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "71d14375-82fd-4e76-9117-e7c65be70393",
                  "parentUUID": "d0cf0464-912d-4c3a-97a7-8d5e24d60801",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a healthy service when all preferred services are unhealthy",
                  "fullTitle": "LanguagePairOptimizer getBestServiceForLanguagePair should return a healthy service when all preferred services are unhealthy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// All main services unhealthy\nconst service = optimizer.getBestServiceForLanguagePair('en', 'fr', {\n    priority: 'quality',\n    serviceHealth: {\n        deepl: { healthy: false },\n        gpt4o: { healthy: false },\n        google: { healthy: false },\n        azure: { healthy: true } // Only Azure is healthy\n    }\n});\n// Should select the only healthy service\nexpect(service).to.equal('azure');",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'general')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'general')\n    at LanguagePairOptimizer.getBestServiceForLanguagePair (src/services/translation/utils/language-pair-optimizer.js:112:57)\n    at Context.<anonymous> (tests/unit/services/translation/utils/language-pair-optimizer.test.js:259:39)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "071b389e-9588-4689-a321-6fc3ef3f302d",
                  "parentUUID": "d0cf0464-912d-4c3a-97a7-8d5e24d60801",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "5960a420-d02d-4b09-b911-d45b6dba5476",
                "eca95e45-7b74-4a5b-936c-95a8f8761c1f",
                "85400a74-bb8c-4767-b99c-ff92ff7c1737",
                "d24745fe-70ad-451b-a1c9-383fe27f017a",
                "8e8e69b8-0024-4110-8528-dcffd683b620",
                "17e87e0a-4d03-4fa3-981f-866ef51e4738",
                "83a5da8b-f02a-4adf-8409-0c20644f64db",
                "9010de0f-0250-466e-aaee-070b81993550",
                "48d33c50-52ed-4945-987d-59e9241db50d",
                "71d14375-82fd-4e76-9117-e7c65be70393",
                "071b389e-9588-4689-a321-6fc3ef3f302d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "63b5b84a-2485-44cc-b5b6-a866134a9d95",
              "title": "updateQualityScore",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/utils/language-pair-optimizer.test.js",
              "file": "/tests/unit/services/translation/utils/language-pair-optimizer.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update quality score with smoothing",
                  "fullTitle": "LanguagePairOptimizer updateQualityScore should update quality score with smoothing",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Set up initial quality score\noptimizer.languagePairs.set('en-es', {\n    source: 'en',\n    target: 'es',\n    services: {\n        deepl: { quality: 0.8, speed: 0.8 }\n    }\n});\n// Update quality score\noptimizer.updateQualityScore('deepl', 'en', 'es', 1.0); // Perfect score\n// Get updated pair\nconst pair = optimizer.languagePairs.get('en-es');\n// Should update with smoothing (0.8 * 0.9 + 1.0 * 0.1 = 0.82)\nexpect(pair.services.deepl.quality).to.be.closeTo(0.82, 0.001);",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'set')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'set')\n    at Context.<anonymous> (tests/unit/services/translation/utils/language-pair-optimizer.test.js:277:37)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "fc40d367-4c3d-402d-a361-d880426e16af",
                  "parentUUID": "63b5b84a-2485-44cc-b5b6-a866134a9d95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle non-existent language pair",
                  "fullTitle": "LanguagePairOptimizer updateQualityScore should handle non-existent language pair",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// This should not throw\noptimizer.updateQualityScore('deepl', 'nonexistent', 'pair', 1.0);",
                  "err": {},
                  "uuid": "153f7ecc-5b43-406c-9fb3-e7c4b95ee136",
                  "parentUUID": "63b5b84a-2485-44cc-b5b6-a866134a9d95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle non-existent service",
                  "fullTitle": "LanguagePairOptimizer updateQualityScore should handle non-existent service",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// This should not throw\noptimizer.updateQualityScore('nonexistent', 'en', 'es', 1.0);",
                  "err": {},
                  "uuid": "a47873fd-e49c-4f32-a674-e5ca217a615d",
                  "parentUUID": "63b5b84a-2485-44cc-b5b6-a866134a9d95",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "153f7ecc-5b43-406c-9fb3-e7c4b95ee136",
                "a47873fd-e49c-4f32-a674-e5ca217a615d"
              ],
              "failures": [
                "fc40d367-4c3d-402d-a361-d880426e16af"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "929953a6-d483-459d-be8a-cb4245b778bd",
              "title": "edge cases",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/utils/language-pair-optimizer.test.js",
              "file": "/tests/unit/services/translation/utils/language-pair-optimizer.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle all services being unhealthy",
                  "fullTitle": "LanguagePairOptimizer edge cases should handle all services being unhealthy",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const service = optimizer.getBestServiceForLanguagePair('en', 'fr', {\n    priority: 'quality',\n    serviceHealth: {\n        deepl: { healthy: false },\n        gpt4o: { healthy: false },\n        google: { healthy: false },\n        azure: { healthy: false }\n    }\n});\n// Should return a default service\nexpect(service).to.equal('google');",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'general')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'general')\n    at LanguagePairOptimizer.getBestServiceForLanguagePair (src/services/translation/utils/language-pair-optimizer.js:112:57)\n    at Context.<anonymous> (tests/unit/services/translation/utils/language-pair-optimizer.test.js:308:39)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "16281ba8-d009-4fff-b6c0-81abdea40239",
                  "parentUUID": "929953a6-d483-459d-be8a-cb4245b778bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle empty serviceHealth object",
                  "fullTitle": "LanguagePairOptimizer edge cases should handle empty serviceHealth object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const service = optimizer.getBestServiceForLanguagePair('en', 'fr', {\n    priority: 'quality',\n    serviceHealth: {}\n});\n// Should return a service based on default ranking\nexpect(['deepl', 'gpt4o', 'google', 'azure']).to.include(service);",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'general')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'general')\n    at LanguagePairOptimizer.getBestServiceForLanguagePair (src/services/translation/utils/language-pair-optimizer.js:112:57)\n    at Context.<anonymous> (tests/unit/services/translation/utils/language-pair-optimizer.test.js:323:39)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "524a2836-059f-4754-9f7c-1c545d7557c4",
                  "parentUUID": "929953a6-d483-459d-be8a-cb4245b778bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle missing options",
                  "fullTitle": "LanguagePairOptimizer edge cases should handle missing options",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const service = optimizer.getBestServiceForLanguagePair('en', 'fr');\n// Should return a service without throwing\nexpect(['deepl', 'gpt4o', 'google', 'azure']).to.include(service);",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'general')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'general')\n    at LanguagePairOptimizer.getBestServiceForLanguagePair (src/services/translation/utils/language-pair-optimizer.js:112:57)\n    at Context.<anonymous> (tests/unit/services/translation/utils/language-pair-optimizer.test.js:333:39)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "abd13cee-f980-4a88-ac3d-3edcd7ebf4da",
                  "parentUUID": "929953a6-d483-459d-be8a-cb4245b778bd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "16281ba8-d009-4fff-b6c0-81abdea40239",
                "524a2836-059f-4754-9f7c-1c545d7557c4",
                "abd13cee-f980-4a88-ac3d-3edcd7ebf4da"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "7700bcf3-0cd5-43d3-858a-3f56e8ecbb48",
          "title": "TranslationCache",
          "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/utils/translation-cache.test.js",
          "file": "/tests/unit/services/translation/utils/translation-cache.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"TranslationCache\"",
              "fullTitle": "TranslationCache \"before each\" hook in \"TranslationCache\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox = sinon.createSandbox();\ncache = new TranslationCache({\n    maxCacheSize: 10,\n    defaultExpirySeconds: 60\n});",
              "err": {},
              "uuid": "3691d8bf-fe66-4551-aab7-13d8361c7c2c",
              "parentUUID": "7700bcf3-0cd5-43d3-858a-3f56e8ecbb48",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"TranslationCache\"",
              "fullTitle": "TranslationCache \"after each\" hook in \"TranslationCache\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore();",
              "err": {},
              "uuid": "d391b922-86ef-4e95-9fce-15a0b65a1c9e",
              "parentUUID": "7700bcf3-0cd5-43d3-858a-3f56e8ecbb48",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "3dc26192-e87c-4714-a3fc-52a449b2e5d8",
              "title": "initialization",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/utils/translation-cache.test.js",
              "file": "/tests/unit/services/translation/utils/translation-cache.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should initialize with default settings",
                  "fullTitle": "TranslationCache initialization should initialize with default settings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const defaultCache = new TranslationCache();\nexpect(defaultCache.config.maxCacheSize).to.be.greaterThan(0);\nexpect(defaultCache.config.defaultExpirySeconds).to.be.greaterThan(0);",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'maxCacheSize')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'maxCacheSize')\n    at Context.<anonymous> (tests/unit/services/translation/utils/translation-cache.test.js:28:40)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "177b72c0-44ee-4d41-84eb-3613f523367e",
                  "parentUUID": "3dc26192-e87c-4714-a3fc-52a449b2e5d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should initialize with custom settings",
                  "fullTitle": "TranslationCache initialization should initialize with custom settings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(cache.config.maxCacheSize).to.equal(10);\nexpect(cache.config.defaultExpirySeconds).to.equal(60);",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'maxCacheSize')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'maxCacheSize')\n    at Context.<anonymous> (tests/unit/services/translation/utils/translation-cache.test.js:33:33)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "b781e728-a285-4e6c-95e9-c1b8680945f0",
                  "parentUUID": "3dc26192-e87c-4714-a3fc-52a449b2e5d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should initialize stats with zero values",
                  "fullTitle": "TranslationCache initialization should initialize stats with zero values",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(cache.stats.hits).to.equal(0);\nexpect(cache.stats.misses).to.equal(0);\nexpect(cache.stats.totalRequests).to.equal(0);",
                  "err": {
                    "message": "AssertionError: expected undefined to equal +0",
                    "estack": "AssertionError: expected undefined to equal +0\n    at Context.<anonymous> (tests/unit/services/translation/utils/translation-cache.test.js:40:50)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "9d576d2e-492a-4710-92ee-c503835dfec6",
                  "parentUUID": "3dc26192-e87c-4714-a3fc-52a449b2e5d8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "177b72c0-44ee-4d41-84eb-3613f523367e",
                "b781e728-a285-4e6c-95e9-c1b8680945f0",
                "9d576d2e-492a-4710-92ee-c503835dfec6"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "dafdf7f2-866e-475e-bfb3-48c4ca9dd02f",
              "title": "generateKey",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/utils/translation-cache.test.js",
              "file": "/tests/unit/services/translation/utils/translation-cache.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should generate unique keys for different text",
                  "fullTitle": "TranslationCache generateKey should generate unique keys for different text",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key1 = cache.generateKey('Hello', 'en', 'es');\nconst key2 = cache.generateKey('World', 'en', 'es');\nexpect(key1).to.not.equal(key2);",
                  "err": {},
                  "uuid": "b4f31643-043d-4612-a84d-b49a81390203",
                  "parentUUID": "dafdf7f2-866e-475e-bfb3-48c4ca9dd02f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should generate unique keys for different language pairs",
                  "fullTitle": "TranslationCache generateKey should generate unique keys for different language pairs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key1 = cache.generateKey('Hello', 'en', 'es');\nconst key2 = cache.generateKey('Hello', 'en', 'fr');\nexpect(key1).to.not.equal(key2);",
                  "err": {},
                  "uuid": "2c149feb-e3aa-4b25-80f3-b3b529a76402",
                  "parentUUID": "dafdf7f2-866e-475e-bfb3-48c4ca9dd02f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should generate unique keys for different services",
                  "fullTitle": "TranslationCache generateKey should generate unique keys for different services",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key1 = cache.generateKey('Hello', 'en', 'es', 'deepl');\nconst key2 = cache.generateKey('Hello', 'en', 'es', 'google');\nexpect(key1).to.not.equal(key2);",
                  "err": {},
                  "uuid": "051a3bca-4fc0-4eff-95fe-5a094e3b963c",
                  "parentUUID": "dafdf7f2-866e-475e-bfb3-48c4ca9dd02f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include options in key generation",
                  "fullTitle": "TranslationCache generateKey should include options in key generation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key1 = cache.generateKey('Hello', 'en', 'es', 'deepl', { formality: 'formal' });\nconst key2 = cache.generateKey('Hello', 'en', 'es', 'deepl', { formality: 'informal' });\nexpect(key1).to.not.equal(key2);",
                  "err": {},
                  "uuid": "98e60143-3b03-44fc-bf61-df30a7f823ec",
                  "parentUUID": "dafdf7f2-866e-475e-bfb3-48c4ca9dd02f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b4f31643-043d-4612-a84d-b49a81390203",
                "2c149feb-e3aa-4b25-80f3-b3b529a76402",
                "051a3bca-4fc0-4eff-95fe-5a094e3b963c",
                "98e60143-3b03-44fc-bf61-df30a7f823ec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "164eb181-ac21-4b3e-a95e-9a1cea4c425a",
              "title": "set and get",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/utils/translation-cache.test.js",
              "file": "/tests/unit/services/translation/utils/translation-cache.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should store and retrieve translations",
                  "fullTitle": "TranslationCache set and get should store and retrieve translations",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const text = 'Hello world';\nconst fromLang = 'en';\nconst toLang = 'es';\nconst service = 'deepl';\nconst result = {\n    translation: 'Hola mundo',\n    confidence: 0.95\n};\nawait cache.set(text, fromLang, toLang, service, result);\nconst cached = await cache.get(text, fromLang, toLang, service);\nexpect(cached).to.deep.equal(result);",
                  "err": {
                    "message": "AssertionError: expected { translation: 'Hola mundo', …(2) } to deeply equal { translation: 'Hola mundo', …(1) }",
                    "estack": "AssertionError: expected { translation: 'Hola mundo', …(2) } to deeply equal { translation: 'Hola mundo', …(1) }\n    at Context.<anonymous> (tests/unit/services/translation/utils/translation-cache.test.js:84:36)",
                    "diff": " {\n-   \"cachedAt\": 1751670767134\n   \"confidence\": 0.95\n   \"translation\": \"Hola mundo\"\n }\n"
                  },
                  "uuid": "9daf6d8a-91f2-4b99-b612-47e74dd64ad7",
                  "parentUUID": "164eb181-ac21-4b3e-a95e-9a1cea4c425a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also store service-agnostic entries",
                  "fullTitle": "TranslationCache set and get should also store service-agnostic entries",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const text = 'Hello world';\nconst fromLang = 'en';\nconst toLang = 'es';\nconst service = 'deepl';\nconst result = {\n    translation: 'Hola mundo',\n    confidence: 0.95\n};\nawait cache.set(text, fromLang, toLang, service, result);\n// Should be retrievable with 'any' service\nconst cached = await cache.get(text, fromLang, toLang, 'any');\nexpect(cached).to.deep.equal(result);",
                  "err": {
                    "message": "AssertionError: expected null to deeply equal { translation: 'Hola mundo', …(1) }",
                    "estack": "AssertionError: expected null to deeply equal { translation: 'Hola mundo', …(1) }\n    at Context.<anonymous> (tests/unit/services/translation/utils/translation-cache.test.js:101:36)",
                    "diff": null
                  },
                  "uuid": "4225636d-06c6-4c8f-a8fa-6023b9e95477",
                  "parentUUID": "164eb181-ac21-4b3e-a95e-9a1cea4c425a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null for non-existent entries",
                  "fullTitle": "TranslationCache set and get should return null for non-existent entries",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cached = await cache.get('Not in cache', 'en', 'es', 'deepl');\nexpect(cached).to.be.null;",
                  "err": {},
                  "uuid": "6b8595ef-12fc-450d-a474-0235cc5a1b05",
                  "parentUUID": "164eb181-ac21-4b3e-a95e-9a1cea4c425a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update stats when retrieving entries",
                  "fullTitle": "TranslationCache set and get should update stats when retrieving entries",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// First access (miss)\nawait cache.get('Not in cache', 'en', 'es', 'deepl');\nexpect(cache.stats.totalRequests).to.equal(1);\nexpect(cache.stats.misses).to.equal(1);\nexpect(cache.stats.hits).to.equal(0);\n// Add to cache\nawait cache.set('Hello', 'en', 'es', 'deepl', { translation: 'Hola' });\n// Second access (hit)\nawait cache.get('Hello', 'en', 'es', 'deepl');\nexpect(cache.stats.totalRequests).to.equal(2);\nexpect(cache.stats.misses).to.equal(1);\nexpect(cache.stats.hits).to.equal(1);",
                  "err": {
                    "message": "AssertionError: expected undefined to equal 1",
                    "estack": "AssertionError: expected undefined to equal 1\n    at Context.<anonymous> (tests/unit/services/translation/utils/translation-cache.test.js:112:50)",
                    "diff": null
                  },
                  "uuid": "47e5eabd-dfa9-4790-9e6d-f325e34d34f7",
                  "parentUUID": "164eb181-ac21-4b3e-a95e-9a1cea4c425a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respect expiry times",
                  "fullTitle": "TranslationCache set and get should respect expiry times",
                  "timedOut": false,
                  "duration": 12,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Set with a very short expiry (1ms)\nawait cache.set('Hello', 'en', 'es', 'deepl', { translation: 'Hola' }, 0.001);\n// Wait for expiry\nawait new Promise(resolve => setTimeout(resolve, 10));\n// Should return null after expiry\nconst cached = await cache.get('Hello', 'en', 'es', 'deepl');\nexpect(cached).to.be.null;\nexpect(cache.stats.misses).to.equal(1);",
                  "err": {
                    "message": "AssertionError: expected { translation: 'Hola', …(1) } to be null",
                    "estack": "AssertionError: expected { translation: 'Hola', …(1) } to be null\n    at Context.<anonymous> (tests/unit/services/translation/utils/translation-cache.test.js:135:33)",
                    "diff": null
                  },
                  "uuid": "33158081-a12e-4ff2-84dd-b31cecd5a786",
                  "parentUUID": "164eb181-ac21-4b3e-a95e-9a1cea4c425a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6b8595ef-12fc-450d-a474-0235cc5a1b05"
              ],
              "failures": [
                "9daf6d8a-91f2-4b99-b612-47e74dd64ad7",
                "4225636d-06c6-4c8f-a8fa-6023b9e95477",
                "47e5eabd-dfa9-4790-9e6d-f325e34d34f7",
                "33158081-a12e-4ff2-84dd-b31cecd5a786"
              ],
              "pending": [],
              "skipped": [],
              "duration": 14,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "52038ac7-3d38-4614-82d1-8e1c11b848d1",
              "title": "pruneCache",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/utils/translation-cache.test.js",
              "file": "/tests/unit/services/translation/utils/translation-cache.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should remove expired entries",
                  "fullTitle": "TranslationCache pruneCache should remove expired entries",
                  "timedOut": false,
                  "duration": 12,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Add some entries with very short expiry\nawait cache.set('Entry1', 'en', 'es', 'deepl', { translation: 'Test1' }, 0.001);\nawait cache.set('Entry2', 'en', 'es', 'deepl', { translation: 'Test2' }, 0.001);\n// Wait for expiry\nawait new Promise(resolve => setTimeout(resolve, 10));\n// Prune cache\ncache.pruneCache();\n// Should be removed\nconst cached1 = await cache.get('Entry1', 'en', 'es', 'deepl');\nconst cached2 = await cache.get('Entry2', 'en', 'es', 'deepl');\nexpect(cached1).to.be.null;\nexpect(cached2).to.be.null;",
                  "err": {
                    "message": "TypeError: cache.pruneCache is not a function",
                    "estack": "TypeError: cache.pruneCache is not a function\n    at Context.<anonymous> (tests/unit/services/translation/utils/translation-cache.test.js:150:19)",
                    "diff": null
                  },
                  "uuid": "bf3fe420-0f50-4f4a-a3d9-29ee33e248e8",
                  "parentUUID": "52038ac7-3d38-4614-82d1-8e1c11b848d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respect maxCacheSize",
                  "fullTitle": "TranslationCache pruneCache should respect maxCacheSize",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Cache is configured with maxCacheSize of 10\n// Add 15 entries (exceeds maxCacheSize)\nfor (let i = 0; i < 15; i++) {\n    await cache.set(`Entry${i}`, 'en', 'es', 'deepl', { translation: `Test${i}` });\n}\n// Cache should prune automatically\nexpect(cache.cache.size).to.be.at.most(10);",
                  "err": {
                    "message": "AssertionError: expected undefined to be a number or a date",
                    "estack": "AssertionError: expected undefined to be a number or a date\n    at Context.<anonymous> (tests/unit/services/translation/utils/translation-cache.test.js:168:47)",
                    "diff": null
                  },
                  "uuid": "775743f9-45e1-4f18-891f-995dfb742f0c",
                  "parentUUID": "52038ac7-3d38-4614-82d1-8e1c11b848d1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "bf3fe420-0f50-4f4a-a3d9-29ee33e248e8",
                "775743f9-45e1-4f18-891f-995dfb742f0c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "c1da7030-2a09-4b1f-a769-4d53f520a60c",
              "title": "getStats",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/utils/translation-cache.test.js",
              "file": "/tests/unit/services/translation/utils/translation-cache.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return accurate statistics",
                  "fullTitle": "TranslationCache getStats should return accurate statistics",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Add some cache hits and misses\nawait cache.get('Miss1', 'en', 'es', 'deepl');\nawait cache.get('Miss2', 'en', 'es', 'deepl');\nawait cache.set('Hit1', 'en', 'es', 'deepl', { translation: 'Test1' });\nawait cache.get('Hit1', 'en', 'es', 'deepl');\nawait cache.set('Hit2', 'en', 'es', 'deepl', { translation: 'Test2' });\nawait cache.get('Hit2', 'en', 'es', 'deepl');\nconst stats = cache.getStats();\nexpect(stats.hits).to.equal(2);\nexpect(stats.misses).to.equal(2);\nexpect(stats.totalRequests).to.equal(4);\nexpect(stats.size).to.be.greaterThan(0);\nexpect(stats.hitRate).to.equal(0.5); // 2 hits out of 4 requests",
                  "err": {
                    "message": "AssertionError: expected undefined to equal 4",
                    "estack": "AssertionError: expected undefined to equal 4\n    at Context.<anonymous> (tests/unit/services/translation/utils/translation-cache.test.js:188:44)",
                    "diff": null
                  },
                  "uuid": "2d1fcf99-8836-419e-b508-3da3c1660929",
                  "parentUUID": "c1da7030-2a09-4b1f-a769-4d53f520a60c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "2d1fcf99-8836-419e-b508-3da3c1660929"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "42d09e08-0f2f-4478-9085-b11ac24f48c8",
              "title": "clear",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/utils/translation-cache.test.js",
              "file": "/tests/unit/services/translation/utils/translation-cache.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should remove all entries",
                  "fullTitle": "TranslationCache clear should remove all entries",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Add some entries\nawait cache.set('Entry1', 'en', 'es', 'deepl', { translation: 'Test1' });\nawait cache.set('Entry2', 'en', 'es', 'deepl', { translation: 'Test2' });\n// Verify they exist\nexpect(await cache.get('Entry1', 'en', 'es', 'deepl')).to.not.be.null;\nexpect(await cache.get('Entry2', 'en', 'es', 'deepl')).to.not.be.null;\n// Clear cache\nawait cache.clear();\n// Verify they're gone\nexpect(await cache.get('Entry1', 'en', 'es', 'deepl')).to.be.null;\nexpect(await cache.get('Entry2', 'en', 'es', 'deepl')).to.be.null;\nexpect(cache.cache.size).to.equal(0);",
                  "err": {
                    "message": "TypeError: cache.clear is not a function",
                    "estack": "TypeError: cache.clear is not a function\n    at Context.<anonymous> (tests/unit/services/translation/utils/translation-cache.test.js:205:25)",
                    "diff": null
                  },
                  "uuid": "0f5becbc-397c-43be-b147-36d8fc53a34f",
                  "parentUUID": "42d09e08-0f2f-4478-9085-b11ac24f48c8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "0f5becbc-397c-43be-b147-36d8fc53a34f"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "8c9bfe47-0fcf-455f-9fa6-c6fba57dbcf8",
              "title": "edge cases",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/services/translation/utils/translation-cache.test.js",
              "file": "/tests/unit/services/translation/utils/translation-cache.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle empty text",
                  "fullTitle": "TranslationCache edge cases should handle empty text",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "await cache.set('', 'en', 'es', 'deepl', { translation: '' });\nconst cached = await cache.get('', 'en', 'es', 'deepl');\nexpect(cached).to.deep.equal({ translation: '' });",
                  "err": {
                    "message": "AssertionError: expected { translation: '', …(1) } to deeply equal { translation: '' }",
                    "estack": "AssertionError: expected { translation: '', …(1) } to deeply equal { translation: '' }\n    at Context.<anonymous> (tests/unit/services/translation/utils/translation-cache.test.js:218:36)",
                    "diff": " {\n-   \"cachedAt\": 1751670767167\n   \"translation\": \"\"\n }\n"
                  },
                  "uuid": "1bd6a62f-00e6-4562-9c8e-dc5f74e1419b",
                  "parentUUID": "8c9bfe47-0fcf-455f-9fa6-c6fba57dbcf8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle special characters",
                  "fullTitle": "TranslationCache edge cases should handle special characters",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const text = 'Special: !@#$%^&*()_+{}[]|\\\\:;\"\\'<>,.?/';\nconst result = { translation: 'Translated special chars' };\nawait cache.set(text, 'en', 'es', 'deepl', result);\nconst cached = await cache.get(text, 'en', 'es', 'deepl');\nexpect(cached).to.deep.equal(result);",
                  "err": {
                    "message": "AssertionError: expected { …(2) } to deeply equal { Object (translation) }",
                    "estack": "AssertionError: expected { …(2) } to deeply equal { Object (translation) }\n    at Context.<anonymous> (tests/unit/services/translation/utils/translation-cache.test.js:227:36)",
                    "diff": " {\n-   \"cachedAt\": 1751670767168\n   \"translation\": \"Translated special chars\"\n }\n"
                  },
                  "uuid": "423ce68d-bc7f-40fd-81cb-46c1ac6772e9",
                  "parentUUID": "8c9bfe47-0fcf-455f-9fa6-c6fba57dbcf8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle very long text",
                  "fullTitle": "TranslationCache edge cases should handle very long text",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Generate a long string\nconst longText = 'A'.repeat(10000);\nconst result = { translation: 'Long text translation' };\nawait cache.set(longText, 'en', 'es', 'deepl', result);\nconst cached = await cache.get(longText, 'en', 'es', 'deepl');\nexpect(cached).to.deep.equal(result);",
                  "err": {
                    "message": "AssertionError: expected { …(2) } to deeply equal { Object (translation) }",
                    "estack": "AssertionError: expected { …(2) } to deeply equal { Object (translation) }\n    at Context.<anonymous> (tests/unit/services/translation/utils/translation-cache.test.js:237:36)",
                    "diff": " {\n-   \"cachedAt\": 1751670767171\n   \"translation\": \"Long text translation\"\n }\n"
                  },
                  "uuid": "c32766be-5c08-4b00-a782-4fd8d69ab9bd",
                  "parentUUID": "8c9bfe47-0fcf-455f-9fa6-c6fba57dbcf8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "1bd6a62f-00e6-4562-9c8e-dc5f74e1419b",
                "423ce68d-bc7f-40fd-81cb-46c1ac6772e9",
                "c32766be-5c08-4b00-a782-4fd8d69ab9bd"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "f82de611-e7a3-463b-8498-5943546f82a1",
          "title": "formatTextForDisplay",
          "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/utils/format-text.unit.test.js",
          "file": "/tests/unit/utils/format-text.unit.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should trim whitespace from text",
              "fullTitle": "formatTextForDisplay should trim whitespace from text",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(formatTextForDisplay('  hello  ')).to.equal('hello');",
              "err": {},
              "uuid": "6ef4ae2b-b5f2-45ab-8a93-f06386412f9f",
              "parentUUID": "f82de611-e7a3-463b-8498-5943546f82a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return empty string for non-string input",
              "fullTitle": "formatTextForDisplay should return empty string for non-string input",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(formatTextForDisplay(null)).to.equal('');\nexpect(formatTextForDisplay(undefined)).to.equal('');\nexpect(formatTextForDisplay(123)).to.equal('');\nexpect(formatTextForDisplay({})).to.equal('');",
              "err": {},
              "uuid": "e4d01eca-3411-4461-8698-a1e8b2e0ab18",
              "parentUUID": "f82de611-e7a3-463b-8498-5943546f82a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should truncate long text with ellipsis",
              "fullTitle": "formatTextForDisplay should truncate long text with ellipsis",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const longText = 'a'.repeat(150);\nconst result = formatTextForDisplay(longText, 100);\nexpect(result).to.have.lengthOf(103); // 100 + '...'\nexpect(result).to.match(/\\.\\.\\.$/);",
              "err": {},
              "uuid": "0d138614-091b-41d8-a615-5a91f41fe690",
              "parentUUID": "f82de611-e7a3-463b-8498-5943546f82a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not truncate text shorter than max length",
              "fullTitle": "formatTextForDisplay should not truncate text shorter than max length",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const text = 'Hello, world!';\nexpect(formatTextForDisplay(text, 50)).to.equal(text);",
              "err": {},
              "uuid": "6b0cc0ba-242d-4821-898e-aced54f153db",
              "parentUUID": "f82de611-e7a3-463b-8498-5943546f82a1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6ef4ae2b-b5f2-45ab-8a93-f06386412f9f",
            "e4d01eca-3411-4461-8698-a1e8b2e0ab18",
            "0d138614-091b-41d8-a615-5a91f41fe690",
            "6b0cc0ba-242d-4821-898e-aced54f153db"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "69c9f546-f1ce-45e4-b1e9-fab7fad89cde",
          "title": "String Utils",
          "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/utils/string-utils.test.js",
          "file": "/tests/unit/utils/string-utils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "511c3721-b17c-4a80-8d49-8137c8ee4848",
              "title": "capitalize",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/utils/string-utils.test.js",
              "file": "/tests/unit/utils/string-utils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should capitalize the first letter of a string",
                  "fullTitle": "String Utils capitalize should capitalize the first letter of a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(capitalize('hello')).to.equal('Hello');\nexpect(capitalize('world')).to.equal('World');",
                  "err": {},
                  "uuid": "c0decac7-196d-4729-b64a-c4be04a1afb7",
                  "parentUUID": "511c3721-b17c-4a80-8d49-8137c8ee4848",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle empty string",
                  "fullTitle": "String Utils capitalize should handle empty string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(capitalize('')).to.equal('');",
                  "err": {},
                  "uuid": "137f0f09-ceb6-4559-81c7-2a8f847f8de4",
                  "parentUUID": "511c3721-b17c-4a80-8d49-8137c8ee4848",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle non-string inputs",
                  "fullTitle": "String Utils capitalize should handle non-string inputs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(capitalize(null)).to.equal('');\nexpect(capitalize(undefined)).to.equal('');\nexpect(capitalize(123)).to.equal('');",
                  "err": {},
                  "uuid": "8a3f5b24-c0be-4d1f-971c-85ecc2123e84",
                  "parentUUID": "511c3721-b17c-4a80-8d49-8137c8ee4848",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c0decac7-196d-4729-b64a-c4be04a1afb7",
                "137f0f09-ceb6-4559-81c7-2a8f847f8de4",
                "8a3f5b24-c0be-4d1f-971c-85ecc2123e84"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "ffa0f1da-58fb-4516-8132-824f133b3b1a",
              "title": "truncate",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/utils/string-utils.test.js",
              "file": "/tests/unit/utils/string-utils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should truncate strings longer than maxLength",
                  "fullTitle": "String Utils truncate should truncate strings longer than maxLength",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(truncate('Hello, world!', 5)).to.equal('Hello...');\nexpect(truncate('Testing', 4, '***')).to.equal('Test***');",
                  "err": {},
                  "uuid": "a18bf642-4241-4e6b-b3c8-67d1d713c902",
                  "parentUUID": "ffa0f1da-58fb-4516-8132-824f133b3b1a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not truncate strings shorter than maxLength",
                  "fullTitle": "String Utils truncate should not truncate strings shorter than maxLength",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(truncate('Hi', 5)).to.equal('Hi');",
                  "err": {},
                  "uuid": "8ab25442-797a-4d49-a522-f6c08a5b1b1a",
                  "parentUUID": "ffa0f1da-58fb-4516-8132-824f133b3b1a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle custom ellipsis",
                  "fullTitle": "String Utils truncate should handle custom ellipsis",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(truncate('Hello', 3, '...')).to.equal('Hel...');\nexpect(truncate('Hello', 3, '')).to.equal('Hel');",
                  "err": {},
                  "uuid": "8716e326-b209-40be-b5d3-1541ecdb8438",
                  "parentUUID": "ffa0f1da-58fb-4516-8132-824f133b3b1a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a18bf642-4241-4e6b-b3c8-67d1d713c902",
                "8ab25442-797a-4d49-a522-f6c08a5b1b1a",
                "8716e326-b209-40be-b5d3-1541ecdb8438"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "394b7995-d025-418c-b0da-d25feeb78848",
              "title": "safeJsonParse",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/unit/utils/string-utils.test.js",
              "file": "/tests/unit/utils/string-utils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should parse valid JSON strings",
                  "fullTitle": "String Utils safeJsonParse should parse valid JSON strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(safeJsonParse('{\"key\": \"value\"}')).to.deep.equal({ key: 'value' });\nexpect(safeJsonParse('[1, 2, 3]')).to.deep.equal([1, 2, 3]);",
                  "err": {},
                  "uuid": "c573ac87-11a2-43ea-8cd4-be5b5edcea30",
                  "parentUUID": "394b7995-d025-418c-b0da-d25feeb78848",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return default value for invalid JSON",
                  "fullTitle": "String Utils safeJsonParse should return default value for invalid JSON",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(safeJsonParse('not json', { default: 'value' }))\n  .to.deep.equal({ default: 'value' });\nexpect(safeJsonParse('', 'fallback')).to.equal('fallback');",
                  "err": {},
                  "uuid": "2d85b330-c734-41d0-894a-645c14f90342",
                  "parentUUID": "394b7995-d025-418c-b0da-d25feeb78848",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return empty object by default when parsing fails",
                  "fullTitle": "String Utils safeJsonParse should return empty object by default when parsing fails",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(safeJsonParse('invalid')).to.deep.equal({});",
                  "err": {},
                  "uuid": "83f7c79d-acd9-47c0-9f3c-d82c7e51ada7",
                  "parentUUID": "394b7995-d025-418c-b0da-d25feeb78848",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c573ac87-11a2-43ea-8cd4-be5b5edcea30",
                "2d85b330-c734-41d0-894a-645c14f90342",
                "83f7c79d-acd9-47c0-9f3c-d82c7e51ada7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "37cd220c-f7e6-4fad-a8c1-d558d8760572",
          "title": "Test Utilities",
          "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/utils/test-utils.test.js",
          "file": "/tests/utils/test-utils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cc9973a4-26fc-4652-88d5-21cc1a5dc765",
              "title": "mockT",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/utils/test-utils.test.js",
              "file": "/tests/utils/test-utils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the key as the translation",
                  "fullTitle": "Test Utilities mockT should return the key as the translation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(mockT('test.key')).to.equal('test.key');",
                  "err": {},
                  "uuid": "db8cebc5-9b4d-45bb-8372-2fb4dcd75588",
                  "parentUUID": "cc9973a4-26fc-4652-88d5-21cc1a5dc765",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "db8cebc5-9b4d-45bb-8372-2fb4dcd75588"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "170c7e73-f6f1-4a57-ad79-680bad6875fe",
              "title": "createMockAudioContext",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/utils/test-utils.test.js",
              "file": "/tests/utils/test-utils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a mock AudioContext with expected methods",
                  "fullTitle": "Test Utilities createMockAudioContext should create a mock AudioContext with expected methods",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mock = createMockAudioContext();\n\nexpect(mock).to.have.property('suspend').that.is.a('function');\nexpect(mock).to.have.property('resume').that.is.a('function');\nexpect(mock).to.have.property('close').that.is.a('function');\nexpect(mock).to.have.property('destination');\nexpect(mock).to.have.property('createMediaStreamSource').that.is.a('function');",
                  "err": {},
                  "uuid": "767e2dc5-520c-477b-a8e5-b59a124bc7fe",
                  "parentUUID": "170c7e73-f6f1-4a57-ad79-680bad6875fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow calling mocked methods",
                  "fullTitle": "Test Utilities createMockAudioContext should allow calling mocked methods",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mock = createMockAudioContext();\nawait mock.suspend();\n\nexpect(mock.suspend).to.have.been.calledOnce;",
                  "err": {},
                  "uuid": "4a23a2cb-3274-4c40-961f-f3034b2f342a",
                  "parentUUID": "170c7e73-f6f1-4a57-ad79-680bad6875fe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "767e2dc5-520c-477b-a8e5-b59a124bc7fe",
                "4a23a2cb-3274-4c40-961f-f3034b2f342a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "b29607bb-f7e4-4837-b8f0-1a5281b4aa58",
              "title": "createMockMediaStream",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/utils/test-utils.test.js",
              "file": "/tests/utils/test-utils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a mock MediaStream with expected methods",
                  "fullTitle": "Test Utilities createMockMediaStream should create a mock MediaStream with expected methods",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mock = createMockMediaStream();\n\nexpect(mock).to.have.property('getTracks').that.is.a('function');\nexpect(mock).to.have.property('getAudioTracks').that.is.a('function');\nexpect(mock).to.have.property('getVideoTracks').that.is.a('function');\nexpect(mock).to.have.property('addTrack').that.is.a('function');\nexpect(mock).to.have.property('removeTrack').that.is.a('function');",
                  "err": {},
                  "uuid": "4ce215ea-54f2-48cf-a74f-b93b47114aa4",
                  "parentUUID": "b29607bb-f7e4-4837-b8f0-1a5281b4aa58",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4ce215ea-54f2-48cf-a74f-b93b47114aa4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "ef877137-82a9-4b9d-8e24-3f70f511435a",
              "title": "MockResizeObserver",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/utils/test-utils.test.js",
              "file": "/tests/utils/test-utils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a mock ResizeObserver with expected methods",
                  "fullTitle": "Test Utilities MockResizeObserver should create a mock ResizeObserver with expected methods",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const callback = () => {};\nconst observer = new MockResizeObserver(callback);\n\nexpect(observer).to.have.property('observe').that.is.a('function');\nexpect(observer).to.have.property('unobserve').that.is.a('function');\nexpect(observer).to.have.property('disconnect').that.is.a('function');",
                  "err": {},
                  "uuid": "44c59916-efcc-4e68-8ea8-c993ccdbe17e",
                  "parentUUID": "ef877137-82a9-4b9d-8e24-3f70f511435a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "44c59916-efcc-4e68-8ea8-c993ccdbe17e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "f42d8b19-dfe4-40e9-bd8a-7cff50d0fde2",
              "title": "createComponentMock",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/utils/test-utils.test.js",
              "file": "/tests/utils/test-utils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a mock React component",
                  "fullTitle": "Test Utilities createComponentMock should create a mock React component",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const MockComponent = createComponentMock('TestComponent');\nconst element = MockComponent.TestComponent({ children: 'test' });\n\nexpect(element.type).to.equal('TestComponent');\nexpect(element.props.children).to.equal('test');",
                  "err": {},
                  "uuid": "5ae688e6-2994-4513-a156-75413d2b6af2",
                  "parentUUID": "f42d8b19-dfe4-40e9-bd8a-7cff50d0fde2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5ae688e6-2994-4513-a156-75413d2b6af2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "e60cc876-d59c-4cf7-adad-63e8f5ac9249",
              "title": "createControllablePromise",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/utils/test-utils.test.js",
              "file": "/tests/utils/test-utils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a promise with resolve and reject controls",
                  "fullTitle": "Test Utilities createControllablePromise should create a promise with resolve and reject controls",
                  "timedOut": false,
                  "duration": 102,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { promise, resolve } = createControllablePromise();\nconst testValue = 'test value';\n\nsetTimeout(() => resolve(testValue), 100);\n\nconst result = await promise;\nexpect(result).to.equal(testValue);",
                  "err": {},
                  "uuid": "3dc9044c-c682-40da-8006-938cb90f369a",
                  "parentUUID": "e60cc876-d59c-4cf7-adad-63e8f5ac9249",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3dc9044c-c682-40da-8006-938cb90f369a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 102,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "663889b2-eb3c-4e08-9235-5f2308fc1f28",
              "title": "waitFor",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/utils/test-utils.test.js",
              "file": "/tests/utils/test-utils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should wait for a condition to be true",
                  "fullTitle": "Test Utilities waitFor should wait for a condition to be true",
                  "timedOut": false,
                  "duration": 51,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let value = false;\nsetTimeout(() => { value = true; }, 50);\n\nawait waitFor(() => value === true, 200);\nexpect(value).to.be.true;",
                  "err": {},
                  "uuid": "2857f45e-8b9c-4cef-941d-d98c26e3db45",
                  "parentUUID": "663889b2-eb3c-4e08-9235-5f2308fc1f28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should timeout if condition is not met",
                  "fullTitle": "Test Utilities waitFor should timeout if condition is not met",
                  "timedOut": false,
                  "duration": 52,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "try {\n  await waitFor(() => false, 50);\n  throw new Error('Should have timed out');\n} catch (error) {\n  expect(error.message).to.include('Timeout');\n}",
                  "err": {},
                  "uuid": "f7aa9305-8ab6-457f-83e5-e7d848ccec68",
                  "parentUUID": "663889b2-eb3c-4e08-9235-5f2308fc1f28",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2857f45e-8b9c-4cef-941d-d98c26e3db45",
                "f7aa9305-8ab6-457f-83e5-e7d848ccec68"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 103,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "b12f0966-1f9c-4100-b541-16c768c38a47",
              "title": "useFakeTimers",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/utils/test-utils.test.js",
              "file": "/tests/utils/test-utils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should mock timers",
                  "fullTitle": "Test Utilities useFakeTimers should mock timers",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const clock = useFakeTimers();\nconst callback = sinon.stub();\n\nsetTimeout(callback, 1000);\nclock.tick(1000);\n\nexpect(callback).to.have.been.calledOnce;\nclock.restore();",
                  "err": {},
                  "uuid": "641e7659-9bda-4f20-b421-440c7ce7f7f3",
                  "parentUUID": "b12f0966-1f9c-4100-b541-16c768c38a47",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "641e7659-9bda-4f20-b421-440c7ce7f7f3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "2d819fed-e355-4cf8-b9cd-f9ac2be8c41f",
              "title": "mockFetch",
              "fullFile": "/Volumes/Project Disk/Multi-Platform-Translation-APP/translation-app/tests/utils/test-utils.test.js",
              "file": "/tests/utils/test-utils.test.js",
              "beforeHooks": [],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"mockFetch\"",
                  "fullTitle": "Test Utilities mockFetch \"after each\" hook in \"mockFetch\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "if (global.fetch && global.fetch.restore) {\n  global.fetch.restore();\n} else {\n  delete global.fetch;\n}",
                  "err": {},
                  "uuid": "4cfd8d25-3048-4fb9-9e52-70b9a4bfac84",
                  "parentUUID": "2d819fed-e355-4cf8-b9cd-f9ac2be8c41f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should mock fetch with a successful response",
                  "fullTitle": "Test Utilities mockFetch should mock fetch with a successful response",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const testData = { id: 1, name: 'Test' };\nconst mock = mockFetch(testData);\n\nconst response = await fetch('https://api.example.com/test');\nconst data = await response.json();\n\nexpect(mock).to.have.been.calledWith('https://api.example.com/test');\nexpect(response.ok).to.be.true;\nexpect(data).to.deep.equal(testData);",
                  "err": {},
                  "uuid": "932f4fc8-3003-45bf-bc89-0b56b08d4e46",
                  "parentUUID": "2d819fed-e355-4cf8-b9cd-f9ac2be8c41f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mock fetch with an error response",
                  "fullTitle": "Test Utilities mockFetch should mock fetch with an error response",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mock = mockFetch(null, { status: 404, ok: false, statusText: 'Not Found' });\n\nconst response = await fetch('https://api.example.com/not-found');\n\nexpect(mock).to.have.been.calledWith('https://api.example.com/not-found');\nexpect(response.ok).to.be.false;\nexpect(response.status).to.equal(404);",
                  "err": {},
                  "uuid": "7edf2cce-c547-4f38-a52e-8c66b3f9e03b",
                  "parentUUID": "2d819fed-e355-4cf8-b9cd-f9ac2be8c41f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "932f4fc8-3003-45bf-bc89-0b56b08d4e46",
                "7edf2cce-c547-4f38-a52e-8c66b3f9e03b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}