# Secrets for Echo Monitoring Stack
# Note: These are template secrets with placeholder values
# In production, use proper secret management tools like Sealed Secrets, External Secrets Operator, or Vault

---
# Grafana Secrets
apiVersion: v1
kind: Secret
metadata:
  name: grafana-secret
  namespace: echo-monitoring
  labels:
    app: grafana
type: Opaque
data:
  # admin-password: Base64 encoded password (default: admin123!)
  admin-password: YWRtaW4xMjMh
  # smtp-user: Base64 encoded SMTP username
  smtp-user: eW91ci1zbXRwLXVzZXJAZ21haWwuY29t
  # smtp-password: Base64 encoded SMTP password
  smtp-password: eW91ci1zbXRwLXBhc3N3b3Jk

---
# Alertmanager Secrets
apiVersion: v1
kind: Secret
metadata:
  name: alertmanager-secret
  namespace: echo-monitoring
  labels:
    app: alertmanager
type: Opaque
data:
  # smtp-user: Base64 encoded SMTP username
  smtp-user: eW91ci1zbXRwLXVzZXJAZ21haWwuY29t
  # smtp-password: Base64 encoded SMTP password
  smtp-password: eW91ci1zbXRwLXBhc3N3b3Jk
  # slack-webhook-url: Base64 encoded Slack webhook URL
  slack-webhook-url: aHR0cHM6Ly9ob29rcy5zbGFjay5jb20vc2VydmljZXMvVDAwMDAwMDAwL0IwMDAwMDAwMC9YWFhYWFhYWFhYWFhYWFhYWFhYWFg=

---
# Basic Auth Secret for Monitoring Ingress
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-auth
  namespace: echo-monitoring
  labels:
    app: monitoring
type: Opaque
data:
  # auth: Base64 encoded htpasswd format (admin:$2y$10$...)
  # Default: admin / monitoring123!
  auth: YWRtaW46JDJ5JDEwJE5wVUJHVjJGVVBGUUJHVjJGVVBGUU9wVUJHVjJGVVBGUUJHVjJGVVBGUU9wVUJHVjJGVQ==

---
# TLS Certificate Secret (Let's Encrypt will populate this)
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-tls
  namespace: echo-monitoring
  labels:
    app: monitoring
type: kubernetes.io/tls
data:
  # tls.crt and tls.key will be populated by cert-manager
  tls.crt: ''
  tls.key: ''

---
# Database Secrets for Application Monitoring
apiVersion: v1
kind: Secret
metadata:
  name: database-monitoring-secret
  namespace: echo-monitoring
  labels:
    app: database-monitoring
type: Opaque
data:
  # postgres-exporter-password: Base64 encoded PostgreSQL monitoring user password
  postgres-exporter-password: bW9uaXRvcmluZ19wYXNzd29yZA==
  # redis-exporter-password: Base64 encoded Redis monitoring password
  redis-exporter-password: cmVkaXNfbW9uaXRvcmluZ19wYXNzd29yZA==

---
# Application Secrets for Metrics Collection
apiVersion: v1
kind: Secret
metadata:
  name: app-monitoring-secret
  namespace: echo-monitoring
  labels:
    app: app-monitoring
type: Opaque
data:
  # metrics-api-key: Base64 encoded API key for application metrics
  metrics-api-key: YXBwX21ldHJpY3NfYXBpX2tleV8xMjM=
  # webhook-secret: Base64 encoded webhook secret for alert notifications
  webhook-secret: d2ViaG9va19zZWNyZXRfMTIz

---
# External Services Secrets
apiVersion: v1
kind: Secret
metadata:
  name: external-services-secret
  namespace: echo-monitoring
  labels:
    app: external-services
type: Opaque
data:
  # pagerduty-integration-key: Base64 encoded PagerDuty integration key
  pagerduty-integration-key: cGFnZXJkdXR5X2ludGVncmF0aW9uX2tleQ==
  # datadog-api-key: Base64 encoded DataDog API key (if using DataDog integration)
  datadog-api-key: ZGF0YWRvZ19hcGlfa2V5
  # newrelic-license-key: Base64 encoded New Relic license key (if using New Relic integration)
  newrelic-license-key: bmV3cmVsaWNfbGljZW5zZV9rZXk=

---
# Backup and Storage Secrets
apiVersion: v1
kind: Secret
metadata:
  name: backup-storage-secret
  namespace: echo-monitoring
  labels:
    app: backup-storage
type: Opaque
data:
  # s3-access-key: Base64 encoded S3 access key for backup storage
  s3-access-key: czNfYWNjZXNzX2tleQ==
  # s3-secret-key: Base64 encoded S3 secret key for backup storage
  s3-secret-key: czNfc2VjcmV0X2tleQ==
  # gcs-service-account: Base64 encoded GCS service account JSON (if using GCS)
  gcs-service-account: Z2NzX3NlcnZpY2VfYWNjb3VudF9qc29u

---
# Prometheus Remote Write Secrets
apiVersion: v1
kind: Secret
metadata:
  name: prometheus-remote-write-secret
  namespace: echo-monitoring
  labels:
    app: prometheus
type: Opaque
data:
  # remote-write-username: Base64 encoded username for remote write endpoint
  remote-write-username: cmVtb3RlX3dyaXRlX3VzZXI=
  # remote-write-password: Base64 encoded password for remote write endpoint
  remote-write-password: cmVtb3RlX3dyaXRlX3Bhc3N3b3Jk
  # remote-write-bearer-token: Base64 encoded bearer token for remote write endpoint
  remote-write-bearer-token: cmVtb3RlX3dyaXRlX2JlYXJlcl90b2tlbg==

---
# Elasticsearch Security Secrets (if security is enabled)
apiVersion: v1
kind: Secret
metadata:
  name: elasticsearch-security-secret
  namespace: echo-monitoring
  labels:
    app: elasticsearch
type: Opaque
data:
  # elastic-password: Base64 encoded elastic user password
  elastic-password: ZWxhc3RpY19wYXNzd29yZA==
  # kibana-password: Base64 encoded kibana system user password
  kibana-password: a2liYW5hX3Bhc3N3b3Jk
  # logstash-password: Base64 encoded logstash system user password
  logstash-password: bG9nc3Rhc2hfcGFzc3dvcmQ=

---
# Certificate Authority Secret for Internal TLS
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-ca-secret
  namespace: echo-monitoring
  labels:
    app: monitoring-ca
type: Opaque
data:
  # ca.crt: Base64 encoded CA certificate
  ca.crt: ''
  # ca.key: Base64 encoded CA private key
  ca.key: ''

---
# Fluentd Configuration Secrets
apiVersion: v1
kind: Secret
metadata:
  name: fluentd-secret
  namespace: echo-monitoring
  labels:
    app: fluentd
type: Opaque
data:
  # elasticsearch-password: Base64 encoded password for Elasticsearch authentication
  elasticsearch-password: Zmx1ZW50ZF9lc19wYXNzd29yZA==
  # s3-access-key: Base64 encoded S3 access key for log archival
  s3-access-key: Zmx1ZW50ZF9zM19hY2Nlc3Nfa2V5
  # s3-secret-key: Base64 encoded S3 secret key for log archival
  s3-secret-key: Zmx1ZW50ZF9zM19zZWNyZXRfa2V5
